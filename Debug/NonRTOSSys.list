
NonRTOSSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d0  080093d0  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d8  080093d8  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080093e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  200000c8  080094a4  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001240  080094a4  00021240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0f1  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000427e  00000000  00000000  0003c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a440  00000000  00000000  00042e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014642  00000000  00000000  0005d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095402  00000000  00000000  000718e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106ce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006388  00000000  00000000  00106d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800897c 	.word	0x0800897c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	0800897c 	.word	0x0800897c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <user_TIM_PeriodElapsedCallback>:

#include "IRremote.h"


void user_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if(htim == &decodetim)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a57      	ldr	r2, [pc, #348]	; (8000fe4 <user_TIM_PeriodElapsedCallback+0x168>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	f040 80a0 	bne.w	8000fce <user_TIM_PeriodElapsedCallback+0x152>
	{
		uint8_t irdata = RECIV_PIN; // pin to receive
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4855      	ldr	r0, [pc, #340]	; (8000fe8 <user_TIM_PeriodElapsedCallback+0x16c>)
 8000e92:	f003 fd0b 	bl	80048ac <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000e9c:	885b      	ldrh	r3, [r3, #2]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b51      	ldr	r3, [pc, #324]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000ea6:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 8000ea8:	4b50      	ldr	r3, [pc, #320]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8000eac:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	f200 808a 	bhi.w	8000fce <user_TIM_PeriodElapsedCallback+0x152>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <user_TIM_PeriodElapsedCallback+0x44>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed5 	.word	0x08000ed5
 8000ec4:	08000f29 	.word	0x08000f29
 8000ec8:	08000f5d 	.word	0x08000f5d
 8000ecc:	08000fa3 	.word	0x08000fa3
 8000ed0:	08000fb1 	.word	0x08000fb1
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d172      	bne.n	8000fc0 <user_TIM_PeriodElapsedCallback+0x144>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8000eda:	4b44      	ldr	r3, [pc, #272]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000edc:	885b      	ldrh	r3, [r3, #2]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	2b63      	cmp	r3, #99	; 0x63
 8000ee2:	d803      	bhi.n	8000eec <user_TIM_PeriodElapsedCallback+0x70>
					{
						irparams.timer = 0;
 8000ee4:	4b41      	ldr	r3, [pc, #260]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8000eea:	e069      	b.n	8000fc0 <user_TIM_PeriodElapsedCallback+0x144>
						irparams.overflow = false;
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	b2d1      	uxtb	r1, r2
 8000f04:	4a39      	ldr	r2, [pc, #228]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f06:	7051      	strb	r1, [r2, #1]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f0c:	885b      	ldrh	r3, [r3, #2]
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	4a36      	ldr	r2, [pc, #216]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f12:	0043      	lsls	r3, r0, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	701a      	strb	r2, [r3, #0]
			break;
 8000f26:	e04b      	b.n	8000fc0 <user_TIM_PeriodElapsedCallback+0x144>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d14a      	bne.n	8000fc4 <user_TIM_PeriodElapsedCallback+0x148>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	b2d1      	uxtb	r1, r2
 8000f38:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f3a:	7051      	strb	r1, [r2, #1]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f40:	885b      	ldrh	r3, [r3, #2]
 8000f42:	b299      	uxth	r1, r3
 8000f44:	4a29      	ldr	r2, [pc, #164]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f46:	0043      	lsls	r3, r0, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	701a      	strb	r2, [r3, #0]
				}

			break;
 8000f5a:	e033      	b.n	8000fc4 <user_TIM_PeriodElapsedCallback+0x148>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d116      	bne.n	8000f90 <user_TIM_PeriodElapsedCallback+0x114>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	b2d1      	uxtb	r1, r2
 8000f6c:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f6e:	7051      	strb	r1, [r2, #1]
 8000f70:	4618      	mov	r0, r3
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f74:	885b      	ldrh	r3, [r3, #2]
 8000f76:	b299      	uxth	r1, r3
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f7a:	0043      	lsls	r3, r0, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8000f8e:	e01b      	b.n	8000fc8 <user_TIM_PeriodElapsedCallback+0x14c>
				else if(irparams.timer > GAP_TICKS) // Space
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f92:	885b      	ldrh	r3, [r3, #2]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d916      	bls.n	8000fc8 <user_TIM_PeriodElapsedCallback+0x14c>
					irparams.rcvstate = STATE_STOP;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	701a      	strb	r2, [r3, #0]
			break;
 8000fa0:	e012      	b.n	8000fc8 <user_TIM_PeriodElapsedCallback+0x14c>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d111      	bne.n	8000fcc <user_TIM_PeriodElapsedCallback+0x150>
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	805a      	strh	r2, [r3, #2]
			break;
 8000fae:	e00d      	b.n	8000fcc <user_TIM_PeriodElapsedCallback+0x150>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <user_TIM_PeriodElapsedCallback+0x170>)
 8000fba:	2205      	movs	r2, #5
 8000fbc:	701a      	strb	r2, [r3, #0]
			break;
 8000fbe:	e006      	b.n	8000fce <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8000fc0:	bf00      	nop
 8000fc2:	e004      	b.n	8000fce <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8000fc4:	bf00      	nop
 8000fc6:	e002      	b.n	8000fce <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8000fc8:	bf00      	nop
 8000fca:	e000      	b.n	8000fce <user_TIM_PeriodElapsedCallback+0x152>
			break;
 8000fcc:	bf00      	nop
		}
	}
	if (htim->Instance == TIM4) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <user_TIM_PeriodElapsedCallback+0x174>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <user_TIM_PeriodElapsedCallback+0x160>
	    HAL_IncTick();
 8000fd8:	f003 f940 	bl	800425c <HAL_IncTick>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000f10 	.word	0x20000f10
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	20000188 	.word	0x20000188
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MATCH+0x98>)
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4618      	mov	r0, r3
 8001014:	4621      	mov	r1, r4
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MATCH+0x9c>)
 800101c:	f7ff fc16 	bl	800084c <__aeabi_ddiv>
 8001020:	4603      	mov	r3, r0
 8001022:	460c      	mov	r4, r1
 8001024:	4618      	mov	r0, r3
 8001026:	4621      	mov	r1, r4
 8001028:	f7ff fd80 	bl	8000b2c <__aeabi_d2iz>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4293      	cmp	r3, r2
 8001032:	db25      	blt.n	8001080 <MATCH+0x8c>
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f7ff fa75 	bl	8000524 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MATCH+0xa0>)
 8001040:	f7ff fada 	bl	80005f8 <__aeabi_dmul>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	4618      	mov	r0, r3
 800104a:	4621      	mov	r1, r4
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MATCH+0x9c>)
 8001052:	f7ff fbfb 	bl	800084c <__aeabi_ddiv>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <MATCH+0xa4>)
 8001064:	f7ff f912 	bl	800028c <__adddf3>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4618      	mov	r0, r3
 800106e:	4621      	mov	r1, r4
 8001070:	f7ff fd5c 	bl	8000b2c <__aeabi_d2iz>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4293      	cmp	r3, r2
 800107a:	dc01      	bgt.n	8001080 <MATCH+0x8c>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <MATCH+0x8e>
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	3fe80000 	.word	0x3fe80000
 8001090:	40490000 	.word	0x40490000
 8001094:	3ff40000 	.word	0x3ff40000
 8001098:	3ff00000 	.word	0x3ff00000

0800109c <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3364      	adds	r3, #100	; 0x64
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_i2d>
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <MATCH_MARK+0xa0>)
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MATCH_MARK+0xa4>)
 80010c8:	f7ff fbc0 	bl	800084c <__aeabi_ddiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fd2a 	bl	8000b2c <__aeabi_d2iz>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4293      	cmp	r3, r2
 80010de:	db27      	blt.n	8001130 <MATCH_MARK+0x94>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3364      	adds	r3, #100	; 0x64
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa1d 	bl	8000524 <__aeabi_i2d>
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MATCH_MARK+0xa8>)
 80010f0:	f7ff fa82 	bl	80005f8 <__aeabi_dmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4618      	mov	r0, r3
 80010fa:	4621      	mov	r1, r4
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MATCH_MARK+0xa4>)
 8001102:	f7ff fba3 	bl	800084c <__aeabi_ddiv>
 8001106:	4603      	mov	r3, r0
 8001108:	460c      	mov	r4, r1
 800110a:	4618      	mov	r0, r3
 800110c:	4621      	mov	r1, r4
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MATCH_MARK+0xac>)
 8001114:	f7ff f8ba 	bl	800028c <__adddf3>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fd04 	bl	8000b2c <__aeabi_d2iz>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4293      	cmp	r3, r2
 800112a:	dc01      	bgt.n	8001130 <MATCH_MARK+0x94>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <MATCH_MARK+0x96>
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	3fe80000 	.word	0x3fe80000
 8001140:	40490000 	.word	0x40490000
 8001144:	3ff40000 	.word	0x3ff40000
 8001148:	3ff00000 	.word	0x3ff00000

0800114c <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3b64      	subs	r3, #100	; 0x64
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9e2 	bl	8000524 <__aeabi_i2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MATCH_SPACE+0xa0>)
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4603      	mov	r3, r0
 800116c:	460c      	mov	r4, r1
 800116e:	4618      	mov	r0, r3
 8001170:	4621      	mov	r1, r4
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MATCH_SPACE+0xa4>)
 8001178:	f7ff fb68 	bl	800084c <__aeabi_ddiv>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	4618      	mov	r0, r3
 8001182:	4621      	mov	r1, r4
 8001184:	f7ff fcd2 	bl	8000b2c <__aeabi_d2iz>
 8001188:	4602      	mov	r2, r0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4293      	cmp	r3, r2
 800118e:	db27      	blt.n	80011e0 <MATCH_SPACE+0x94>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3b64      	subs	r3, #100	; 0x64
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9c5 	bl	8000524 <__aeabi_i2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MATCH_SPACE+0xa8>)
 80011a0:	f7ff fa2a 	bl	80005f8 <__aeabi_dmul>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4618      	mov	r0, r3
 80011aa:	4621      	mov	r1, r4
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MATCH_SPACE+0xa4>)
 80011b2:	f7ff fb4b 	bl	800084c <__aeabi_ddiv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	4618      	mov	r0, r3
 80011bc:	4621      	mov	r1, r4
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MATCH_SPACE+0xac>)
 80011c4:	f7ff f862 	bl	800028c <__adddf3>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	f7ff fcac 	bl	8000b2c <__aeabi_d2iz>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4293      	cmp	r3, r2
 80011da:	dc01      	bgt.n	80011e0 <MATCH_SPACE+0x94>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <MATCH_SPACE+0x96>
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	3fe80000 	.word	0x3fe80000
 80011f0:	40490000 	.word	0x40490000
 80011f4:	3ff40000 	.word	0x3ff40000
 80011f8:	3ff00000 	.word	0x3ff00000

080011fc <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a46      	ldr	r2, [pc, #280]	; (8001320 <my_decode+0x124>)
 8001208:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <my_decode+0x128>)
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <my_decode+0x128>)
 8001218:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800121c:	b2db      	uxtb	r3, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <my_decode+0x128>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b05      	cmp	r3, #5
 800122c:	d001      	beq.n	8001232 <my_decode+0x36>
 800122e:	2300      	movs	r3, #0
 8001230:	e072      	b.n	8001318 <my_decode+0x11c>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fcf6 	bl	8001c24 <decodeNEC>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <my_decode+0x46>
 800123e:	2301      	movs	r3, #1
 8001240:	e06a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f001 f980 	bl	8002548 <decodeSony>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <my_decode+0x56>
 800124e:	2301      	movs	r3, #1
 8001250:	e062      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_SANYO
		if(decodeSanyo(results)) return true;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 f8c4 	bl	80023e0 <decodeSanyo>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <my_decode+0x66>
 800125e:	2301      	movs	r3, #1
 8001260:	e05a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fc50 	bl	8001b08 <decodeMitsubishi>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <my_decode+0x76>
 800126e:	2301      	movs	r3, #1
 8001270:	e052      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 feae 	bl	8001fd4 <decodeRC5>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <my_decode+0x86>
 800127e:	2301      	movs	r3, #1
 8001280:	e04a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff2c 	bl	80020e0 <decodeRC6>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <my_decode+0x96>
 800128e:	2301      	movs	r3, #1
 8001290:	e042      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fd88 	bl	8001da8 <decodePanasonic>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <my_decode+0xa6>
 800129e:	2301      	movs	r3, #1
 80012a0:	e03a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fb90 	bl	80019c8 <decodeLG>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <my_decode+0xb6>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e032      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fab4 	bl	8001820 <decodeJVC>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <my_decode+0xc6>
 80012be:	2301      	movs	r3, #1
 80012c0:	e02a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 ffcc 	bl	8002260 <decodeSAMSUNG>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <my_decode+0xd6>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e022      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_WHYNTER
		if(decodeWhynter(results)) return true;
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f001 f9da 	bl	800268c <decodeWhynter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <my_decode+0xe6>
 80012de:	2301      	movs	r3, #1
 80012e0:	e01a      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_AIWA_RC_T501
		if(decodeAiwaRCT501(results)) return true;
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f970 	bl	80015c8 <decodeAiwaRCT501>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <my_decode+0xf6>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e012      	b.n	8001318 <my_decode+0x11c>
	#endif

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fa06 	bl	8001704 <decodeDenon>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <my_decode+0x106>
 80012fe:	2301      	movs	r3, #1
 8001300:	e00a      	b.n	8001318 <my_decode+0x11c>
	#endif

	if(decodeHash(results)) return true;
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8ac 	bl	8001460 <decodeHash>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <my_decode+0x116>
 800130e:	2301      	movs	r3, #1
 8001310:	e002      	b.n	8001318 <my_decode+0x11c>
	my_resume();
 8001312:	f000 f855 	bl	80013c0 <my_resume>
	return false;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000018c 	.word	0x2000018c
 8001324:	20000188 	.word	0x20000188

08001328 <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
	DWT_Init(); // microsecond counter start
 800132e:	f000 f933 	bl	8001598 <DWT_Init>

	HAL_TIM_Base_DeInit(&decodetim);
 8001332:	4821      	ldr	r0, [pc, #132]	; (80013b8 <my_enableIRIn+0x90>)
 8001334:	f004 f947 	bl	80055c6 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]

	decodetim.Instance = instance_tim;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <my_enableIRIn+0x90>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	601a      	str	r2, [r3, #0]
	decodetim.Init.Prescaler = MYPRESCALER;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <my_enableIRIn+0x90>)
 8001358:	2214      	movs	r2, #20
 800135a:	605a      	str	r2, [r3, #4]
	decodetim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <my_enableIRIn+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
	decodetim.Init.Period = MYPERIOD;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <my_enableIRIn+0x90>)
 8001364:	2231      	movs	r2, #49	; 0x31
 8001366:	60da      	str	r2, [r3, #12]
	decodetim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <my_enableIRIn+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
	decodetim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <my_enableIRIn+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&decodetim);
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <my_enableIRIn+0x90>)
 8001376:	f004 f8fb 	bl	8005570 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&decodetim, &sClockSourceConfig);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <my_enableIRIn+0x90>)
 8001388:	f004 fcce 	bl	8005d28 <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&decodetim, &sMasterConfig);
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <my_enableIRIn+0x90>)
 800139a:	f005 f98f 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <my_enableIRIn+0x94>)
 80013a0:	2202      	movs	r2, #2
 80013a2:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <my_enableIRIn+0x94>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&decodetim);
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <my_enableIRIn+0x90>)
 80013ac:	f004 f93b 	bl	8005626 <HAL_TIM_Base_Start_IT>
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000f10 	.word	0x20000f10
 80013bc:	20000188 	.word	0x20000188

080013c0 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <my_resume+0x1c>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <my_resume+0x1c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000188 	.word	0x20000188

080013e0 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7ff f88a 	bl	8000504 <__aeabi_ui2d>
 80013f0:	4604      	mov	r4, r0
 80013f2:	460d      	mov	r5, r1
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff f885 	bl	8000504 <__aeabi_ui2d>
 80013fa:	a317      	add	r3, pc, #92	; (adr r3, 8001458 <compare+0x78>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8fa 	bl	80005f8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7ff fb66 	bl	8000adc <__aeabi_dcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <compare+0x3a>
 8001416:	2300      	movs	r3, #0
 8001418:	e018      	b.n	800144c <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f872 	bl	8000504 <__aeabi_ui2d>
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f7ff f86d 	bl	8000504 <__aeabi_ui2d>
 800142a:	a30b      	add	r3, pc, #44	; (adr r3, 8001458 <compare+0x78>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8e2 	bl	80005f8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff fb4e 	bl	8000adc <__aeabi_dcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <compare+0x6a>
 8001446:	2302      	movs	r3, #2
 8001448:	e000      	b.n	800144c <compare+0x6c>
	else return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bdb0      	pop	{r4, r5, r7, pc}
 8001454:	f3af 8000 	nop.w
 8001458:	9999999a 	.word	0x9999999a
 800145c:	3fe99999 	.word	0x3fe99999

08001460 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <decodeHash+0x98>)
 800146a:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001472:	2b05      	cmp	r3, #5
 8001474:	dc01      	bgt.n	800147a <decodeHash+0x1a>
 8001476:	2300      	movs	r3, #0
 8001478:	e039      	b.n	80014ee <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 800147a:	2301      	movs	r3, #1
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	e024      	b.n	80014ca <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800149a:	3302      	adds	r3, #2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff ff9b 	bl	80013e0 <compare>
 80014aa:	4603      	mov	r3, r0
 80014ac:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <decodeHash+0x9c>)
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014ba:	4053      	eors	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 80014be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ce:	3302      	adds	r3, #2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	dbd2      	blt.n	8001480 <decodeHash+0x20>
	}

	results->value = hash;
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	return true;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	811c9dc5 	.word	0x811c9dc5
 80014fc:	01000193 	.word	0x01000193

08001500 <xiaomi_fan_run>:
extern TIM_HandleTypeDef htim5;
TIM_HandleTypeDef *fan_htim = &htim1;
TIM_HandleTypeDef *fan_read_htim = &htim5;
extern uint8_t cap_speed_available;
void xiaomi_fan_run(level)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if(level == HIGH_SPEED)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d10a      	bne.n	8001524 <xiaomi_fan_run+0x24>
	{
		TIM1->ARR = 1999;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <xiaomi_fan_run+0x68>)
 8001510:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_1, 1000);
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <xiaomi_fan_run+0x6c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
	else if(level == LOW_SPEED)
	{
		TIM1->ARR = 3999;
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_1, 2000);
	}
}
 8001522:	e01a      	b.n	800155a <xiaomi_fan_run+0x5a>
	else if(level == MED_SPEED)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d10a      	bne.n	8001540 <xiaomi_fan_run+0x40>
		TIM1->ARR = 2999;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <xiaomi_fan_run+0x68>)
 800152c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_1, 1500);
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <xiaomi_fan_run+0x6c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800153e:	e00c      	b.n	800155a <xiaomi_fan_run+0x5a>
	else if(level == LOW_SPEED)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d109      	bne.n	800155a <xiaomi_fan_run+0x5a>
		TIM1->ARR = 3999;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <xiaomi_fan_run+0x68>)
 8001548:	f640 729f 	movw	r2, #3999	; 0xf9f
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_1, 2000);
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <xiaomi_fan_run+0x6c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001558:	635a      	str	r2, [r3, #52]	; 0x34
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40010000 	.word	0x40010000
 800156c:	20000000 	.word	0x20000000

08001570 <xiaomi_fan_stop>:

void xiaomi_fan_stop(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	TIM1->ARR = 0;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <xiaomi_fan_stop+0x20>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_1, 0);
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <xiaomi_fan_stop+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40010000 	.word	0x40010000
 8001594:	20000000 	.word	0x20000000

08001598 <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC


void DWT_Init()
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use the counter
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <DWT_Init+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <DWT_Init+0x28>)
 80015a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a6:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start the counter
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <DWT_Init+0x2c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <DWT_Init+0x2c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000edfc 	.word	0xe000edfc
 80015c4:	e0001000 	.word	0xe0001000

080015c8 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	int  data   = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
	int  offset = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 80015d8:	4b49      	ldr	r3, [pc, #292]	; (8001700 <decodeAiwaRCT501+0x138>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b57      	cmp	r3, #87	; 0x57
 80015e0:	d801      	bhi.n	80015e6 <decodeAiwaRCT501+0x1e>
 80015e2:	2300      	movs	r3, #0
 80015e4:	e087      	b.n	80016f6 <decodeAiwaRCT501+0x12e>

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f242 2160 	movw	r1, #8800	; 0x2260
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd4d 	bl	800109c <MATCH_MARK>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <decodeAiwaRCT501+0x44>
 8001608:	2300      	movs	r3, #0
 800160a:	e074      	b.n	80016f6 <decodeAiwaRCT501+0x12e>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	f241 1194 	movw	r1, #4500	; 0x1194
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fd92 	bl	800114c <MATCH_SPACE>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <decodeAiwaRCT501+0x6a>
 800162e:	2300      	movs	r3, #0
 8001630:	e061      	b.n	80016f6 <decodeAiwaRCT501+0x12e>

	offset += 26;  // skip pre-data - optional
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	331a      	adds	r3, #26
 8001636:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8001638:	e03e      	b.n	80016b8 <decodeAiwaRCT501+0xf0>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd25 	bl	800109c <MATCH_MARK>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d012      	beq.n	800167e <decodeAiwaRCT501+0xb6>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fd6b 	bl	800114c <MATCH_SPACE>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <decodeAiwaRCT501+0xc6>
 800167c:	e001      	b.n	8001682 <decodeAiwaRCT501+0xba>
		else                                                             return false ;
 800167e:	2300      	movs	r3, #0
 8001680:	e039      	b.n	80016f6 <decodeAiwaRCT501+0x12e>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e011      	b.n	80016b2 <decodeAiwaRCT501+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fd53 	bl	800114c <MATCH_SPACE>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <decodeAiwaRCT501+0x100>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
		else                                                                     break ;  // End of one & zero detected
		offset++;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <decodeAiwaRCT501+0x138>)
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3b04      	subs	r3, #4
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbb9      	blt.n	800163a <decodeAiwaRCT501+0x72>
 80016c6:	e000      	b.n	80016ca <decodeAiwaRCT501+0x102>
		else                                                                     break ;  // End of one & zero detected
 80016c8:	bf00      	nop
	}

	results->bits = (offset - 1) / 2;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	4413      	add	r3, r2
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	811a      	strh	r2, [r3, #8]
	if (results->bits < 42)  return false ;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016e0:	2b29      	cmp	r3, #41	; 0x29
 80016e2:	dc01      	bgt.n	80016e8 <decodeAiwaRCT501+0x120>
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <decodeAiwaRCT501+0x12e>

	results->value       = data;
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	605a      	str	r2, [r3, #4]
	results->decode_type = AIWA_RC_T501;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2209      	movs	r2, #9
 80016f2:	701a      	strb	r2, [r3, #0]
	return true;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000188 	.word	0x20000188

08001704 <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	unsigned long data   = 0;  // Somewhere to build our code
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
	int offset = 1;  // Skip the Gap reading
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <decodeDenon+0x118>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b20      	cmp	r3, #32
 800171c:	d001      	beq.n	8001722 <decodeDenon+0x1e>
 800171e:	2300      	movs	r3, #0
 8001720:	e078      	b.n	8001814 <decodeDenon+0x110>

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	6139      	str	r1, [r7, #16]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fcaf 	bl	800109c <MATCH_MARK>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <decodeDenon+0x44>
 8001744:	2300      	movs	r3, #0
 8001746:	e065      	b.n	8001814 <decodeDenon+0x110>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	6139      	str	r1, [r7, #16]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fcf4 	bl	800114c <MATCH_SPACE>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <decodeDenon+0x6a>
 800176a:	2300      	movs	r3, #0
 800176c:	e052      	b.n	8001814 <decodeDenon+0x110>

	// Read the bits in
	for(int i = 0; i < BITS; i++) 
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e042      	b.n	80017fa <decodeDenon+0xf6>
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	6139      	str	r1, [r7, #16]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fc86 	bl	800109c <MATCH_MARK>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <decodeDenon+0x96>
 8001796:	2300      	movs	r3, #0
 8001798:	e03c      	b.n	8001814 <decodeDenon+0x110>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fccd 	bl	800114c <MATCH_SPACE>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <decodeDenon+0xc0>
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e014      	b.n	80017ee <decodeDenon+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fcb8 	bl	800114c <MATCH_SPACE>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <decodeDenon+0xe6>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e001      	b.n	80017ee <decodeDenon+0xea>
		else return false;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e012      	b.n	8001814 <decodeDenon+0x110>
		offset++;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	3301      	adds	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < BITS; i++) 
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b0d      	cmp	r3, #13
 80017fe:	ddb9      	ble.n	8001774 <decodeDenon+0x70>
	}

	// Success
	results->bits = BITS;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	220e      	movs	r2, #14
 8001804:	811a      	strh	r2, [r3, #8]
	results->value = data;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	605a      	str	r2, [r3, #4]
	results->decode_type = DENON;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	220f      	movs	r2, #15
 8001810:	701a      	strb	r2, [r3, #0]
	return true;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000188 	.word	0x20000188

08001820 <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	long data   = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 800182c:	2301      	movs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8001830:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <decodeJVC+0x1a4>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b22      	cmp	r3, #34	; 0x22
 8001838:	d12e      	bne.n	8001898 <decodeJVC+0x78>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f44f 7116 	mov.w	r1, #600	; 0x258
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc25 	bl	800109c <MATCH_MARK>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01f      	beq.n	8001898 <decodeJVC+0x78>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <decodeJVC+0x1a4>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001866:	3b01      	subs	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc11 	bl	800109c <MATCH_MARK>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <decodeJVC+0x78>
	{
		results->bits = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2206      	movs	r2, #6
 8001892:	701a      	strb	r2, [r3, #0]
		return true;
 8001894:	2301      	movs	r3, #1
 8001896:	e090      	b.n	80019ba <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	6139      	str	r1, [r7, #16]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fbf4 	bl	800109c <MATCH_MARK>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <decodeJVC+0x9e>
 80018ba:	2300      	movs	r3, #0
 80018bc:	e07d      	b.n	80019ba <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <decodeJVC+0x1a4>)
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d801      	bhi.n	80018cc <decodeJVC+0xac>
 80018c8:	2300      	movs	r3, #0
 80018ca:	e076      	b.n	80019ba <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	6139      	str	r1, [r7, #16]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc32 	bl	800114c <MATCH_SPACE>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <decodeJVC+0xd2>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e063      	b.n	80019ba <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++) 
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e042      	b.n	800197e <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	6139      	str	r1, [r7, #16]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fbc4 	bl	800109c <MATCH_MARK>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <decodeJVC+0xfe>
 800191a:	2300      	movs	r3, #0
 800191c:	e04d      	b.n	80019ba <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc0b 	bl	800114c <MATCH_SPACE>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <decodeJVC+0x128>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e014      	b.n	8001972 <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f240 2126 	movw	r1, #550	; 0x226
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fbf6 	bl	800114c <MATCH_SPACE>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <decodeJVC+0x14e>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e001      	b.n	8001972 <decodeJVC+0x152>
		else return false ;
 800196e:	2300      	movs	r3, #0
 8001970:	e023      	b.n	80019ba <decodeJVC+0x19a>
		offset++;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++) 
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	ddb9      	ble.n	80018f8 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fb80 	bl	800109c <MATCH_MARK>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <decodeJVC+0x186>
 80019a2:	2300      	movs	r3, #0
 80019a4:	e009      	b.n	80019ba <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2210      	movs	r2, #16
 80019aa:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2206      	movs	r2, #6
 80019b6:	701a      	strb	r2, [r3, #0]

	return true;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000188 	.word	0x20000188

080019c8 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 80019d4:	2301      	movs	r3, #1
 80019d6:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <decodeLG+0x13c>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b38      	cmp	r3, #56	; 0x38
 80019e0:	d801      	bhi.n	80019e6 <decodeLG+0x1e>
 80019e2:	2300      	movs	r3, #0
 80019e4:	e089      	b.n	8001afa <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fb4d 	bl	800109c <MATCH_MARK>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <decodeLG+0x44>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e076      	b.n	8001afa <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	6139      	str	r1, [r7, #16]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fb92 	bl	800114c <MATCH_SPACE>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <decodeLG+0x6a>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e063      	b.n	8001afa <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e042      	b.n	8001abe <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1c59      	adds	r1, r3, #1
 8001a40:	6139      	str	r1, [r7, #16]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb24 	bl	800109c <MATCH_MARK>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <decodeLG+0x96>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e04d      	b.n	8001afa <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fb6b 	bl	800114c <MATCH_SPACE>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <decodeLG+0xc0>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e014      	b.n	8001ab2 <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f240 2126 	movw	r1, #550	; 0x226
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fb56 	bl	800114c <MATCH_SPACE>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <decodeLG+0xe6>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e001      	b.n	8001ab2 <decodeLG+0xea>
        else                                                           return false ;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e023      	b.n	8001afa <decodeLG+0x132>
        offset++;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b1b      	cmp	r3, #27
 8001ac2:	ddb9      	ble.n	8001a38 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fae0 	bl	800109c <MATCH_MARK>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <decodeLG+0x11e>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e009      	b.n	8001afa <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	221c      	movs	r2, #28
 8001aea:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	220a      	movs	r2, #10
 8001af6:	701a      	strb	r2, [r3, #0]
    return true;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000188 	.word	0x20000188

08001b08 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <decodeMitsubishi+0x118>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b21      	cmp	r3, #33	; 0x21
 8001b1c:	d801      	bhi.n	8001b22 <decodeMitsubishi+0x1a>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e07a      	b.n	8001c18 <decodeMitsubishi+0x110>
  int offset = 0; // Skip first space
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
    results->decode_type = MITSUBISHI;
    return true;
  }
#endif

  offset++;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff faac 	bl	800109c <MATCH_MARK>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <decodeMitsubishi+0x46>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e064      	b.n	8001c18 <decodeMitsubishi+0x110>
  offset++;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]

  while (offset + 1 < irparams.rawlen) {
 8001b54:	e03e      	b.n	8001bd4 <decodeMitsubishi+0xcc>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f240 719e 	movw	r1, #1950	; 0x79e
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fa97 	bl	800109c <MATCH_MARK>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <decodeMitsubishi+0x78>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e014      	b.n	8001baa <decodeMitsubishi+0xa2>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fa82 	bl	800109c <MATCH_MARK>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <decodeMitsubishi+0x9e>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e001      	b.n	8001baa <decodeMitsubishi+0xa2>
    else                                                                 return false ;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e036      	b.n	8001c18 <decodeMitsubishi+0x110>
    offset++;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fac2 	bl	800114c <MATCH_SPACE>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <decodeMitsubishi+0xdc>
    offset++;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
  while (offset + 1 < irparams.rawlen) {
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <decodeMitsubishi+0x118>)
 8001bda:	7852      	ldrb	r2, [r2, #1]
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	4293      	cmp	r3, r2
 8001be0:	dbb9      	blt.n	8001b56 <decodeMitsubishi+0x4e>
 8001be2:	e000      	b.n	8001be6 <decodeMitsubishi+0xde>
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8001be4:	bf00      	nop
  }

  // Success
  results->bits = (offset - 1) / 2;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	0fda      	lsrs	r2, r3, #31
 8001bec:	4413      	add	r3, r2
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	811a      	strh	r2, [r3, #8]
  if (results->bits < MITSUBISHI_BITS) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	dc04      	bgt.n	8001c0a <decodeMitsubishi+0x102>
    results->bits = 0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	811a      	strh	r2, [r3, #8]
    return false;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e006      	b.n	8001c18 <decodeMitsubishi+0x110>
  }

  results->value       = data;
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
  results->decode_type = MITSUBISHI;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	220c      	movs	r2, #12
 8001c14:	701a      	strb	r2, [r3, #0]
  return true;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000188 	.word	0x20000188

08001c24 <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f242 3128 	movw	r1, #9000	; 0x2328
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa28 	bl	800109c <MATCH_MARK>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <decodeNEC+0x32>
 8001c52:	2300      	movs	r3, #0
 8001c54:	e0a1      	b.n	8001d9a <decodeNEC+0x176>
	offset++;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 8001c5c:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <decodeNEC+0x180>)
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d12a      	bne.n	8001cbc <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fa67 	bl	800114c <MATCH_SPACE>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f9ff 	bl	800109c <MATCH_MARK>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	701a      	strb	r2, [r3, #0]
		return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e06e      	b.n	8001d9a <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <decodeNEC+0x180>)
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b43      	cmp	r3, #67	; 0x43
 8001cc4:	d801      	bhi.n	8001cca <decodeNEC+0xa6>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e067      	b.n	8001d9a <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f241 1194 	movw	r1, #4500	; 0x1194
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa35 	bl	800114c <MATCH_SPACE>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <decodeNEC+0xc8>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e056      	b.n	8001d9a <decodeNEC+0x176>
	offset++;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e043      	b.n	8001d80 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9c6 	bl	800109c <MATCH_MARK>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <decodeNEC+0xf6>
 8001d16:	2300      	movs	r3, #0
 8001d18:	e03f      	b.n	8001d9a <decodeNEC+0x176>
		offset++;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f240 619a 	movw	r1, #1690	; 0x69a
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa0a 	bl	800114c <MATCH_SPACE>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <decodeNEC+0x126>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e014      	b.n	8001d74 <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f9f5 	bl	800114c <MATCH_SPACE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <decodeNEC+0x14c>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e001      	b.n	8001d74 <decodeNEC+0x150>
		else                                                            return false ;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e012      	b.n	8001d9a <decodeNEC+0x176>
		offset++;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	3301      	adds	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b1f      	cmp	r3, #31
 8001d84:	ddb8      	ble.n	8001cf8 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2203      	movs	r2, #3
 8001d96:	701a      	strb	r2, [r3, #0]

	return true;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000188 	.word	0x20000188

08001da8 <decodePanasonic>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
uint8_t decodePanasonic (decode_results *results)
{
 8001da8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
    unsigned long long  data   = 0;
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int                 offset = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c59      	adds	r1, r3, #1
 8001dca:	60f9      	str	r1, [r7, #12]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f640 51ae 	movw	r1, #3502	; 0xdae
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f95f 	bl	800109c <MATCH_MARK>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <decodePanasonic+0x40>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e080      	b.n	8001eea <decodePanasonic+0x142>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	60f9      	str	r1, [r7, #12]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f94c 	bl	800109c <MATCH_MARK>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <decodePanasonic+0x66>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e06d      	b.n	8001eea <decodePanasonic+0x142>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	e052      	b.n	8001eba <decodePanasonic+0x112>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	60f9      	str	r1, [r7, #12]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f936 	bl	800109c <MATCH_MARK>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <decodePanasonic+0x92>
 8001e36:	2300      	movs	r3, #0
 8001e38:	e057      	b.n	8001eea <decodePanasonic+0x142>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f97d 	bl	800114c <MATCH_SPACE>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d011      	beq.n	8001e7c <decodePanasonic+0xd4>
 8001e58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e5c:	184b      	adds	r3, r1, r1
 8001e5e:	eb42 0402 	adc.w	r4, r2, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	4622      	mov	r2, r4
 8001e66:	f04f 0301 	mov.w	r3, #1
 8001e6a:	f04f 0400 	mov.w	r4, #0
 8001e6e:	ea43 0b01 	orr.w	fp, r3, r1
 8001e72:	ea44 0c02 	orr.w	ip, r4, r2
 8001e76:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 8001e7a:	e018      	b.n	8001eae <decodePanasonic+0x106>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f95c 	bl	800114c <MATCH_SPACE>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <decodePanasonic+0x102>
 8001e9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e9e:	184b      	adds	r3, r1, r1
 8001ea0:	eb42 0402 	adc.w	r4, r2, r2
 8001ea4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001ea8:	e001      	b.n	8001eae <decodePanasonic+0x106>
        else                                                                 return false ;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e01d      	b.n	8001eea <decodePanasonic+0x142>
        offset++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b2f      	cmp	r3, #47	; 0x2f
 8001ebe:	dda9      	ble.n	8001e14 <decodePanasonic+0x6c>
    }

    results->value       = (unsigned long)data;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	605a      	str	r2, [r3, #4]
    results->address     = (unsigned int)(data >> 32);
 8001ec6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	805a      	strh	r2, [r3, #2]
    results->decode_type = PANASONIC;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2205      	movs	r2, #5
 8001ee0:	701a      	strb	r2, [r3, #0]
    results->bits        = PANASONIC_BITS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2230      	movs	r2, #48	; 0x30
 8001ee6:	811a      	strh	r2, [r3, #8]

    return true;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001ef4 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	db01      	blt.n	8001f14 <getRClevel+0x20>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e05b      	b.n	8001fcc <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <getRClevel+0x50>
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	e001      	b.n	8001f48 <getRClevel+0x54>
 8001f44:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001f48:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	69b8      	ldr	r0, [r7, #24]
 8001f54:	f7ff f84e 	bl	8000ff4 <MATCH>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <getRClevel+0x70>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e020      	b.n	8001fa6 <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	005a      	lsls	r2, r3, #1
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	69b8      	ldr	r0, [r7, #24]
 8001f70:	f7ff f840 	bl	8000ff4 <MATCH>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <getRClevel+0x8c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e012      	b.n	8001fa6 <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	441a      	add	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f7ff f830 	bl	8000ff4 <MATCH>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <getRClevel+0xac>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e002      	b.n	8001fa6 <getRClevel+0xb2>
	else                                         return -1 ;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	e012      	b.n	8001fcc <getRClevel+0xd8>

	(*used)++;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dc07      	bgt.n	8001fca <getRClevel+0xd6>
		*used = 0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
		(*offset)++;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 8001fca:	697b      	ldr	r3, [r7, #20]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <decodeRC5+0x108>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d801      	bhi.n	8001ff6 <decodeRC5+0x22>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e06d      	b.n	80020d2 <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	f107 0108 	add.w	r1, r7, #8
 8001ffe:	f240 3379 	movw	r3, #889	; 0x379
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff76 	bl	8001ef4 <getRClevel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <decodeRC5+0x3e>
 800200e:	2300      	movs	r3, #0
 8002010:	e05f      	b.n	80020d2 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	f107 0108 	add.w	r1, r7, #8
 800201a:	f240 3379 	movw	r3, #889	; 0x379
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff68 	bl	8001ef4 <getRClevel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <decodeRC5+0x5a>
 800202a:	2300      	movs	r3, #0
 800202c:	e051      	b.n	80020d2 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 800202e:	f107 020c 	add.w	r2, r7, #12
 8002032:	f107 0108 	add.w	r1, r7, #8
 8002036:	f240 3379 	movw	r3, #889	; 0x379
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff5a 	bl	8001ef4 <getRClevel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <decodeRC5+0x76>
 8002046:	2300      	movs	r3, #0
 8002048:	e043      	b.n	80020d2 <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e02e      	b.n	80020ae <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	f107 0108 	add.w	r1, r7, #8
 8002058:	f240 3379 	movw	r3, #889	; 0x379
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff49 	bl	8001ef4 <getRClevel>
 8002062:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8002064:	f107 020c 	add.w	r2, r7, #12
 8002068:	f107 0108 	add.w	r1, r7, #8
 800206c:	f240 3379 	movw	r3, #889	; 0x379
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff3f 	bl	8001ef4 <getRClevel>
 8002076:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d108      	bne.n	8002090 <decodeRC5+0xbc>
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <decodeRC5+0xbc>
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e00b      	b.n	80020a8 <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <decodeRC5+0xd0>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d103      	bne.n	80020a4 <decodeRC5+0xd0>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e001      	b.n	80020a8 <decodeRC5+0xd4>
		else                                              return false ;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e014      	b.n	80020d2 <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <decodeRC5+0x108>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dcc9      	bgt.n	8002050 <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	b21a      	sxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
	return true;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000188 	.word	0x20000188

080020e0 <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 80020f0:	2301      	movs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	dc01      	bgt.n	8002102 <decodeRC6+0x22>
 80020fe:	2300      	movs	r3, #0
 8002100:	e0a9      	b.n	8002256 <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1c59      	adds	r1, r3, #1
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f640 216a 	movw	r1, #2666	; 0xa6a
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ffbf 	bl	800109c <MATCH_MARK>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <decodeRC6+0x48>
 8002124:	2300      	movs	r3, #0
 8002126:	e096      	b.n	8002256 <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f240 3179 	movw	r1, #889	; 0x379
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f804 	bl	800114c <MATCH_SPACE>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <decodeRC6+0x6e>
 800214a:	2300      	movs	r3, #0
 800214c:	e083      	b.n	8002256 <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 800214e:	f107 020c 	add.w	r2, r7, #12
 8002152:	f107 0108 	add.w	r1, r7, #8
 8002156:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff feca 	bl	8001ef4 <getRClevel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <decodeRC6+0x8a>
 8002166:	2300      	movs	r3, #0
 8002168:	e075      	b.n	8002256 <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 800216a:	f107 020c 	add.w	r2, r7, #12
 800216e:	f107 0108 	add.w	r1, r7, #8
 8002172:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff febc 	bl	8001ef4 <getRClevel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <decodeRC6+0xa6>
 8002182:	2300      	movs	r3, #0
 8002184:	e067      	b.n	8002256 <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e052      	b.n	8002232 <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 800218c:	f107 020c 	add.w	r2, r7, #12
 8002190:	f107 0108 	add.w	r1, r7, #8
 8002194:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff feab 	bl	8001ef4 <getRClevel>
 800219e:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d10e      	bne.n	80021c4 <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80021a6:	f107 020c 	add.w	r2, r7, #12
 80021aa:	f107 0108 	add.w	r1, r7, #8
 80021ae:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fe9e 	bl	8001ef4 <getRClevel>
 80021b8:	4602      	mov	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4293      	cmp	r3, r2
 80021be:	d001      	beq.n	80021c4 <decodeRC6+0xe4>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e048      	b.n	8002256 <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80021c4:	f107 020c 	add.w	r2, r7, #12
 80021c8:	f107 0108 	add.w	r1, r7, #8
 80021cc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe8f 	bl	8001ef4 <getRClevel>
 80021d6:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d10e      	bne.n	80021fc <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80021de:	f107 020c 	add.w	r2, r7, #12
 80021e2:	f107 0108 	add.w	r1, r7, #8
 80021e6:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fe82 	bl	8001ef4 <getRClevel>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d001      	beq.n	80021fc <decodeRC6+0x11c>
 80021f8:	2300      	movs	r3, #0
 80021fa:	e02c      	b.n	8002256 <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <decodeRC6+0x134>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <decodeRC6+0x134>
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	e00b      	b.n	800222c <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <decodeRC6+0x148>
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <decodeRC6+0x148>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e001      	b.n	800222c <decodeRC6+0x14c>
		else                                              return false ;            // Error
 8002228:	2300      	movs	r3, #0
 800222a:	e014      	b.n	8002256 <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	dca5      	bgt.n	800218c <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	b21a      	sxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
	return true;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f241 1194 	movw	r1, #4500	; 0x1194
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ff0a 	bl	800109c <MATCH_MARK>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <decodeSAMSUNG+0x32>
 800228e:	2300      	movs	r3, #0
 8002290:	e09f      	b.n	80023d2 <decodeSAMSUNG+0x172>
	offset++;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3301      	adds	r3, #1
 8002296:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <decodeSAMSUNG+0x17c>)
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d12a      	bne.n	80022f8 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe ff49 	bl	800114c <MATCH_SPACE>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fee1 	bl	800109c <MATCH_MARK>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2207      	movs	r2, #7
 80022f2:	701a      	strb	r2, [r3, #0]
		return true;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e06c      	b.n	80023d2 <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <decodeSAMSUNG+0x17c>)
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b43      	cmp	r3, #67	; 0x43
 8002300:	d801      	bhi.n	8002306 <decodeSAMSUNG+0xa6>
 8002302:	2300      	movs	r3, #0
 8002304:	e065      	b.n	80023d2 <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1c59      	adds	r1, r3, #1
 800230e:	6139      	str	r1, [r7, #16]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f241 1194 	movw	r1, #4500	; 0x1194
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe ff15 	bl	800114c <MATCH_SPACE>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <decodeSAMSUNG+0xcc>
 8002328:	2300      	movs	r3, #0
 800232a:	e052      	b.n	80023d2 <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e042      	b.n	80023b8 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1c59      	adds	r1, r3, #1
 800233a:	6139      	str	r1, [r7, #16]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fea7 	bl	800109c <MATCH_MARK>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <decodeSAMSUNG+0xf8>
 8002354:	2300      	movs	r3, #0
 8002356:	e03c      	b.n	80023d2 <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe feee 	bl	800114c <MATCH_SPACE>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <decodeSAMSUNG+0x122>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e014      	b.n	80023ac <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fed9 	bl	800114c <MATCH_SPACE>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <decodeSAMSUNG+0x148>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e001      	b.n	80023ac <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 80023a8:	2300      	movs	r3, #0
 80023aa:	e012      	b.n	80023d2 <decodeSAMSUNG+0x172>
		offset++;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	3301      	adds	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b1f      	cmp	r3, #31
 80023bc:	ddb9      	ble.n	8002332 <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2207      	movs	r2, #7
 80023ce:	701a      	strb	r2, [r3, #0]
	return true;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000188 	.word	0x20000188

080023e0 <decodeSanyo>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo (decode_results *results)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Skip first space  <-- CHECK THIS!
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 80023f0:	4b54      	ldr	r3, [pc, #336]	; (8002544 <decodeSanyo+0x164>)
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b19      	cmp	r3, #25
 80023f8:	d801      	bhi.n	80023fe <decodeSanyo+0x1e>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e09e      	b.n	800253c <decodeSanyo+0x15c>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002410:	d20b      	bcs.n	800242a <decodeSanyo+0x4a>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f04f 32ff 	mov.w	r2, #4294967295
 800241e:	605a      	str	r2, [r3, #4]
		results->decode_type = SANYO;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	220b      	movs	r2, #11
 8002424:	701a      	strb	r2, [r3, #0]
		return true;
 8002426:	2301      	movs	r3, #1
 8002428:	e088      	b.n	800253c <decodeSanyo+0x15c>
	}
	offset++;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3301      	adds	r3, #1
 800242e:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f640 51ac 	movw	r1, #3500	; 0xdac
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fe28 	bl	800109c <MATCH_MARK>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <decodeSanyo+0x76>
 8002452:	2300      	movs	r3, #0
 8002454:	e072      	b.n	800253c <decodeSanyo+0x15c>

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1c59      	adds	r1, r3, #1
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f640 51ac 	movw	r1, #3500	; 0xdac
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe15 	bl	800109c <MATCH_MARK>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13f      	bne.n	80024f8 <decodeSanyo+0x118>
 8002478:	2300      	movs	r3, #0
 800247a:	e05f      	b.n	800253c <decodeSanyo+0x15c>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fe5a 	bl	800114c <MATCH_SPACE>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <decodeSanyo+0x128>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fdf3 	bl	800109c <MATCH_MARK>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <decodeSanyo+0xe8>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e014      	b.n	80024f2 <decodeSanyo+0x112>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fdde 	bl	800109c <MATCH_MARK>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <decodeSanyo+0x10e>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e001      	b.n	80024f2 <decodeSanyo+0x112>
		else                                                            return false ;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e024      	b.n	800253c <decodeSanyo+0x15c>
		offset++;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <decodeSanyo+0x164>)
 80024fe:	7852      	ldrb	r2, [r2, #1]
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	4293      	cmp	r3, r2
 8002504:	dbba      	blt.n	800247c <decodeSanyo+0x9c>
 8002506:	e000      	b.n	800250a <decodeSanyo+0x12a>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 8002508:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	0fda      	lsrs	r2, r3, #31
 8002510:	4413      	add	r3, r2
 8002512:	105b      	asrs	r3, r3, #1
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002520:	2b0b      	cmp	r3, #11
 8002522:	dc04      	bgt.n	800252e <decodeSanyo+0x14e>
		results->bits = 0;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	811a      	strh	r2, [r3, #8]
		return false;
 800252a:	2300      	movs	r3, #0
 800252c:	e006      	b.n	800253c <decodeSanyo+0x15c>
	}

	results->value       = data;
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]
	results->decode_type = SANYO;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	220b      	movs	r2, #11
 8002538:	701a      	strb	r2, [r3, #0]
	return true;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000188 	.word	0x20000188

08002548 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8002558:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <decodeSony+0x140>)
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b19      	cmp	r3, #25
 8002560:	d801      	bhi.n	8002566 <decodeSony+0x1e>
 8002562:	2300      	movs	r3, #0
 8002564:	e08b      	b.n	800267e <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002578:	d20b      	bcs.n	8002592 <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f04f 32ff 	mov.w	r2, #4294967295
 8002586:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	220b      	movs	r2, #11
 800258c:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 800258e:	2301      	movs	r3, #1
 8002590:	e075      	b.n	800267e <decodeSony+0x136>
	}
	offset++;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fd74 	bl	800109c <MATCH_MARK>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13f      	bne.n	800263a <decodeSony+0xf2>
 80025ba:	2300      	movs	r3, #0
 80025bc:	e05f      	b.n	800267e <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fdb9 	bl	800114c <MATCH_SPACE>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d034      	beq.n	800264a <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fd52 	bl	800109c <MATCH_MARK>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <decodeSony+0xc2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e014      	b.n	8002634 <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f44f 7116 	mov.w	r1, #600	; 0x258
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd3d 	bl	800109c <MATCH_MARK>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <decodeSony+0xe8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e001      	b.n	8002634 <decodeSony+0xec>
		else                                                           return false ;
 8002630:	2300      	movs	r3, #0
 8002632:	e024      	b.n	800267e <decodeSony+0x136>
		offset++;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3301      	adds	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <decodeSony+0x140>)
 8002640:	7852      	ldrb	r2, [r2, #1]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4293      	cmp	r3, r2
 8002646:	dbba      	blt.n	80025be <decodeSony+0x76>
 8002648:	e000      	b.n	800264c <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800264a:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3b01      	subs	r3, #1
 8002650:	0fda      	lsrs	r2, r3, #31
 8002652:	4413      	add	r3, r2
 8002654:	105b      	asrs	r3, r3, #1
 8002656:	b21a      	sxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002662:	2b0b      	cmp	r3, #11
 8002664:	dc04      	bgt.n	8002670 <decodeSony+0x128>
		results->bits = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	811a      	strh	r2, [r3, #8]
		return false;
 800266c:	2300      	movs	r3, #0
 800266e:	e006      	b.n	800267e <decodeSony+0x136>
	}
	results->value       = data;
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2204      	movs	r2, #4
 800267a:	701a      	strb	r2, [r3, #0]
	return true;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000188 	.word	0x20000188

0800268c <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // skip initial space
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 800269c:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <decodeWhynter+0x188>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b45      	cmp	r3, #69	; 0x45
 80026a4:	d801      	bhi.n	80026aa <decodeWhynter+0x1e>
 80026a6:	2300      	movs	r3, #0
 80026a8:	e0af      	b.n	800280a <decodeWhynter+0x17e>

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f240 21ee 	movw	r1, #750	; 0x2ee
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fceb 	bl	800109c <MATCH_MARK>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <decodeWhynter+0x44>
 80026cc:	2300      	movs	r3, #0
 80026ce:	e09c      	b.n	800280a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	6139      	str	r1, [r7, #16]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fd30 	bl	800114c <MATCH_SPACE>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <decodeWhynter+0x6a>
 80026f2:	2300      	movs	r3, #0
 80026f4:	e089      	b.n	800280a <decodeWhynter+0x17e>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	6139      	str	r1, [r7, #16]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f640 3122 	movw	r1, #2850	; 0xb22
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fcc5 	bl	800109c <MATCH_MARK>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <decodeWhynter+0x90>
 8002718:	2300      	movs	r3, #0
 800271a:	e076      	b.n	800280a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	6139      	str	r1, [r7, #16]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f640 3122 	movw	r1, #2850	; 0xb22
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fd0a 	bl	800114c <MATCH_SPACE>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <decodeWhynter+0xb6>
 800273e:	2300      	movs	r3, #0
 8002740:	e063      	b.n	800280a <decodeWhynter+0x17e>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e042      	b.n	80027ce <decodeWhynter+0x142>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	6139      	str	r1, [r7, #16]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fc9c 	bl	800109c <MATCH_MARK>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <decodeWhynter+0xe2>
 800276a:	2300      	movs	r3, #0
 800276c:	e04d      	b.n	800280a <decodeWhynter+0x17e>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f640 0166 	movw	r1, #2150	; 0x866
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fce3 	bl	800114c <MATCH_SPACE>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <decodeWhynter+0x10c>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e014      	b.n	80027c2 <decodeWhynter+0x136>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f240 21ee 	movw	r1, #750	; 0x2ee
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fcce 	bl	800114c <MATCH_SPACE>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <decodeWhynter+0x132>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e001      	b.n	80027c2 <decodeWhynter+0x136>
		else                                                                return false ;
 80027be:	2300      	movs	r3, #0
 80027c0:	e023      	b.n	800280a <decodeWhynter+0x17e>
		offset++;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	3301      	adds	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b1f      	cmp	r3, #31
 80027d2:	ddb9      	ble.n	8002748 <decodeWhynter+0xbc>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fc58 	bl	800109c <MATCH_MARK>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <decodeWhynter+0x16a>
 80027f2:	2300      	movs	r3, #0
 80027f4:	e009      	b.n	800280a <decodeWhynter+0x17e>

	// Success
	results->bits = WHYNTER_BITS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	811a      	strh	r2, [r3, #8]
	results->value = data;
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]
	results->decode_type = WHYNTER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2208      	movs	r2, #8
 8002806:	701a      	strb	r2, [r3, #0]
	return true;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000188 	.word	0x20000188

08002818 <__io_putchar>:
static void MX_TIM9_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002820:	1d39      	adds	r1, r7, #4
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	2201      	movs	r2, #1
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <__io_putchar+0x20>)
 800282a:	f004 f868 	bl	80068fe <HAL_UART_Transmit>

  return ch;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000f58 	.word	0x20000f58

0800283c <xiaomi_fan_read>:
	HAL_Delay(100);
	MQTTSubscribe(&client, TOPIC_REQUEST_ALERT , QOS0, receive_handler_control);
}


uint32_t xiaomi_fan_read(void){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8002840:	2100      	movs	r1, #0
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <xiaomi_fan_read+0x3c>)
 8002844:	f002 ff9e 	bl	8005784 <HAL_TIM_IC_Start_IT>
	while(!cap_speed_available){
 8002848:	e005      	b.n	8002856 <xiaomi_fan_read+0x1a>
		printf("not yet\r\n");
 800284a:	480c      	ldr	r0, [pc, #48]	; (800287c <xiaomi_fan_read+0x40>)
 800284c:	f004 fff4 	bl	8007838 <puts>
		HAL_Delay(50);
 8002850:	2032      	movs	r0, #50	; 0x32
 8002852:	f001 fd23 	bl	800429c <HAL_Delay>
	while(!cap_speed_available){
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <xiaomi_fan_read+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f5      	beq.n	800284a <xiaomi_fan_read+0xe>
	}
	cap_speed_available = 0;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <xiaomi_fan_read+0x44>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
	printf("capture speed %u\r\n", cap_speed);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <xiaomi_fan_read+0x48>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <xiaomi_fan_read+0x4c>)
 800286c:	f004 ff70 	bl	8007750 <iprintf>
	return cap_speed;
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <xiaomi_fan_read+0x48>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000cd4 	.word	0x20000cd4
 800287c:	08008d70 	.word	0x08008d70
 8002880:	200000ed 	.word	0x200000ed
 8002884:	20000c08 	.word	0x20000c08
 8002888:	08008d7c 	.word	0x08008d7c

0800288c <HAL_UART_RxCpltCallback>:
	MQTTSubscribe(&client, TOPIC_SPEED_HIGH, QOS0, receive_handler);
	printf("finish subcribe\r\n");
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	uint8_t buff[5];
	uint16_t cs, crc;
	int i;
  if(huart->Instance == USART2){
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a78      	ldr	r2, [pc, #480]	; (8002a7c <HAL_UART_RxCpltCallback+0x1f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12c      	bne.n	80028f8 <HAL_UART_RxCpltCallback+0x6c>
	  HAL_UART_Transmit(&huart2, (uint8_t *)&Rx_data[0], 1, 0xFFFF);
 800289e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a2:	2201      	movs	r2, #1
 80028a4:	4976      	ldr	r1, [pc, #472]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028a6:	4877      	ldr	r0, [pc, #476]	; (8002a84 <HAL_UART_RxCpltCallback+0x1f8>)
 80028a8:	f004 f829 	bl	80068fe <HAL_UART_Transmit>
	  if(Rx_data[0] == 'h'){
 80028ac:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b68      	cmp	r3, #104	; 0x68
 80028b2:	d103      	bne.n	80028bc <HAL_UART_RxCpltCallback+0x30>
		  xiaomi_fan_run(HIGH_SPEED);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f7fe fe23 	bl	8001500 <xiaomi_fan_run>
 80028ba:	e018      	b.n	80028ee <HAL_UART_RxCpltCallback+0x62>
	  }else if(Rx_data[0] == 'm'){
 80028bc:	4b70      	ldr	r3, [pc, #448]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b6d      	cmp	r3, #109	; 0x6d
 80028c2:	d103      	bne.n	80028cc <HAL_UART_RxCpltCallback+0x40>
		  xiaomi_fan_run(MED_SPEED);
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fe fe1b 	bl	8001500 <xiaomi_fan_run>
 80028ca:	e010      	b.n	80028ee <HAL_UART_RxCpltCallback+0x62>
	  }else if(Rx_data[0] == 'l'){
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b6c      	cmp	r3, #108	; 0x6c
 80028d2:	d103      	bne.n	80028dc <HAL_UART_RxCpltCallback+0x50>
		  xiaomi_fan_run(LOW_SPEED);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe fe13 	bl	8001500 <xiaomi_fan_run>
 80028da:	e008      	b.n	80028ee <HAL_UART_RxCpltCallback+0x62>
	  }else if(Rx_data[0] == 'r'){
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b72      	cmp	r3, #114	; 0x72
 80028e2:	d104      	bne.n	80028ee <HAL_UART_RxCpltCallback+0x62>
		  cap_speed = xiaomi_fan_read();
 80028e4:	f7ff ffaa 	bl	800283c <xiaomi_fan_read>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_UART_RxCpltCallback+0x1fc>)
 80028ec:	601a      	str	r2, [r3, #0]

	  }
	  HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 80028ee:	2201      	movs	r2, #1
 80028f0:	4963      	ldr	r1, [pc, #396]	; (8002a80 <HAL_UART_RxCpltCallback+0x1f4>)
 80028f2:	4864      	ldr	r0, [pc, #400]	; (8002a84 <HAL_UART_RxCpltCallback+0x1f8>)
 80028f4:	f004 f89c 	bl	8006a30 <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART6){
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_UART_RxCpltCallback+0x200>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	f040 80b7 	bne.w	8002a72 <HAL_UART_RxCpltCallback+0x1e6>
	  HAL_UART_Transmit(&huart2, rx_u6, 1, 0xFFFF);
 8002904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002908:	2201      	movs	r2, #1
 800290a:	4961      	ldr	r1, [pc, #388]	; (8002a90 <HAL_UART_RxCpltCallback+0x204>)
 800290c:	485d      	ldr	r0, [pc, #372]	; (8002a84 <HAL_UART_RxCpltCallback+0x1f8>)
 800290e:	f003 fff6 	bl	80068fe <HAL_UART_Transmit>
  		if(getNext){
 8002912:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <HAL_UART_RxCpltCallback+0x208>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8090 	beq.w	8002a3c <HAL_UART_RxCpltCallback+0x1b0>
  			rxBuffer[index_p++] = rx_u6[0];
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	b2d1      	uxtb	r1, r2
 8002924:	4a5c      	ldr	r2, [pc, #368]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002926:	7011      	strb	r1, [r2, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_UART_RxCpltCallback+0x204>)
 800292c:	7819      	ldrb	r1, [r3, #0]
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002930:	5499      	strb	r1, [r3, r2]
  			if(rxBuffer[1] != 'M'){
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	2b4d      	cmp	r3, #77	; 0x4d
 8002938:	d00a      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xc4>
  				getNext = 0;
 800293a:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <HAL_UART_RxCpltCallback+0x208>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  				index_p = 0;
 8002940:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
  				memset(rxBuffer, 0, sizeof(rxBuffer));
 8002946:	2220      	movs	r2, #32
 8002948:	2100      	movs	r1, #0
 800294a:	4854      	ldr	r0, [pc, #336]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 800294c:	f004 fef7 	bl	800773e <memset>
  			}
			if(index_p == 32){
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b20      	cmp	r3, #32
 8002956:	d171      	bne.n	8002a3c <HAL_UART_RxCpltCallback+0x1b0>
				crc = (rxBuffer[30] << 8)| rxBuffer[31];
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 800295a:	7f9b      	ldrb	r3, [r3, #30]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	b21a      	sxth	r2, r3
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002962:	7fdb      	ldrb	r3, [r3, #31]
 8002964:	b21b      	sxth	r3, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	b21b      	sxth	r3, r3
 800296a:	81fb      	strh	r3, [r7, #14]
				for(i = 0; i < 30; i++){
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e00a      	b.n	8002988 <HAL_UART_RxCpltCallback+0xfc>
					cs += rxBuffer[i];
 8002972:	4a4a      	ldr	r2, [pc, #296]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b29a      	uxth	r2, r3
 800297c:	8afb      	ldrh	r3, [r7, #22]
 800297e:	4413      	add	r3, r2
 8002980:	82fb      	strh	r3, [r7, #22]
				for(i = 0; i < 30; i++){
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3301      	adds	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b1d      	cmp	r3, #29
 800298c:	ddf1      	ble.n	8002972 <HAL_UART_RxCpltCallback+0xe6>
				}
				//Check checksum
				if(cs == crc){
 800298e:	8afa      	ldrh	r2, [r7, #22]
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	429a      	cmp	r2, r3
 8002994:	d147      	bne.n	8002a26 <HAL_UART_RxCpltCallback+0x19a>
					amphenol1.PM1_Standard = rxBuffer[4]*256 + rxBuffer[5];
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	b29b      	uxth	r3, r3
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029a2:	795b      	ldrb	r3, [r3, #5]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 80029ac:	801a      	strh	r2, [r3, #0]
					amphenol1.PM2p5_Standard = rxBuffer[6]*256 + rxBuffer[7];
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029b0:	799b      	ldrb	r3, [r3, #6]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029ba:	79db      	ldrb	r3, [r3, #7]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4413      	add	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 80029c4:	805a      	strh	r2, [r3, #2]
					amphenol1.PM10_Standard = rxBuffer[8]*256 + rxBuffer[9];
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029c8:	7a1b      	ldrb	r3, [r3, #8]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029d2:	7a5b      	ldrb	r3, [r3, #9]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 80029dc:	809a      	strh	r2, [r3, #4]

					amphenol1.PM1_Environment = rxBuffer[10]*256 + rxBuffer[11];
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029e0:	7a9b      	ldrb	r3, [r3, #10]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029ea:	7adb      	ldrb	r3, [r3, #11]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 80029f4:	80da      	strh	r2, [r3, #6]
					amphenol1.PM2p5_Environment = rxBuffer[12]*256 + rxBuffer[13];
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 80029f8:	7b1b      	ldrb	r3, [r3, #12]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002a02:	7b5b      	ldrb	r3, [r3, #13]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 8002a0c:	811a      	strh	r2, [r3, #8]
					amphenol1.PM10_Environment = rxBuffer[14]*256 + rxBuffer[15];
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002a10:	7b9b      	ldrb	r3, [r3, #14]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002a1a:	7bdb      	ldrb	r3, [r3, #15]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_UART_RxCpltCallback+0x214>)
 8002a24:	815a      	strh	r2, [r3, #10]
				}

				memset(rxBuffer, 0, sizeof(rxBuffer));
 8002a26:	2220      	movs	r2, #32
 8002a28:	2100      	movs	r1, #0
 8002a2a:	481c      	ldr	r0, [pc, #112]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002a2c:	f004 fe87 	bl	800773e <memset>
				getNext = 0;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_RxCpltCallback+0x208>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
				index_p = 0;
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
			}
  		}
  		if(!getNext && (rx_u6[0]=='B')){
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_RxCpltCallback+0x208>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_UART_RxCpltCallback+0x1dc>
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_UART_RxCpltCallback+0x204>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b42      	cmp	r3, #66	; 0x42
 8002a4a:	d10d      	bne.n	8002a68 <HAL_UART_RxCpltCallback+0x1dc>
			rxBuffer[index_p++] = rx_u6[0];
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	b2d1      	uxtb	r1, r2
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_UART_RxCpltCallback+0x20c>)
 8002a56:	7011      	strb	r1, [r2, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_UART_RxCpltCallback+0x204>)
 8002a5c:	7819      	ldrb	r1, [r3, #0]
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_UART_RxCpltCallback+0x210>)
 8002a60:	5499      	strb	r1, [r3, r2]
			getNext = 1;
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_UART_RxCpltCallback+0x208>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
		}
  		HAL_UART_Receive_IT(&huart6, rx_u6, 1);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4909      	ldr	r1, [pc, #36]	; (8002a90 <HAL_UART_RxCpltCallback+0x204>)
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <HAL_UART_RxCpltCallback+0x218>)
 8002a6e:	f003 ffdf 	bl	8006a30 <HAL_UART_Receive_IT>
  	}
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	20000ccc 	.word	0x20000ccc
 8002a84:	20000f58 	.word	0x20000f58
 8002a88:	20000c08 	.word	0x20000c08
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	200011d0 	.word	0x200011d0
 8002a94:	200000ef 	.word	0x200000ef
 8002a98:	200000ee 	.word	0x200000ee
 8002a9c:	200000f0 	.word	0x200000f0
 8002aa0:	20000dac 	.word	0x20000dac
 8002aa4:	20000e98 	.word	0x20000e98

08002aa8 <Receive_IR>:
		  setIONState(ST_OFF);
		  flagIon = 0;
	  }
}

void Receive_IR(void){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af02      	add	r7, sp, #8


		if(my_decode(&results)) {
 8002aae:	4817      	ldr	r0, [pc, #92]	; (8002b0c <Receive_IR+0x64>)
 8002ab0:	f7fe fba4 	bl	80011fc <my_decode>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <Receive_IR+0x5c>
			snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <Receive_IR+0x64>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <Receive_IR+0x64>)
 8002ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <Receive_IR+0x68>)
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <Receive_IR+0x64>)
 8002ad0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002ad4:	9201      	str	r2, [sp, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <Receive_IR+0x6c>)
 8002adc:	2160      	movs	r1, #96	; 0x60
 8002ade:	480e      	ldr	r0, [pc, #56]	; (8002b18 <Receive_IR+0x70>)
 8002ae0:	f004 feb2 	bl	8007848 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)&trans_str, sizeof(trans_str), 100);
 8002ae4:	2364      	movs	r3, #100	; 0x64
 8002ae6:	2260      	movs	r2, #96	; 0x60
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <Receive_IR+0x70>)
 8002aea:	480c      	ldr	r0, [pc, #48]	; (8002b1c <Receive_IR+0x74>)
 8002aec:	f003 ff07 	bl	80068fe <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002af0:	2120      	movs	r1, #32
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <Receive_IR+0x78>)
 8002af4:	f001 ff0b 	bl	800490e <HAL_GPIO_TogglePin>
				if (ion_state == 2){
					ion_state = 0;
				}
			}*/
			//Control_IR();
			HAL_Delay(300);
 8002af8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002afc:	f001 fbce 	bl	800429c <HAL_Delay>

			my_resume();
 8002b00:	f7fe fc5e 	bl	80013c0 <my_resume>
		}

}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000390 	.word	0x20000390
 8002b10:	20000004 	.word	0x20000004
 8002b14:	0800929c 	.word	0x0800929c
 8002b18:	20000110 	.word	0x20000110
 8002b1c:	20000f58 	.word	0x20000f58
 8002b20:	40020000 	.word	0x40020000

08002b24 <Check_button>:

void Check_button(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	if (power == ST_OFF && flagPBT == 1){
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <Check_button+0x134>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <Check_button+0x28>
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <Check_button+0x138>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d109      	bne.n	8002b4c <Check_button+0x28>
		flagPBT = 0;
 8002b38:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <Check_button+0x138>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
		fan_speed = MED_SPEED;
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <Check_button+0x13c>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
		xiaomi_fan_run(MED_SPEED);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fe fcdb 	bl	8001500 <xiaomi_fan_run>
 8002b4a:	e00f      	b.n	8002b6c <Check_button+0x48>

	}
	else if (power == ST_ON && flagPBT == 1){
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <Check_button+0x134>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10b      	bne.n	8002b6c <Check_button+0x48>
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <Check_button+0x138>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <Check_button+0x48>
		flagPBT = 0;
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <Check_button+0x138>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
		fan_speed = STOP_SPEED;
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <Check_button+0x13c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
		xiaomi_fan_stop();
 8002b68:	f7fe fd02 	bl	8001570 <xiaomi_fan_stop>

	}
	 if (fan_speed == LOW_SPEED && flagSBT == 1 && power == ST_ON){
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <Check_button+0x13c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10e      	bne.n	8002b92 <Check_button+0x6e>
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <Check_button+0x140>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10a      	bne.n	8002b92 <Check_button+0x6e>
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <Check_button+0x134>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <Check_button+0x6e>

		  xiaomi_fan_run(LOW_SPEED);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7fe fcbb 	bl	8001500 <xiaomi_fan_run>
		  flagSBT = 0;
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <Check_button+0x140>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e024      	b.n	8002bdc <Check_button+0xb8>
	  }
	  else if (fan_speed == MED_SPEED && flagSBT == 1 && power == ST_ON){
 8002b92:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <Check_button+0x13c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d10e      	bne.n	8002bb8 <Check_button+0x94>
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <Check_button+0x140>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10a      	bne.n	8002bb8 <Check_button+0x94>
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <Check_button+0x134>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d106      	bne.n	8002bb8 <Check_button+0x94>

		  xiaomi_fan_run(MED_SPEED);
 8002baa:	2002      	movs	r0, #2
 8002bac:	f7fe fca8 	bl	8001500 <xiaomi_fan_run>
		  flagSBT = 0;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <Check_button+0x140>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e011      	b.n	8002bdc <Check_button+0xb8>
	  }
	  else if (fan_speed == HIGH_SPEED && flagSBT == 1 && power == ST_ON){
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <Check_button+0x13c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d10d      	bne.n	8002bdc <Check_button+0xb8>
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <Check_button+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d109      	bne.n	8002bdc <Check_button+0xb8>
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <Check_button+0x134>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <Check_button+0xb8>

		  xiaomi_fan_run(HIGH_SPEED);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f7fe fc95 	bl	8001500 <xiaomi_fan_run>
		  flagSBT = 0;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <Check_button+0x140>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
	  }
	  if (sys_mode == FRESH_MODE && flagMBT == 1 && power == ST_ON){
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <Check_button+0x144>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d10e      	bne.n	8002c02 <Check_button+0xde>
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <Check_button+0x148>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10a      	bne.n	8002c02 <Check_button+0xde>
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <Check_button+0x134>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <Check_button+0xde>
		  vanst = DAMPER_OUT;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <Check_button+0x14c>)
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	701a      	strb	r2, [r3, #0]
		  flagMBT = 0;
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <Check_button+0x148>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e028      	b.n	8002c54 <Check_button+0x130>
	  }
	  else if (sys_mode == INDOOR_MODE && flagMode == 1 && power == ST_ON){
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <Check_button+0x144>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d10e      	bne.n	8002c28 <Check_button+0x104>
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <Check_button+0x150>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10a      	bne.n	8002c28 <Check_button+0x104>
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <Check_button+0x134>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d106      	bne.n	8002c28 <Check_button+0x104>
		  vanst = DAMPER_IN;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <Check_button+0x14c>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
		  flagMBT = 0;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <Check_button+0x148>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e015      	b.n	8002c54 <Check_button+0x130>
	  }
	  else if (sys_mode == NIGHT_MODE && flagMode == 1 && power == ST_ON){
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <Check_button+0x144>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d111      	bne.n	8002c54 <Check_button+0x130>
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <Check_button+0x150>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10d      	bne.n	8002c54 <Check_button+0x130>
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <Check_button+0x134>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d109      	bne.n	8002c54 <Check_button+0x130>
		   fan_speed = LOW_SPEED;
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <Check_button+0x13c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
		    xiaomi_fan_run(LOW_SPEED);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7fe fc5a 	bl	8001500 <xiaomi_fan_run>
			flagMBT = 0;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <Check_button+0x148>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
	  }




}
 8002c52:	e7ff      	b.n	8002c54 <Check_button+0x130>
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200000e4 	.word	0x200000e4
 8002c5c:	20000e94 	.word	0x20000e94
 8002c60:	200000e5 	.word	0x200000e5
 8002c64:	20000cd0 	.word	0x20000cd0
 8002c68:	200000eb 	.word	0x200000eb
 8002c6c:	20000f98 	.word	0x20000f98
 8002c70:	200000ec 	.word	0x200000ec
 8002c74:	20000cc8 	.word	0x20000cc8

08002c78 <Check_long_button>:

void Check_long_button(void){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

	if (!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)){
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	481f      	ldr	r0, [pc, #124]	; (8002cfc <Check_long_button+0x84>)
 8002c80:	f001 fe14 	bl	80048ac <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <Check_long_button+0x1e>
		future = HAL_GetTick();
 8002c8a:	f001 fafb 	bl	8004284 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <Check_long_button+0x88>)
 8002c92:	601a      	str	r2, [r3, #0]
			power = ST_ON;
			flagPBT = 1;
			printf("turn on power \r\n");
		}
	}
}
 8002c94:	e02f      	b.n	8002cf6 <Check_long_button+0x7e>
		nowb = HAL_GetTick();
 8002c96:	f001 faf5 	bl	8004284 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <Check_long_button+0x8c>)
 8002c9e:	601a      	str	r2, [r3, #0]
		if (nowb > (future + 4000) && power == ST_ON){
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <Check_long_button+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <Check_long_button+0x8c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d20d      	bcs.n	8002ccc <Check_long_button+0x54>
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <Check_long_button+0x90>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d109      	bne.n	8002ccc <Check_long_button+0x54>
			power = ST_OFF;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <Check_long_button+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
			flagPBT = 1;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <Check_long_button+0x94>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
			printf("turn off power \r\n");
 8002cc4:	4812      	ldr	r0, [pc, #72]	; (8002d10 <Check_long_button+0x98>)
 8002cc6:	f004 fdb7 	bl	8007838 <puts>
}
 8002cca:	e014      	b.n	8002cf6 <Check_long_button+0x7e>
		else if (nowb > (future + 4000) && power == ST_OFF){
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <Check_long_button+0x88>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <Check_long_button+0x8c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d20c      	bcs.n	8002cf6 <Check_long_button+0x7e>
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <Check_long_button+0x90>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d108      	bne.n	8002cf6 <Check_long_button+0x7e>
			power = ST_ON;
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <Check_long_button+0x90>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
			flagPBT = 1;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <Check_long_button+0x94>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
			printf("turn on power \r\n");
 8002cf0:	4808      	ldr	r0, [pc, #32]	; (8002d14 <Check_long_button+0x9c>)
 8002cf2:	f004 fda1 	bl	8007838 <puts>
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	20000f50 	.word	0x20000f50
 8002d04:	200003a8 	.word	0x200003a8
 8002d08:	200000e4 	.word	0x200000e4
 8002d0c:	20000e94 	.word	0x20000e94
 8002d10:	080092bc 	.word	0x080092bc
 8002d14:	080092d0 	.word	0x080092d0

08002d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d20:	f001 fa4a 	bl	80041b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d24:	f000 f922 	bl	8002f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d28:	f000 fc8e 	bl	8003648 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d2c:	f000 fc38 	bl	80035a0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002d30:	f000 f986 	bl	8003040 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002d34:	f000 f9b2 	bl	800309c <MX_SPI2_Init>
  MX_SPI3_Init();
 8002d38:	f000 f9e6 	bl	8003108 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002d3c:	f000 fa1a 	bl	8003174 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d40:	f000 fab8 	bl	80032b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d44:	f000 fb2a 	bl	800339c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002d48:	f000 fb76 	bl	8003438 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002d4c:	f000 fbc6 	bl	80034dc <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8002d50:	f000 fbfc 	bl	800354c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002d54:	f000 fc4e 	bl	80035f4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8002d58:	2064      	movs	r0, #100	; 0x64
 8002d5a:	f001 fa9f 	bl	800429c <HAL_Delay>
  printf("start\r\n");
 8002d5e:	4824      	ldr	r0, [pc, #144]	; (8002df0 <main+0xd8>)
 8002d60:	f004 fd6a 	bl	8007838 <puts>
  night_mode = ST_OFF;
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <main+0xdc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
  fan_speed = LOW_SPEED;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <main+0xe0>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
  power = ST_ON;
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <main+0xe4>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
  control_mode = AUTOMATIC;
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <main+0xe8>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
  filter_mode = INDOOR;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <main+0xec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  uv_state = ST_ON;
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <main+0xf0>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
  ion_state = ST_OFF;
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <main+0xf4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
  vanst = DAMPER_IN;
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <main+0xf8>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]

  // For new app
  sys_mode = AUTO_MODE;
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <main+0xfc>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]

  xiaomi_fan_run(LOW_SPEED);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7fe fbb0 	bl	8001500 <xiaomi_fan_run>
  /* Init MQTT */
  //init_MQTT();
  //subcribesMQTT();
  //1init_MQTT_New();
 //1 Subcribes_MQTT_New();
  my_enableIRIn(); // active IR
 8002da0:	f7fe fac2 	bl	8001328 <my_enableIRIn>

  /* Init SVM */
  //1i2c_init_sensirion(&hi2c2);
  now = HAL_GetTick();
 8002da4:	f001 fa6e 	bl	8004284 <HAL_GetTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	e9c7 3406 	strd	r3, r4, [r7, #24]
  end = now + TIMEOUT_SVM;
 8002db2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002db6:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	eb13 0b01 	adds.w	fp, r3, r1
 8002dc2:	eb44 0c02 	adc.w	ip, r4, r2
 8002dc6:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  err = sgp30_iaq_init();*/

  /* Init SM UART 04L */
  //initSMUARTPort(&huart6);
  //1setSMOutputMode(ASK_ANSWER); // Set SM to ask-answer mode
  HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4912      	ldr	r1, [pc, #72]	; (8002e18 <main+0x100>)
 8002dce:	4813      	ldr	r0, [pc, #76]	; (8002e1c <main+0x104>)
 8002dd0:	f003 fe2e 	bl	8006a30 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("nhan button \r\n");
 8002dd4:	4812      	ldr	r0, [pc, #72]	; (8002e20 <main+0x108>)
 8002dd6:	f004 fd2f 	bl	8007838 <puts>
	  Check_long_button();
 8002dda:	f7ff ff4d 	bl	8002c78 <Check_long_button>
	  HAL_Delay(1000);
 8002dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de2:	f001 fa5b 	bl	800429c <HAL_Delay>
	  Check_button();
 8002de6:	f7ff fe9d 	bl	8002b24 <Check_button>
	  Receive_IR();
 8002dea:	f7ff fe5d 	bl	8002aa8 <Receive_IR>
	  printf("nhan button \r\n");
 8002dee:	e7f1      	b.n	8002dd4 <main+0xbc>
 8002df0:	080092e0 	.word	0x080092e0
 8002df4:	200000e6 	.word	0x200000e6
 8002df8:	200000e5 	.word	0x200000e5
 8002dfc:	200000e4 	.word	0x200000e4
 8002e00:	200000e8 	.word	0x200000e8
 8002e04:	200000e7 	.word	0x200000e7
 8002e08:	200000e9 	.word	0x200000e9
 8002e0c:	200000ea 	.word	0x200000ea
 8002e10:	200000ec 	.word	0x200000ec
 8002e14:	200000eb 	.word	0x200000eb
 8002e18:	20000ccc 	.word	0x20000ccc
 8002e1c:	20000f58 	.word	0x20000f58
 8002e20:	080092e8 	.word	0x080092e8

08002e24 <HAL_GPIO_EXTI_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==GPIO_PIN_6 && state1 == 1){
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d109      	bne.n	8002e48 <HAL_GPIO_EXTI_Callback+0x24>
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_GPIO_EXTI_Callback+0x24>

		state1 = 0;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <HAL_GPIO_EXTI_Callback+0x50>)
 8002e44:	f002 fbef 	bl	8005626 <HAL_TIM_Base_Start_IT>
	}

	if(GPIO_Pin==GPIO_PIN_7 && state2 == 1){
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d10c      	bne.n	8002e68 <HAL_GPIO_EXTI_Callback+0x44>
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_GPIO_EXTI_Callback+0x54>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d108      	bne.n	8002e68 <HAL_GPIO_EXTI_Callback+0x44>

		button2 = 1;
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_GPIO_EXTI_Callback+0x58>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
		state2 = 0;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_GPIO_EXTI_Callback+0x54>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8002e62:	4804      	ldr	r0, [pc, #16]	; (8002e74 <HAL_GPIO_EXTI_Callback+0x50>)
 8002e64:	f002 fbdf 	bl	8005626 <HAL_TIM_Base_Start_IT>
	}

}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	2000004c 	.word	0x2000004c
 8002e74:	20000d14 	.word	0x20000d14
 8002e78:	20000050 	.word	0x20000050
 8002e7c:	20000e10 	.word	0x20000e10

08002e80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

	user_TIM_PeriodElapsedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd fff7 	bl	8000e7c <user_TIM_PeriodElapsedCallback>
	if(htim->Instance == TIM3){
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d14a      	bne.n	8002f2e <HAL_TIM_PeriodElapsedCallback+0xae>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6) == GPIO_PIN_SET){
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	4828      	ldr	r0, [pc, #160]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e9c:	f001 fd06 	bl	80048ac <HAL_GPIO_ReadPin>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_TIM_PeriodElapsedCallback+0x60>
			//if (power == ST_ON ){
			fan_speed++;
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002eb0:	701a      	strb	r2, [r3, #0]
			flagSBT = 1;
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
			printf("nhan button PB6 \r\n");
 8002eb8:	4823      	ldr	r0, [pc, #140]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002eba:	f004 fcbd 	bl	8007838 <puts>
			if (fan_speed == 4){
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d102      	bne.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x4c>
				fan_speed = 1;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
			}
			state1 = 1;
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	481e      	ldr	r0, [pc, #120]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ed6:	f001 fd1a 	bl	800490e <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002eda:	481e      	ldr	r0, [pc, #120]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002edc:	f002 fbc7 	bl	800566e <HAL_TIM_Base_Stop_IT>

			//}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7) == GPIO_PIN_SET){
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	4816      	ldr	r0, [pc, #88]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002ee4:	f001 fce2 	bl	80048ac <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11f      	bne.n	8002f2e <HAL_TIM_PeriodElapsedCallback+0xae>
		//if (power == ST_ON && button2 == 1){
			sys_mode++;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ef8:	701a      	strb	r2, [r3, #0]
			printf("nhan button PB7 \r\n");
 8002efa:	4818      	ldr	r0, [pc, #96]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002efc:	f004 fc9c 	bl	8007838 <puts>
			flagMBT = 1;
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
			if (sys_mode == 5){
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d102      	bne.n	8002f14 <HAL_TIM_PeriodElapsedCallback+0x94>
				sys_mode = 1;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
			}
			state2 = 1;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
			button2 =0;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002f20:	2120      	movs	r1, #32
 8002f22:	480b      	ldr	r0, [pc, #44]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f24:	f001 fcf3 	bl	800490e <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002f28:	480a      	ldr	r0, [pc, #40]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002f2a:	f002 fba0 	bl	800566e <HAL_TIM_Base_Stop_IT>
		//}
		}

	}

}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	200000e5 	.word	0x200000e5
 8002f44:	20000cd0 	.word	0x20000cd0
 8002f48:	080092f8 	.word	0x080092f8
 8002f4c:	2000004c 	.word	0x2000004c
 8002f50:	40020000 	.word	0x40020000
 8002f54:	20000d14 	.word	0x20000d14
 8002f58:	200000eb 	.word	0x200000eb
 8002f5c:	0800930c 	.word	0x0800930c
 8002f60:	20000f98 	.word	0x20000f98
 8002f64:	20000050 	.word	0x20000050
 8002f68:	20000e10 	.word	0x20000e10

08002f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b094      	sub	sp, #80	; 0x50
 8002f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	f107 0320 	add.w	r3, r7, #32
 8002f76:	2230      	movs	r2, #48	; 0x30
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fbdf 	bl	800773e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <SystemClock_Config+0xcc>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <SystemClock_Config+0xcc>)
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <SystemClock_Config+0xcc>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fac:	2300      	movs	r3, #0
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <SystemClock_Config+0xd0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <SystemClock_Config+0xd0>)
 8002fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <SystemClock_Config+0xd0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002fdc:	2310      	movs	r3, #16
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002fe0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fea:	2304      	movs	r3, #4
 8002fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fdf6 	bl	8004be4 <HAL_RCC_OscConfig>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002ffe:	f000 fbe5 	bl	80037cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003002:	230f      	movs	r3, #15
 8003004:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003006:	2302      	movs	r3, #2
 8003008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800300e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8003014:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003018:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800301a:	f107 030c 	add.w	r3, r7, #12
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f002 f84f 	bl	80050c4 <HAL_RCC_ClockConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800302c:	f000 fbce 	bl	80037cc <Error_Handler>
  }
}
 8003030:	bf00      	nop
 8003032:	3750      	adds	r7, #80	; 0x50
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000

08003040 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_I2C2_Init+0x50>)
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <MX_I2C2_Init+0x54>)
 8003048:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_I2C2_Init+0x50>)
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <MX_I2C2_Init+0x58>)
 800304e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_I2C2_Init+0x50>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <MX_I2C2_Init+0x50>)
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_I2C2_Init+0x50>)
 800305e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003062:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <MX_I2C2_Init+0x50>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_I2C2_Init+0x50>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <MX_I2C2_Init+0x50>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <MX_I2C2_Init+0x50>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_I2C2_Init+0x50>)
 800307e:	f001 fc79 	bl	8004974 <HAL_I2C_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003088:	f000 fba0 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000c70 	.word	0x20000c70
 8003094:	40005800 	.word	0x40005800
 8003098:	000186a0 	.word	0x000186a0

0800309c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <MX_SPI2_Init+0x64>)
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <MX_SPI2_Init+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_SPI2_Init+0x64>)
 80030a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <MX_SPI2_Init+0x64>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <MX_SPI2_Init+0x64>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_SPI2_Init+0x64>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_SPI2_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_SPI2_Init+0x64>)
 80030c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_SPI2_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_SPI2_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_SPI2_Init+0x64>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <MX_SPI2_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_SPI2_Init+0x64>)
 80030e8:	220a      	movs	r2, #10
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_SPI2_Init+0x64>)
 80030ee:	f002 f9db 	bl	80054a8 <HAL_SPI_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80030f8:	f000 fb68 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000bac 	.word	0x20000bac
 8003104:	40003800 	.word	0x40003800

08003108 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <MX_SPI3_Init+0x64>)
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <MX_SPI3_Init+0x68>)
 8003110:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <MX_SPI3_Init+0x64>)
 8003114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003118:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <MX_SPI3_Init+0x64>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <MX_SPI3_Init+0x64>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_SPI3_Init+0x64>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <MX_SPI3_Init+0x64>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_SPI3_Init+0x64>)
 8003134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003138:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <MX_SPI3_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <MX_SPI3_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <MX_SPI3_Init+0x64>)
 8003148:	2200      	movs	r2, #0
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <MX_SPI3_Init+0x64>)
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <MX_SPI3_Init+0x64>)
 8003154:	220a      	movs	r2, #10
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003158:	4804      	ldr	r0, [pc, #16]	; (800316c <MX_SPI3_Init+0x64>)
 800315a:	f002 f9a5 	bl	80054a8 <HAL_SPI_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003164:	f000 fb32 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000d54 	.word	0x20000d54
 8003170:	40003c00 	.word	0x40003c00

08003174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b096      	sub	sp, #88	; 0x58
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800317a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	615a      	str	r2, [r3, #20]
 80031a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2220      	movs	r2, #32
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fac6 	bl	800773e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <MX_TIM1_Init+0x138>)
 80031b4:	4a3e      	ldr	r2, [pc, #248]	; (80032b0 <MX_TIM1_Init+0x13c>)
 80031b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <MX_TIM1_Init+0x138>)
 80031ba:	2214      	movs	r2, #20
 80031bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <MX_TIM1_Init+0x138>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <MX_TIM1_Init+0x138>)
 80031c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80031ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	4b37      	ldr	r3, [pc, #220]	; (80032ac <MX_TIM1_Init+0x138>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <MX_TIM1_Init+0x138>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <MX_TIM1_Init+0x138>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031de:	4833      	ldr	r0, [pc, #204]	; (80032ac <MX_TIM1_Init+0x138>)
 80031e0:	f002 f9c6 	bl	8005570 <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80031ea:	f000 faef 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031f8:	4619      	mov	r1, r3
 80031fa:	482c      	ldr	r0, [pc, #176]	; (80032ac <MX_TIM1_Init+0x138>)
 80031fc:	f002 fd94 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003206:	f000 fae1 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800320a:	4828      	ldr	r0, [pc, #160]	; (80032ac <MX_TIM1_Init+0x138>)
 800320c:	f002 fa5a 	bl	80056c4 <HAL_TIM_PWM_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003216:	f000 fad9 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003226:	4619      	mov	r1, r3
 8003228:	4820      	ldr	r0, [pc, #128]	; (80032ac <MX_TIM1_Init+0x138>)
 800322a:	f003 fa47 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003234:	f000 faca 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003238:	2360      	movs	r3, #96	; 0x60
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003244:	2300      	movs	r3, #0
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003258:	2200      	movs	r2, #0
 800325a:	4619      	mov	r1, r3
 800325c:	4813      	ldr	r0, [pc, #76]	; (80032ac <MX_TIM1_Init+0x138>)
 800325e:	f002 fc9d 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003268:	f000 fab0 	bl	80037cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4807      	ldr	r0, [pc, #28]	; (80032ac <MX_TIM1_Init+0x138>)
 8003290:	f003 fa82 	bl	8006798 <HAL_TIMEx_ConfigBreakDeadTime>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800329a:	f000 fa97 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800329e:	4803      	ldr	r0, [pc, #12]	; (80032ac <MX_TIM1_Init+0x138>)
 80032a0:	f000 fcaa 	bl	8003bf8 <HAL_TIM_MspPostInit>

}
 80032a4:	bf00      	nop
 80032a6:	3758      	adds	r7, #88	; 0x58
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000e14 	.word	0x20000e14
 80032b0:	40010000 	.word	0x40010000

080032b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08e      	sub	sp, #56	; 0x38
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c8:	f107 0320 	add.w	r3, r7, #32
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
 80032e0:	615a      	str	r2, [r3, #20]
 80032e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e4:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <MX_TIM2_Init+0xe4>)
 80032e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <MX_TIM2_Init+0xe4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <MX_TIM2_Init+0xe4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <MX_TIM2_Init+0xe4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <MX_TIM2_Init+0xe4>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <MX_TIM2_Init+0xe4>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800330a:	4823      	ldr	r0, [pc, #140]	; (8003398 <MX_TIM2_Init+0xe4>)
 800330c:	f002 f930 	bl	8005570 <HAL_TIM_Base_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003316:	f000 fa59 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800331a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003324:	4619      	mov	r1, r3
 8003326:	481c      	ldr	r0, [pc, #112]	; (8003398 <MX_TIM2_Init+0xe4>)
 8003328:	f002 fcfe 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003332:	f000 fa4b 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003336:	4818      	ldr	r0, [pc, #96]	; (8003398 <MX_TIM2_Init+0xe4>)
 8003338:	f002 f9c4 	bl	80056c4 <HAL_TIM_PWM_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003342:	f000 fa43 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800334e:	f107 0320 	add.w	r3, r7, #32
 8003352:	4619      	mov	r1, r3
 8003354:	4810      	ldr	r0, [pc, #64]	; (8003398 <MX_TIM2_Init+0xe4>)
 8003356:	f003 f9b1 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003360:	f000 fa34 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003364:	2360      	movs	r3, #96	; 0x60
 8003366:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	2204      	movs	r2, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4807      	ldr	r0, [pc, #28]	; (8003398 <MX_TIM2_Init+0xe4>)
 800337c:	f002 fc0e 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003386:	f000 fa21 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800338a:	4803      	ldr	r0, [pc, #12]	; (8003398 <MX_TIM2_Init+0xe4>)
 800338c:	f000 fc34 	bl	8003bf8 <HAL_TIM_MspPostInit>

}
 8003390:	bf00      	nop
 8003392:	3738      	adds	r7, #56	; 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000f10 	.word	0x20000f10

0800339c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b0:	463b      	mov	r3, r7
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <MX_TIM3_Init+0x94>)
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <MX_TIM3_Init+0x98>)
 80033bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21000;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <MX_TIM3_Init+0x94>)
 80033c0:	f245 2208 	movw	r2, #21000	; 0x5208
 80033c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <MX_TIM3_Init+0x94>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <MX_TIM3_Init+0x94>)
 80033ce:	2232      	movs	r2, #50	; 0x32
 80033d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <MX_TIM3_Init+0x94>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <MX_TIM3_Init+0x94>)
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033de:	4814      	ldr	r0, [pc, #80]	; (8003430 <MX_TIM3_Init+0x94>)
 80033e0:	f002 f8c6 	bl	8005570 <HAL_TIM_Base_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80033ea:	f000 f9ef 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	4619      	mov	r1, r3
 80033fa:	480d      	ldr	r0, [pc, #52]	; (8003430 <MX_TIM3_Init+0x94>)
 80033fc:	f002 fc94 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003406:	f000 f9e1 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003412:	463b      	mov	r3, r7
 8003414:	4619      	mov	r1, r3
 8003416:	4806      	ldr	r0, [pc, #24]	; (8003430 <MX_TIM3_Init+0x94>)
 8003418:	f003 f950 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003422:	f000 f9d3 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000d14 	.word	0x20000d14
 8003434:	40000400 	.word	0x40000400

08003438 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003448:	463b      	mov	r3, r7
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <MX_TIM5_Init+0x9c>)
 8003456:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <MX_TIM5_Init+0xa0>)
 8003458:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <MX_TIM5_Init+0x9c>)
 800345c:	2200      	movs	r2, #0
 800345e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003460:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <MX_TIM5_Init+0x9c>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <MX_TIM5_Init+0x9c>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <MX_TIM5_Init+0x9c>)
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003472:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <MX_TIM5_Init+0x9c>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003478:	4816      	ldr	r0, [pc, #88]	; (80034d4 <MX_TIM5_Init+0x9c>)
 800347a:	f002 f958 	bl	800572e <HAL_TIM_IC_Init>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003484:	f000 f9a2 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003490:	f107 0310 	add.w	r3, r7, #16
 8003494:	4619      	mov	r1, r3
 8003496:	480f      	ldr	r0, [pc, #60]	; (80034d4 <MX_TIM5_Init+0x9c>)
 8003498:	f003 f910 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80034a2:	f000 f993 	bl	80037cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034aa:	2301      	movs	r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034b6:	463b      	mov	r3, r7
 80034b8:	2200      	movs	r2, #0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_TIM5_Init+0x9c>)
 80034be:	f002 fad1 	bl	8005a64 <HAL_TIM_IC_ConfigChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80034c8:	f000 f980 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000cd4 	.word	0x20000cd4
 80034d8:	40000c00 	.word	0x40000c00

080034dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034e2:	463b      	mov	r3, r7
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <MX_TIM9_Init+0x68>)
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <MX_TIM9_Init+0x6c>)
 80034f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <MX_TIM9_Init+0x68>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <MX_TIM9_Init+0x68>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <MX_TIM9_Init+0x68>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <MX_TIM9_Init+0x68>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <MX_TIM9_Init+0x68>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003512:	480c      	ldr	r0, [pc, #48]	; (8003544 <MX_TIM9_Init+0x68>)
 8003514:	f002 f82c 	bl	8005570 <HAL_TIM_Base_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 800351e:	f000 f955 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003526:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003528:	463b      	mov	r3, r7
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_TIM9_Init+0x68>)
 800352e:	f002 fbfb 	bl	8005d28 <HAL_TIM_ConfigClockSource>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8003538:	f000 f948 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000e54 	.word	0x20000e54
 8003548:	40014000 	.word	0x40014000

0800354c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <MX_USART1_UART_Init+0x50>)
 8003554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800355c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003572:	220c      	movs	r2, #12
 8003574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003578:	f44f 7240 	mov.w	r2, #768	; 0x300
 800357c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003584:	4804      	ldr	r0, [pc, #16]	; (8003598 <MX_USART1_UART_Init+0x4c>)
 8003586:	f003 f96d 	bl	8006864 <HAL_UART_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8003590:	f000 f91c 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000dc4 	.word	0x20000dc4
 800359c:	40011000 	.word	0x40011000

080035a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <MX_USART2_UART_Init+0x50>)
 80035a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035c6:	220c      	movs	r2, #12
 80035c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035d6:	4805      	ldr	r0, [pc, #20]	; (80035ec <MX_USART2_UART_Init+0x4c>)
 80035d8:	f003 f944 	bl	8006864 <HAL_UART_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035e2:	f000 f8f3 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000f58 	.word	0x20000f58
 80035f0:	40004400 	.word	0x40004400

080035f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <MX_USART6_UART_Init+0x50>)
 80035fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 8003600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003604:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 800361a:	220c      	movs	r2, #12
 800361c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_USART6_UART_Init+0x4c>)
 800362c:	f003 f91a 	bl	8006864 <HAL_UART_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003636:	f000 f8c9 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000e98 	.word	0x20000e98
 8003644:	40011400 	.word	0x40011400

08003648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	60da      	str	r2, [r3, #12]
 800365c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	4b54      	ldr	r3, [pc, #336]	; (80037b4 <MX_GPIO_Init+0x16c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a53      	ldr	r2, [pc, #332]	; (80037b4 <MX_GPIO_Init+0x16c>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <MX_GPIO_Init+0x16c>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <MX_GPIO_Init+0x16c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <MX_GPIO_Init+0x16c>)
 8003684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <MX_GPIO_Init+0x16c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <MX_GPIO_Init+0x16c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <MX_GPIO_Init+0x16c>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <MX_GPIO_Init+0x16c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <MX_GPIO_Init+0x16c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <MX_GPIO_Init+0x16c>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <MX_GPIO_Init+0x16c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_Pin|ION_Pin|DAMPER_IN_2_Pin|DAMPER_IN_3_Pin, GPIO_PIN_RESET);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2133      	movs	r1, #51	; 0x33
 80036d2:	4839      	ldr	r0, [pc, #228]	; (80037b8 <MX_GPIO_Init+0x170>)
 80036d4:	f001 f902 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAMPER_OUT_0_Pin|DAMPER_OUT_1_Pin|DAMPER_OUT_2_Pin|DAMPER_OUT_3_Pin, GPIO_PIN_RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	21f0      	movs	r1, #240	; 0xf0
 80036dc:	4837      	ldr	r0, [pc, #220]	; (80037bc <MX_GPIO_Init+0x174>)
 80036de:	f001 f8fd 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAMPER_IN_0_Pin|DAMPER_IN_1_Pin, GPIO_PIN_RESET);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2103      	movs	r1, #3
 80036e6:	4836      	ldr	r0, [pc, #216]	; (80037c0 <MX_GPIO_Init+0x178>)
 80036e8:	f001 f8f8 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80036ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <MX_GPIO_Init+0x17c>)
 80036f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	482d      	ldr	r0, [pc, #180]	; (80037b8 <MX_GPIO_Init+0x170>)
 8003702:	f000 ff51 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_Pin ION_Pin DAMPER_IN_2_Pin DAMPER_IN_3_Pin */
  GPIO_InitStruct.Pin = UV_Pin|ION_Pin|DAMPER_IN_2_Pin|DAMPER_IN_3_Pin;
 8003706:	2333      	movs	r3, #51	; 0x33
 8003708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4619      	mov	r1, r3
 800371c:	4826      	ldr	r0, [pc, #152]	; (80037b8 <MX_GPIO_Init+0x170>)
 800371e:	f000 ff43 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAMPER_OUT_0_Pin DAMPER_OUT_1_Pin DAMPER_OUT_2_Pin DAMPER_OUT_3_Pin */
  GPIO_InitStruct.Pin = DAMPER_OUT_0_Pin|DAMPER_OUT_1_Pin|DAMPER_OUT_2_Pin|DAMPER_OUT_3_Pin;
 8003722:	23f0      	movs	r3, #240	; 0xf0
 8003724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	4820      	ldr	r0, [pc, #128]	; (80037bc <MX_GPIO_Init+0x174>)
 800373a:	f000 ff35 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAMPER_IN_0_Pin DAMPER_IN_1_Pin */
  GPIO_InitStruct.Pin = DAMPER_IN_0_Pin|DAMPER_IN_1_Pin;
 800373e:	2303      	movs	r3, #3
 8003740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	4619      	mov	r1, r3
 8003754:	481a      	ldr	r0, [pc, #104]	; (80037c0 <MX_GPIO_Init+0x178>)
 8003756:	f000 ff27 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800375a:	2304      	movs	r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4619      	mov	r1, r3
 800376c:	4814      	ldr	r0, [pc, #80]	; (80037c0 <MX_GPIO_Init+0x178>)
 800376e:	f000 ff1b 	bl	80045a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003772:	23c0      	movs	r3, #192	; 0xc0
 8003774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <MX_GPIO_Init+0x180>)
 8003778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	480e      	ldr	r0, [pc, #56]	; (80037c0 <MX_GPIO_Init+0x178>)
 8003786:	f000 ff0f 	bl	80045a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	2017      	movs	r0, #23
 8003790:	f000 fea3 	bl	80044da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003794:	2017      	movs	r0, #23
 8003796:	f000 febc 	bl	8004512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	2028      	movs	r0, #40	; 0x28
 80037a0:	f000 fe9b 	bl	80044da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037a4:	2028      	movs	r0, #40	; 0x28
 80037a6:	f000 feb4 	bl	8004512 <HAL_NVIC_EnableIRQ>

}
 80037aa:	bf00      	nop
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020000 	.word	0x40020000
 80037c0:	40020400 	.word	0x40020400
 80037c4:	10210000 	.word	0x10210000
 80037c8:	10110000 	.word	0x10110000

080037cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_MspInit+0x4c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <HAL_MspInit+0x4c>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_MspInit+0x4c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_MspInit+0x4c>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_MspInit+0x4c>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_MspInit+0x4c>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800381a:	2007      	movs	r0, #7
 800381c:	f000 fe52 	bl	80044c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800

0800382c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <HAL_I2C_MspInit+0xa8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d13d      	bne.n	80038ca <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800386a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003870:	2312      	movs	r3, #18
 8003872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003878:	2302      	movs	r3, #2
 800387a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800387c:	2304      	movs	r3, #4
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4619      	mov	r1, r3
 8003886:	4815      	ldr	r0, [pc, #84]	; (80038dc <HAL_I2C_MspInit+0xb0>)
 8003888:	f000 fe8e 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800388c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003892:	2312      	movs	r3, #18
 8003894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800389a:	2302      	movs	r3, #2
 800389c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800389e:	2309      	movs	r3, #9
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	4619      	mov	r1, r3
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <HAL_I2C_MspInit+0xb0>)
 80038aa:	f000 fe7d 	bl	80045a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 80038b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_I2C_MspInit+0xac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40005800 	.word	0x40005800
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020400 	.word	0x40020400

080038e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_SPI_MspInit+0x164>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d14b      	bne.n	800399a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a4f      	ldr	r2, [pc, #316]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 800390c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a48      	ldr	r2, [pc, #288]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003956:	230c      	movs	r3, #12
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003966:	2305      	movs	r3, #5
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396e:	4619      	mov	r1, r3
 8003970:	4836      	ldr	r0, [pc, #216]	; (8003a4c <HAL_SPI_MspInit+0x16c>)
 8003972:	f000 fe19 	bl	80045a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003988:	2305      	movs	r3, #5
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003990:	4619      	mov	r1, r3
 8003992:	482f      	ldr	r0, [pc, #188]	; (8003a50 <HAL_SPI_MspInit+0x170>)
 8003994:	f000 fe08 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003998:	e050      	b.n	8003a3c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2d      	ldr	r2, [pc, #180]	; (8003a54 <HAL_SPI_MspInit+0x174>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d14b      	bne.n	8003a3c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	6313      	str	r3, [r2, #48]	; 0x30
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_SPI_MspInit+0x168>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a12:	4619      	mov	r1, r3
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <HAL_SPI_MspInit+0x170>)
 8003a16:	f000 fdc7 	bl	80045a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a2c:	2306      	movs	r3, #6
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	4619      	mov	r1, r3
 8003a36:	4805      	ldr	r0, [pc, #20]	; (8003a4c <HAL_SPI_MspInit+0x16c>)
 8003a38:	f000 fdb6 	bl	80045a8 <HAL_GPIO_Init>
}
 8003a3c:	bf00      	nop
 8003a3e:	3738      	adds	r7, #56	; 0x38
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40003800 	.word	0x40003800
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40003c00 	.word	0x40003c00

08003a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a3c      	ldr	r2, [pc, #240]	; (8003b58 <HAL_TIM_Base_MspInit+0x100>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d11e      	bne.n	8003aa8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	2018      	movs	r0, #24
 8003a8c:	f000 fd25 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003a90:	2018      	movs	r0, #24
 8003a92:	f000 fd3e 	bl	8004512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	201b      	movs	r0, #27
 8003a9c:	f000 fd1d 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003aa0:	201b      	movs	r0, #27
 8003aa2:	f000 fd36 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003aa6:	e052      	b.n	8003b4e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d116      	bne.n	8003ae0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	201c      	movs	r0, #28
 8003ad4:	f000 fd01 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ad8:	201c      	movs	r0, #28
 8003ada:	f000 fd1a 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8003ade:	e036      	b.n	8003b4e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_TIM_Base_MspInit+0x108>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d116      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	201d      	movs	r0, #29
 8003b0c:	f000 fce5 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b10:	201d      	movs	r0, #29
 8003b12:	f000 fcfe 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8003b16:	e01a      	b.n	8003b4e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM9)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <HAL_TIM_Base_MspInit+0x10c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d115      	bne.n	8003b4e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6453      	str	r3, [r2, #68]	; 0x44
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_TIM_Base_MspInit+0x104>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2018      	movs	r0, #24
 8003b44:	f000 fcc9 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b48:	2018      	movs	r0, #24
 8003b4a:	f000 fce2 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40014000 	.word	0x40014000

08003b68 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_TIM_IC_MspInit+0x84>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d12b      	bne.n	8003be2 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a17      	ldr	r2, [pc, #92]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a10      	ldr	r2, [pc, #64]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_TIM_IC_MspInit+0x88>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <HAL_TIM_IC_MspInit+0x8c>)
 8003bde:	f000 fce3 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003be2:	bf00      	nop
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020000 	.word	0x40020000

08003bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <HAL_TIM_MspPostInit+0xb0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d11f      	bne.n	8003c5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	4619      	mov	r1, r3
 8003c52:	4817      	ldr	r0, [pc, #92]	; (8003cb0 <HAL_TIM_MspPostInit+0xb8>)
 8003c54:	f000 fca8 	bl	80045a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003c58:	e022      	b.n	8003ca0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d11d      	bne.n	8003ca0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	4a0f      	ldr	r2, [pc, #60]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6313      	str	r3, [r2, #48]	; 0x30
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_TIM_MspPostInit+0xb4>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c80:	2302      	movs	r3, #2
 8003c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c90:	2301      	movs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <HAL_TIM_MspPostInit+0xb8>)
 8003c9c:	f000 fc84 	bl	80045a8 <HAL_GPIO_Init>
}
 8003ca0:	bf00      	nop
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_TIM_Base_MspDeInit+0x80>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d109      	bne.n	8003cda <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
    * Be aware, disabling shared interrupt may affect other IPs
    */
    /* HAL_NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn); */
  /* USER CODE END TIM1:TIM1_BRK_TIM9_IRQn disable */

    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8003cd2:	201b      	movs	r0, #27
 8003cd4:	f000 fc2b 	bl	800452e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM9_MspDeInit 1 */

  /* USER CODE END TIM9_MspDeInit 1 */
  }

}
 8003cd8:	e028      	b.n	8003d2c <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d109      	bne.n	8003cf8 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003cf0:	201c      	movs	r0, #28
 8003cf2:	f000 fc1c 	bl	800452e <HAL_NVIC_DisableIRQ>
}
 8003cf6:	e019      	b.n	8003d2c <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <HAL_TIM_Base_MspDeInit+0x88>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d109      	bne.n	8003d16 <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003d0e:	201d      	movs	r0, #29
 8003d10:	f000 fc0d 	bl	800452e <HAL_NVIC_DisableIRQ>
}
 8003d14:	e00a      	b.n	8003d2c <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM9)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_TIM_Base_MspDeInit+0x8c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d105      	bne.n	8003d2c <HAL_TIM_Base_MspDeInit+0x78>
    __HAL_RCC_TIM9_CLK_DISABLE();
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_TIM_Base_MspDeInit+0x84>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_UART_MspInit+0x17c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d135      	bne.n	8003dd2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a4e      	ldr	r2, [pc, #312]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003d9e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da4:	2302      	movs	r3, #2
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dac:	2303      	movs	r3, #3
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003db0:	2307      	movs	r3, #7
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db8:	4619      	mov	r1, r3
 8003dba:	4843      	ldr	r0, [pc, #268]	; (8003ec8 <HAL_UART_MspInit+0x184>)
 8003dbc:	f000 fbf4 	bl	80045a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2025      	movs	r0, #37	; 0x25
 8003dc6:	f000 fb88 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dca:	2025      	movs	r0, #37	; 0x25
 8003dcc:	f000 fba1 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003dd0:	e072      	b.n	8003eb8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3d      	ldr	r2, [pc, #244]	; (8003ecc <HAL_UART_MspInit+0x188>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d134      	bne.n	8003e46 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	6413      	str	r3, [r2, #64]	; 0x40
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6313      	str	r3, [r2, #48]	; 0x30
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e14:	230c      	movs	r3, #12
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e20:	2303      	movs	r3, #3
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e24:	2307      	movs	r3, #7
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4826      	ldr	r0, [pc, #152]	; (8003ec8 <HAL_UART_MspInit+0x184>)
 8003e30:	f000 fbba 	bl	80045a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	2100      	movs	r1, #0
 8003e38:	2026      	movs	r0, #38	; 0x26
 8003e3a:	f000 fb4e 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e3e:	2026      	movs	r0, #38	; 0x26
 8003e40:	f000 fb67 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8003e44:	e038      	b.n	8003eb8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_UART_MspInit+0x18c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d133      	bne.n	8003eb8 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_UART_MspInit+0x180>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e88:	23c0      	movs	r3, #192	; 0xc0
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <HAL_UART_MspInit+0x190>)
 8003ea4:	f000 fb80 	bl	80045a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2047      	movs	r0, #71	; 0x47
 8003eae:	f000 fb14 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003eb2:	2047      	movs	r0, #71	; 0x47
 8003eb4:	f000 fb2d 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8003eb8:	bf00      	nop
 8003eba:	3738      	adds	r7, #56	; 0x38
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40004400 	.word	0x40004400
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40020800 	.word	0x40020800

08003ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <HardFault_Handler+0x4>

08003eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <MemManage_Handler+0x4>

08003ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <BusFault_Handler+0x4>

08003ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003efc:	e7fe      	b.n	8003efc <UsageFault_Handler+0x4>

08003efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f28:	b598      	push	{r3, r4, r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	militimer++;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <SysTick_Handler+0x20>)
 8003f2e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003f32:	1c4b      	adds	r3, r1, #1
 8003f34:	f142 0400 	adc.w	r4, r2, #0
 8003f38:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <SysTick_Handler+0x20>)
 8003f3a:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3e:	f000 f98d 	bl	800425c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd98      	pop	{r3, r4, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000178 	.word	0x20000178

08003f4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003f50:	2040      	movs	r0, #64	; 0x40
 8003f52:	f000 fcf7 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003f56:	2080      	movs	r0, #128	; 0x80
 8003f58:	f000 fcf4 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f64:	4803      	ldr	r0, [pc, #12]	; (8003f74 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003f66:	f001 fc75 	bl	8005854 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003f6a:	4803      	ldr	r0, [pc, #12]	; (8003f78 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003f6c:	f001 fc72 	bl	8005854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000e14 	.word	0x20000e14
 8003f78:	20000e54 	.word	0x20000e54

08003f7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <TIM1_CC_IRQHandler+0x10>)
 8003f82:	f001 fc67 	bl	8005854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000e14 	.word	0x20000e14

08003f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <TIM2_IRQHandler+0x10>)
 8003f96:	f001 fc5d 	bl	8005854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000f10 	.word	0x20000f10

08003fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <TIM3_IRQHandler+0x10>)
 8003faa:	f001 fc53 	bl	8005854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000d14 	.word	0x20000d14

08003fb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <USART1_IRQHandler+0x10>)
 8003fbe:	f002 fd8d 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000dc4 	.word	0x20000dc4

08003fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <USART2_IRQHandler+0x10>)
 8003fd2:	f002 fd83 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000f58 	.word	0x20000f58

08003fe0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fe4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fe8:	f000 fcac 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <USART6_IRQHandler+0x10>)
 8003ff6:	f002 fd71 	bl	8006adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000e98 	.word	0x20000e98

08004004 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e00a      	b.n	800402c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004016:	f3af 8000 	nop.w
 800401a:	4601      	mov	r1, r0
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	60ba      	str	r2, [r7, #8]
 8004022:	b2ca      	uxtb	r2, r1
 8004024:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3301      	adds	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	dbf0      	blt.n	8004016 <_read+0x12>
	}

return len;
 8004034:	687b      	ldr	r3, [r7, #4]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e009      	b.n	8004064 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	60ba      	str	r2, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fbdd 	bl	8002818 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	dbf1      	blt.n	8004050 <_write+0x12>
	}
	return len;
 800406c:	687b      	ldr	r3, [r7, #4]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_close>:

int _close(int file)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
	return -1;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800409e:	605a      	str	r2, [r3, #4]
	return 0;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_isatty>:

int _isatty(int file)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
	return 1;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	return 0;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <_sbrk+0x50>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <_sbrk+0x16>
		heap_end = &end;
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <_sbrk+0x50>)
 80040f2:	4a10      	ldr	r2, [pc, #64]	; (8004134 <_sbrk+0x54>)
 80040f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <_sbrk+0x50>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <_sbrk+0x50>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	466a      	mov	r2, sp
 8004106:	4293      	cmp	r3, r2
 8004108:	d907      	bls.n	800411a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800410a:	f003 fae3 	bl	80076d4 <__errno>
 800410e:	4602      	mov	r2, r0
 8004110:	230c      	movs	r3, #12
 8004112:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004114:	f04f 33ff 	mov.w	r3, #4294967295
 8004118:	e006      	b.n	8004128 <_sbrk+0x48>
	}

	heap_end += incr;
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <_sbrk+0x50>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	4a03      	ldr	r2, [pc, #12]	; (8004130 <_sbrk+0x50>)
 8004124:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004126:	68fb      	ldr	r3, [r7, #12]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000170 	.word	0x20000170
 8004134:	20001240 	.word	0x20001240

08004138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <SystemInit+0x28>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <SystemInit+0x28>)
 8004144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <SystemInit+0x28>)
 800414e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004152:	609a      	str	r2, [r3, #8]
#endif
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <Reset_Handler>:
 8004164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800419c <LoopFillZerobss+0x14>
 8004168:	2100      	movs	r1, #0
 800416a:	e003      	b.n	8004174 <LoopCopyDataInit>

0800416c <CopyDataInit>:
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <LoopFillZerobss+0x18>)
 800416e:	585b      	ldr	r3, [r3, r1]
 8004170:	5043      	str	r3, [r0, r1]
 8004172:	3104      	adds	r1, #4

08004174 <LoopCopyDataInit>:
 8004174:	480b      	ldr	r0, [pc, #44]	; (80041a4 <LoopFillZerobss+0x1c>)
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <LoopFillZerobss+0x20>)
 8004178:	1842      	adds	r2, r0, r1
 800417a:	429a      	cmp	r2, r3
 800417c:	d3f6      	bcc.n	800416c <CopyDataInit>
 800417e:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <LoopFillZerobss+0x24>)
 8004180:	e002      	b.n	8004188 <LoopFillZerobss>

08004182 <FillZerobss>:
 8004182:	2300      	movs	r3, #0
 8004184:	f842 3b04 	str.w	r3, [r2], #4

08004188 <LoopFillZerobss>:
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <LoopFillZerobss+0x28>)
 800418a:	429a      	cmp	r2, r3
 800418c:	d3f9      	bcc.n	8004182 <FillZerobss>
 800418e:	f7ff ffd3 	bl	8004138 <SystemInit>
 8004192:	f003 faa5 	bl	80076e0 <__libc_init_array>
 8004196:	f7fe fdbf 	bl	8002d18 <main>
 800419a:	4770      	bx	lr
 800419c:	20020000 	.word	0x20020000
 80041a0:	080093e0 	.word	0x080093e0
 80041a4:	20000000 	.word	0x20000000
 80041a8:	200000c4 	.word	0x200000c4
 80041ac:	200000c8 	.word	0x200000c8
 80041b0:	20001240 	.word	0x20001240

080041b4 <ADC_IRQHandler>:
 80041b4:	e7fe      	b.n	80041b4 <ADC_IRQHandler>
	...

080041b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_Init+0x40>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_Init+0x40>)
 80041c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_Init+0x40>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <HAL_Init+0x40>)
 80041ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_Init+0x40>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <HAL_Init+0x40>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e0:	2003      	movs	r0, #3
 80041e2:	f000 f96f 	bl	80044c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f000 f808 	bl	80041fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ec:	f7ff faf6 	bl	80037dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023c00 	.word	0x40023c00

080041fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_InitTick+0x54>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <HAL_InitTick+0x58>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004212:	fbb3 f3f1 	udiv	r3, r3, r1
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f995 	bl	800454a <HAL_SYSTICK_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e00e      	b.n	8004248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d80a      	bhi.n	8004246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004230:	2200      	movs	r2, #0
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f000 f94f 	bl	80044da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800423c:	4a06      	ldr	r2, [pc, #24]	; (8004258 <HAL_InitTick+0x5c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000054 	.word	0x20000054
 8004254:	2000005c 	.word	0x2000005c
 8004258:	20000058 	.word	0x20000058

0800425c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x20>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_IncTick+0x24>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4413      	add	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_IncTick+0x24>)
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	2000005c 	.word	0x2000005c
 8004280:	20001238 	.word	0x20001238

08004284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return uwTick;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_GetTick+0x14>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20001238 	.word	0x20001238

0800429c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7ff ffee 	bl	8004284 <HAL_GetTick>
 80042a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d005      	beq.n	80042c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_Delay+0x40>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042c2:	bf00      	nop
 80042c4:	f7ff ffde 	bl	8004284 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d8f7      	bhi.n	80042c4 <HAL_Delay+0x28>
  {
  }
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2000005c 	.word	0x2000005c

080042e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800430c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	60d3      	str	r3, [r2, #12]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <__NVIC_GetPriorityGrouping+0x18>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 0307 	and.w	r3, r3, #7
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	db0b      	blt.n	800436e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	4907      	ldr	r1, [pc, #28]	; (800437c <__NVIC_EnableIRQ+0x38>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2001      	movs	r0, #1
 8004366:	fa00 f202 	lsl.w	r2, r0, r2
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000e100 	.word	0xe000e100

08004380 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db10      	blt.n	80043b4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4909      	ldr	r1, [pc, #36]	; (80043c0 <__NVIC_DisableIRQ+0x40>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2001      	movs	r0, #1
 80043a2:	fa00 f202 	lsl.w	r2, r0, r2
 80043a6:	3320      	adds	r3, #32
 80043a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db0a      	blt.n	80043ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	490c      	ldr	r1, [pc, #48]	; (8004410 <__NVIC_SetPriority+0x4c>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ec:	e00a      	b.n	8004404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4908      	ldr	r1, [pc, #32]	; (8004414 <__NVIC_SetPriority+0x50>)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3b04      	subs	r3, #4
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	440b      	add	r3, r1
 8004402:	761a      	strb	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000e100 	.word	0xe000e100
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf28      	it	cs
 8004436:	2304      	movcs	r3, #4
 8004438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3304      	adds	r3, #4
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <NVIC_EncodePriority+0x30>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3b03      	subs	r3, #3
 8004446:	e000      	b.n	800444a <NVIC_EncodePriority+0x32>
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43d9      	mvns	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	4313      	orrs	r3, r2
         );
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004490:	d301      	bcc.n	8004496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004492:	2301      	movs	r3, #1
 8004494:	e00f      	b.n	80044b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <SysTick_Config+0x40>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449e:	210f      	movs	r1, #15
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f7ff ff8e 	bl	80043c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <SysTick_Config+0x40>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <SysTick_Config+0x40>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010

080044c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff07 	bl	80042e0 <__NVIC_SetPriorityGrouping>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ec:	f7ff ff1c 	bl	8004328 <__NVIC_GetPriorityGrouping>
 80044f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff8e 	bl	8004418 <NVIC_EncodePriority>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff5d 	bl	80043c4 <__NVIC_SetPriority>
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff0f 	bl	8004344 <__NVIC_EnableIRQ>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff1f 	bl	8004380 <__NVIC_DisableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ff94 	bl	8004480 <SysTick_Config>
 8004558:	4603      	mov	r3, r0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d004      	beq.n	8004580 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2280      	movs	r2, #128	; 0x80
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e00c      	b.n	800459a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2205      	movs	r2, #5
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	e159      	b.n	8004878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c4:	2201      	movs	r2, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	f040 8148 	bne.w	8004872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d00b      	beq.n	8004602 <HAL_GPIO_Init+0x5a>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d007      	beq.n	8004602 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f6:	2b11      	cmp	r3, #17
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b12      	cmp	r3, #18
 8004600:	d130      	bne.n	8004664 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2203      	movs	r2, #3
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004638:	2201      	movs	r2, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 0201 	and.w	r2, r3, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0xfc>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b12      	cmp	r3, #18
 80046a2:	d123      	bne.n	80046ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	08da      	lsrs	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3208      	adds	r2, #8
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0203 	and.w	r2, r3, #3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a2 	beq.w	8004872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_GPIO_Init+0x2e4>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a55      	ldr	r2, [pc, #340]	; (800488c <HAL_GPIO_Init+0x2e4>)
 8004738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800473c:	6453      	str	r3, [r2, #68]	; 0x44
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <HAL_GPIO_Init+0x2e4>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800474a:	4a51      	ldr	r2, [pc, #324]	; (8004890 <HAL_GPIO_Init+0x2e8>)
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	220f      	movs	r2, #15
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a48      	ldr	r2, [pc, #288]	; (8004894 <HAL_GPIO_Init+0x2ec>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d019      	beq.n	80047aa <HAL_GPIO_Init+0x202>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a47      	ldr	r2, [pc, #284]	; (8004898 <HAL_GPIO_Init+0x2f0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_GPIO_Init+0x1fe>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a46      	ldr	r2, [pc, #280]	; (800489c <HAL_GPIO_Init+0x2f4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00d      	beq.n	80047a2 <HAL_GPIO_Init+0x1fa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a45      	ldr	r2, [pc, #276]	; (80048a0 <HAL_GPIO_Init+0x2f8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <HAL_GPIO_Init+0x1f6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a44      	ldr	r2, [pc, #272]	; (80048a4 <HAL_GPIO_Init+0x2fc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <HAL_GPIO_Init+0x1f2>
 8004796:	2304      	movs	r3, #4
 8004798:	e008      	b.n	80047ac <HAL_GPIO_Init+0x204>
 800479a:	2307      	movs	r3, #7
 800479c:	e006      	b.n	80047ac <HAL_GPIO_Init+0x204>
 800479e:	2303      	movs	r3, #3
 80047a0:	e004      	b.n	80047ac <HAL_GPIO_Init+0x204>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e002      	b.n	80047ac <HAL_GPIO_Init+0x204>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_GPIO_Init+0x204>
 80047aa:	2300      	movs	r3, #0
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	f002 0203 	and.w	r2, r2, #3
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	4093      	lsls	r3, r2
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047bc:	4934      	ldr	r1, [pc, #208]	; (8004890 <HAL_GPIO_Init+0x2e8>)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	3302      	adds	r3, #2
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_GPIO_Init+0x300>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ee:	4a2e      	ldr	r2, [pc, #184]	; (80048a8 <HAL_GPIO_Init+0x300>)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047f4:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <HAL_GPIO_Init+0x300>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004818:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <HAL_GPIO_Init+0x300>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_GPIO_Init+0x300>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004842:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_GPIO_Init+0x300>)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_GPIO_Init+0x300>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <HAL_GPIO_Init+0x300>)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3301      	adds	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	f67f aea2 	bls.w	80045c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3724      	adds	r7, #36	; 0x24
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40023800 	.word	0x40023800
 8004890:	40013800 	.word	0x40013800
 8004894:	40020000 	.word	0x40020000
 8004898:	40020400 	.word	0x40020400
 800489c:	40020800 	.word	0x40020800
 80048a0:	40020c00 	.word	0x40020c00
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40013c00 	.word	0x40013c00

080048ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e001      	b.n	80048ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f8:	e003      	b.n	8004902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	619a      	str	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	887b      	ldrh	r3, [r7, #2]
 8004920:	401a      	ands	r2, r3
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	429a      	cmp	r2, r3
 8004926:	d104      	bne.n	8004932 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	041a      	lsls	r2, r3, #16
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004930:	e002      	b.n	8004938 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fa5e 	bl	8002e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40013c00 	.word	0x40013c00

08004974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e11f      	b.n	8004bc6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fe ff46 	bl	800382c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d8:	f000 fd3e 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 80049dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a7b      	ldr	r2, [pc, #492]	; (8004bd0 <HAL_I2C_Init+0x25c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d807      	bhi.n	80049f8 <HAL_I2C_Init+0x84>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a7a      	ldr	r2, [pc, #488]	; (8004bd4 <HAL_I2C_Init+0x260>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bf94      	ite	ls
 80049f0:	2301      	movls	r3, #1
 80049f2:	2300      	movhi	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e006      	b.n	8004a06 <HAL_I2C_Init+0x92>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_I2C_Init+0x264>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bf94      	ite	ls
 8004a00:	2301      	movls	r3, #1
 8004a02:	2300      	movhi	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0db      	b.n	8004bc6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a72      	ldr	r2, [pc, #456]	; (8004bdc <HAL_I2C_Init+0x268>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0c9b      	lsrs	r3, r3, #18
 8004a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a64      	ldr	r2, [pc, #400]	; (8004bd0 <HAL_I2C_Init+0x25c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d802      	bhi.n	8004a48 <HAL_I2C_Init+0xd4>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3301      	adds	r3, #1
 8004a46:	e009      	b.n	8004a5c <HAL_I2C_Init+0xe8>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <HAL_I2C_Init+0x26c>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4956      	ldr	r1, [pc, #344]	; (8004bd0 <HAL_I2C_Init+0x25c>)
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d80d      	bhi.n	8004a98 <HAL_I2C_Init+0x124>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e59      	subs	r1, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	bf38      	it	cc
 8004a94:	2304      	movcc	r3, #4
 8004a96:	e04f      	b.n	8004b38 <HAL_I2C_Init+0x1c4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <HAL_I2C_Init+0x150>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e58      	subs	r0, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	440b      	add	r3, r1
 8004aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e012      	b.n	8004aea <HAL_I2C_Init+0x176>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1e58      	subs	r0, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	0099      	lsls	r1, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Init+0x17e>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e022      	b.n	8004b38 <HAL_I2C_Init+0x1c4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10e      	bne.n	8004b18 <HAL_I2C_Init+0x1a4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e58      	subs	r0, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	440b      	add	r3, r1
 8004b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	e00f      	b.n	8004b38 <HAL_I2C_Init+0x1c4>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	0099      	lsls	r1, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	6809      	ldr	r1, [r1, #0]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6911      	ldr	r1, [r2, #16]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	000186a0 	.word	0x000186a0
 8004bd4:	001e847f 	.word	0x001e847f
 8004bd8:	003d08ff 	.word	0x003d08ff
 8004bdc:	431bde83 	.word	0x431bde83
 8004be0:	10624dd3 	.word	0x10624dd3

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e25b      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d075      	beq.n	8004cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c02:	4ba3      	ldr	r3, [pc, #652]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00c      	beq.n	8004c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0e:	4ba0      	ldr	r3, [pc, #640]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d112      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1a:	4b9d      	ldr	r3, [pc, #628]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c26:	d10b      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c28:	4b99      	ldr	r3, [pc, #612]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05b      	beq.n	8004cec <HAL_RCC_OscConfig+0x108>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d157      	bne.n	8004cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e236      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d106      	bne.n	8004c58 <HAL_RCC_OscConfig+0x74>
 8004c4a:	4b91      	ldr	r3, [pc, #580]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a90      	ldr	r2, [pc, #576]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e01d      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x98>
 8004c62:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a8a      	ldr	r2, [pc, #552]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a87      	ldr	r2, [pc, #540]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a80      	ldr	r2, [pc, #512]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d013      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7ff faf2 	bl	8004284 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7ff faee 	bl	8004284 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1fb      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0xc0>
 8004cc2:	e014      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7ff fade 	bl	8004284 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7ff fada 	bl	8004284 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1e7      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0xe8>
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d063      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfa:	4b65      	ldr	r3, [pc, #404]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d06:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d11c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d116      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	4b5c      	ldr	r3, [pc, #368]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d001      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e1bb      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4952      	ldr	r1, [pc, #328]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4a:	e03a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d54:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <HAL_RCC_OscConfig+0x2b0>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7ff fa93 	bl	8004284 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7ff fa8f 	bl	8004284 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e19c      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	4b46      	ldr	r3, [pc, #280]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	4b43      	ldr	r3, [pc, #268]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4940      	ldr	r1, [pc, #256]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d96:	4b3f      	ldr	r3, [pc, #252]	; (8004e94 <HAL_RCC_OscConfig+0x2b0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7ff fa72 	bl	8004284 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da4:	f7ff fa6e 	bl	8004284 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e17b      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d030      	beq.n	8004e30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd6:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <HAL_RCC_OscConfig+0x2b4>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7ff fa52 	bl	8004284 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de4:	f7ff fa4e 	bl	8004284 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e15b      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x200>
 8004e02:	e015      	b.n	8004e30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x2b4>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0a:	f7ff fa3b 	bl	8004284 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e12:	f7ff fa37 	bl	8004284 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e144      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80a0 	beq.w	8004f7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d121      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e86:	f7ff f9fd 	bl	8004284 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	e011      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2ce>
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	42470000 	.word	0x42470000
 8004e98:	42470e80 	.word	0x42470e80
 8004e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7ff f9f0 	bl	8004284 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e0fd      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b81      	ldr	r3, [pc, #516]	; (80050b8 <HAL_RCC_OscConfig+0x4d4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
 8004ec6:	4b7d      	ldr	r3, [pc, #500]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a7c      	ldr	r2, [pc, #496]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed2:	e01c      	b.n	8004f0e <HAL_RCC_OscConfig+0x32a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x312>
 8004edc:	4b77      	ldr	r3, [pc, #476]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a76      	ldr	r2, [pc, #472]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee8:	4b74      	ldr	r3, [pc, #464]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	4a73      	ldr	r2, [pc, #460]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef4:	e00b      	b.n	8004f0e <HAL_RCC_OscConfig+0x32a>
 8004ef6:	4b71      	ldr	r3, [pc, #452]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a70      	ldr	r2, [pc, #448]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	4b6e      	ldr	r3, [pc, #440]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a6d      	ldr	r2, [pc, #436]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d015      	beq.n	8004f42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7ff f9b5 	bl	8004284 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7ff f9b1 	bl	8004284 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0bc      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	4b61      	ldr	r3, [pc, #388]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ee      	beq.n	8004f1e <HAL_RCC_OscConfig+0x33a>
 8004f40:	e014      	b.n	8004f6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f42:	f7ff f99f 	bl	8004284 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7ff f99b 	bl	8004284 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0a6      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f60:	4b56      	ldr	r3, [pc, #344]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ee      	bne.n	8004f4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b52      	ldr	r3, [pc, #328]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a51      	ldr	r2, [pc, #324]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8092 	beq.w	80050ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f88:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d05c      	beq.n	800504e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d141      	bne.n	8005020 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b48      	ldr	r3, [pc, #288]	; (80050c0 <HAL_RCC_OscConfig+0x4dc>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7ff f96f 	bl	8004284 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7ff f96b 	bl	8004284 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e078      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	019b      	lsls	r3, r3, #6
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	4933      	ldr	r1, [pc, #204]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff2:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x4dc>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7ff f944 	bl	8004284 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005000:	f7ff f940 	bl	8004284 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04d      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x41c>
 800501e:	e045      	b.n	80050ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCC_OscConfig+0x4dc>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7ff f92d 	bl	8004284 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502e:	f7ff f929 	bl	8004284 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e036      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x44a>
 800504c:	e02e      	b.n	80050ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e029      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <HAL_RCC_OscConfig+0x4d8>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	429a      	cmp	r2, r3
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d115      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005082:	4013      	ands	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005088:	4293      	cmp	r3, r2
 800508a:	d10d      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40007000 	.word	0x40007000
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470060 	.word	0x42470060

080050c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0cc      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d8:	4b68      	ldr	r3, [pc, #416]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90c      	bls.n	8005100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b65      	ldr	r3, [pc, #404]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b63      	ldr	r3, [pc, #396]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0b8      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005118:	4b59      	ldr	r3, [pc, #356]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a58      	ldr	r2, [pc, #352]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005130:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a52      	ldr	r2, [pc, #328]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800513a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b50      	ldr	r3, [pc, #320]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	494d      	ldr	r1, [pc, #308]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d044      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d119      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d003      	beq.n	8005182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517e:	2b03      	cmp	r3, #3
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e06f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005192:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e067      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a2:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4934      	ldr	r1, [pc, #208]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b4:	f7ff f866 	bl	8004284 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7ff f862 	bl	8004284 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e04f      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 020c 	and.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1eb      	bne.n	80051bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d20c      	bcs.n	800520c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e032      	b.n	8005272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4916      	ldr	r1, [pc, #88]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	490e      	ldr	r1, [pc, #56]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800524a:	f000 f821 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 800524e:	4601      	mov	r1, r0
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <HAL_RCC_ClockConfig+0x1c0>)
 800525c:	5cd3      	ldrb	r3, [r2, r3]
 800525e:	fa21 f303 	lsr.w	r3, r1, r3
 8005262:	4a09      	ldr	r2, [pc, #36]	; (8005288 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe ffc6 	bl	80041fc <HAL_InitTick>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00
 8005280:	40023800 	.word	0x40023800
 8005284:	08009320 	.word	0x08009320
 8005288:	20000054 	.word	0x20000054
 800528c:	20000058 	.word	0x20000058

08005290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	2300      	movs	r3, #0
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d007      	beq.n	80052c2 <HAL_RCC_GetSysClockFreq+0x32>
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d008      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x38>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 80b4 	bne.w	8005424 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052bc:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052be:	60bb      	str	r3, [r7, #8]
       break;
 80052c0:	e0b3      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c2:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052c4:	60bb      	str	r3, [r7, #8]
      break;
 80052c6:	e0b0      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d2:	4b58      	ldr	r3, [pc, #352]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04a      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b55      	ldr	r3, [pc, #340]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	ea03 0501 	and.w	r5, r3, r1
 80052f4:	ea04 0602 	and.w	r6, r4, r2
 80052f8:	4629      	mov	r1, r5
 80052fa:	4632      	mov	r2, r6
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	0154      	lsls	r4, r2, #5
 8005306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800530a:	014b      	lsls	r3, r1, #5
 800530c:	4619      	mov	r1, r3
 800530e:	4622      	mov	r2, r4
 8005310:	1b49      	subs	r1, r1, r5
 8005312:	eb62 0206 	sbc.w	r2, r2, r6
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	f04f 0400 	mov.w	r4, #0
 800531e:	0194      	lsls	r4, r2, #6
 8005320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005324:	018b      	lsls	r3, r1, #6
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	eb64 0402 	sbc.w	r4, r4, r2
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	00e2      	lsls	r2, r4, #3
 8005336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800533a:	00d9      	lsls	r1, r3, #3
 800533c:	460b      	mov	r3, r1
 800533e:	4614      	mov	r4, r2
 8005340:	195b      	adds	r3, r3, r5
 8005342:	eb44 0406 	adc.w	r4, r4, r6
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	0262      	lsls	r2, r4, #9
 8005350:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005354:	0259      	lsls	r1, r3, #9
 8005356:	460b      	mov	r3, r1
 8005358:	4614      	mov	r4, r2
 800535a:	4618      	mov	r0, r3
 800535c:	4621      	mov	r1, r4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	461a      	mov	r2, r3
 8005366:	4623      	mov	r3, r4
 8005368:	f7fb fc08 	bl	8000b7c <__aeabi_uldivmod>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e049      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005374:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	099b      	lsrs	r3, r3, #6
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	ea03 0501 	and.w	r5, r3, r1
 800538a:	ea04 0602 	and.w	r6, r4, r2
 800538e:	4629      	mov	r1, r5
 8005390:	4632      	mov	r2, r6
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	0154      	lsls	r4, r2, #5
 800539c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053a0:	014b      	lsls	r3, r1, #5
 80053a2:	4619      	mov	r1, r3
 80053a4:	4622      	mov	r2, r4
 80053a6:	1b49      	subs	r1, r1, r5
 80053a8:	eb62 0206 	sbc.w	r2, r2, r6
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	0194      	lsls	r4, r2, #6
 80053b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053ba:	018b      	lsls	r3, r1, #6
 80053bc:	1a5b      	subs	r3, r3, r1
 80053be:	eb64 0402 	sbc.w	r4, r4, r2
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	00e2      	lsls	r2, r4, #3
 80053cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053d0:	00d9      	lsls	r1, r3, #3
 80053d2:	460b      	mov	r3, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	195b      	adds	r3, r3, r5
 80053d8:	eb44 0406 	adc.w	r4, r4, r6
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	02a2      	lsls	r2, r4, #10
 80053e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053ea:	0299      	lsls	r1, r3, #10
 80053ec:	460b      	mov	r3, r1
 80053ee:	4614      	mov	r4, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	4621      	mov	r1, r4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f04f 0400 	mov.w	r4, #0
 80053fa:	461a      	mov	r2, r3
 80053fc:	4623      	mov	r3, r4
 80053fe:	f7fb fbbd 	bl	8000b7c <__aeabi_uldivmod>
 8005402:	4603      	mov	r3, r0
 8005404:	460c      	mov	r4, r1
 8005406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	60bb      	str	r3, [r7, #8]
      break;
 8005422:	e002      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005424:	4b04      	ldr	r3, [pc, #16]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005426:	60bb      	str	r3, [r7, #8]
      break;
 8005428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542a:	68bb      	ldr	r3, [r7, #8]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005434:	40023800 	.word	0x40023800
 8005438:	00f42400 	.word	0x00f42400
 800543c:	007a1200 	.word	0x007a1200

08005440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_RCC_GetHCLKFreq+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000054 	.word	0x20000054

08005458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800545c:	f7ff fff0 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8005460:	4601      	mov	r1, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0a9b      	lsrs	r3, r3, #10
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4a03      	ldr	r2, [pc, #12]	; (800547c <HAL_RCC_GetPCLK1Freq+0x24>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	08009330 	.word	0x08009330

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005484:	f7ff ffdc 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8005488:	4601      	mov	r1, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	0b5b      	lsrs	r3, r3, #13
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40023800 	.word	0x40023800
 80054a4:	08009330 	.word	0x08009330

080054a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e056      	b.n	8005568 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe fa03 	bl	80038e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	ea42 0103 	orr.w	r1, r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	f003 0104 	and.w	r1, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e01d      	b.n	80055be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fe fa5e 	bl	8003a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f000 fc9a 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <HAL_TIM_Base_DeInit+0x40>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a1a      	ldr	r2, [r3, #32]
 80055ec:	f240 4344 	movw	r3, #1092	; 0x444
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <HAL_TIM_Base_DeInit+0x40>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fe fb54 	bl	8003cb4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d007      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_TIM_Base_Stop_IT+0x48>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	f240 4344 	movw	r3, #1092	; 0x444
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_TIM_Base_Stop_IT+0x48>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e01d      	b.n	8005712 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f815 	bl	800571a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 fbf0 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e01d      	b.n	800577c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fe fa07 	bl	8003b68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f000 fbbb 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d841      	bhi.n	8005818 <HAL_TIM_IC_Start_IT+0x94>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_TIM_IC_Start_IT+0x18>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	08005819 	.word	0x08005819
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005819 	.word	0x08005819
 80057ac:	080057e3 	.word	0x080057e3
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005819 	.word	0x08005819
 80057bc:	080057f5 	.word	0x080057f5
 80057c0:	08005819 	.word	0x08005819
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005807 	.word	0x08005807
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0202 	orr.w	r2, r2, #2
 80057de:	60da      	str	r2, [r3, #12]
      break;
 80057e0:	e01b      	b.n	800581a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0204 	orr.w	r2, r2, #4
 80057f0:	60da      	str	r2, [r3, #12]
      break;
 80057f2:	e012      	b.n	800581a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0208 	orr.w	r2, r2, #8
 8005802:	60da      	str	r2, [r3, #12]
      break;
 8005804:	e009      	b.n	800581a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0210 	orr.w	r2, r2, #16
 8005814:	60da      	str	r2, [r3, #12]
      break;
 8005816:	e000      	b.n	800581a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005818:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 ff24 	bl	8006670 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b06      	cmp	r3, #6
 8005838:	d007      	beq.n	800584a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b02      	cmp	r3, #2
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0202 	mvn.w	r2, #2
 8005880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fb07 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 faf9 	bl	8005e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb0a 	bl	8005ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0204 	mvn.w	r2, #4
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fadd 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 facf 	bl	8005e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fae0 	bl	8005ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b08      	cmp	r3, #8
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0208 	mvn.w	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fab3 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 faa5 	bl	8005e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fab6 	bl	8005ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b10      	cmp	r3, #16
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b10      	cmp	r3, #16
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0210 	mvn.w	r2, #16
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2208      	movs	r2, #8
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa89 	bl	8005eaa <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa7b 	bl	8005e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa8c 	bl	8005ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10e      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0201 	mvn.w	r2, #1
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd fa54 	bl	8002e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d10e      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d107      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 ff26 	bl	8006850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d10e      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d107      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa51 	bl	8005ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0220 	mvn.w	r2, #32
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fef0 	bl	800683c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e08a      	b.n	8005b94 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f000 fc2c 	bl	8006300 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 020c 	bic.w	r2, r2, #12
 8005ab6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e05a      	b.n	8005b82 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d11c      	bne.n	8005b0c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f000 fca4 	bl	800642e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005af4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6999      	ldr	r1, [r3, #24]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e03a      	b.n	8005b82 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d11b      	bne.n	8005b4a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f000 fcf1 	bl	8006508 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 020c 	bic.w	r2, r2, #12
 8005b34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
 8005b48:	e01b      	b.n	8005b82 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f000 fd11 	bl	8006580 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	021a      	lsls	r2, r3, #8
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0b4      	b.n	8005d20 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	f200 809f 	bhi.w	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005d0d 	.word	0x08005d0d
 8005bdc:	08005d0d 	.word	0x08005d0d
 8005be0:	08005d0d 	.word	0x08005d0d
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005d0d 	.word	0x08005d0d
 8005bec:	08005d0d 	.word	0x08005d0d
 8005bf0:	08005d0d 	.word	0x08005d0d
 8005bf4:	08005c8b 	.word	0x08005c8b
 8005bf8:	08005d0d 	.word	0x08005d0d
 8005bfc:	08005d0d 	.word	0x08005d0d
 8005c00:	08005d0d 	.word	0x08005d0d
 8005c04:	08005ccb 	.word	0x08005ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f9ea 	bl	8005fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e062      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa30 	bl	80060b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e041      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa7b 	bl	800618c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e021      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fac5 	bl	8006260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e000      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_ConfigClockSource+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0a6      	b.n	8005e8e <HAL_TIM_ConfigClockSource+0x166>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d067      	beq.n	8005e48 <HAL_TIM_ConfigClockSource+0x120>
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d80b      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x6c>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d073      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x140>
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d802      	bhi.n	8005d8a <HAL_TIM_ConfigClockSource+0x62>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d06f      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d88:	e078      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d06c      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x140>
 8005d8e:	2b30      	cmp	r3, #48	; 0x30
 8005d90:	d06a      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d92:	e073      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d94:	2b70      	cmp	r3, #112	; 0x70
 8005d96:	d00d      	beq.n	8005db4 <HAL_TIM_ConfigClockSource+0x8c>
 8005d98:	2b70      	cmp	r3, #112	; 0x70
 8005d9a:	d804      	bhi.n	8005da6 <HAL_TIM_ConfigClockSource+0x7e>
 8005d9c:	2b50      	cmp	r3, #80	; 0x50
 8005d9e:	d033      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0xe0>
 8005da0:	2b60      	cmp	r3, #96	; 0x60
 8005da2:	d041      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005da4:	e06a      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d066      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x152>
 8005dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db0:	d017      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005db2:	e063      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	6899      	ldr	r1, [r3, #8]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f000 fc34 	bl	8006630 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]
      break;
 8005de0:	e04c      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6899      	ldr	r1, [r3, #8]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f000 fc1d 	bl	8006630 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e04:	609a      	str	r2, [r3, #8]
      break;
 8005e06:	e039      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6859      	ldr	r1, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f000 fadb 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2150      	movs	r1, #80	; 0x50
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fbea 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005e26:	e029      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f000 fb37 	bl	80064a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2160      	movs	r1, #96	; 0x60
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fbda 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005e46:	e019      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	461a      	mov	r2, r3
 8005e56:	f000 fabb 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fbca 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005e66:	e009      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 fbc1 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 8005e78:	e000      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_Base_SetConfig+0x38>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0x38>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a31      	ldr	r2, [pc, #196]	; (8005fd0 <TIM_Base_SetConfig+0xe8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <TIM_Base_SetConfig+0xec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_Base_SetConfig+0xf0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a25      	ldr	r2, [pc, #148]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01b      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d017      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <TIM_Base_SetConfig+0xe8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <TIM_Base_SetConfig+0xec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00f      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <TIM_Base_SetConfig+0xf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00b      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <TIM_Base_SetConfig+0xf4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <TIM_Base_SetConfig+0xf8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <TIM_Base_SetConfig+0xfc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d108      	bne.n	8005f84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <TIM_Base_SetConfig+0xe4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d103      	bne.n	8005fb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	615a      	str	r2, [r3, #20]
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 0302 	bic.w	r3, r3, #2
 8006030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <TIM_OC1_SetConfig+0xc8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d10c      	bne.n	800605e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0308 	bic.w	r3, r3, #8
 800604a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 0304 	bic.w	r3, r3, #4
 800605c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <TIM_OC1_SetConfig+0xc8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d111      	bne.n	800608a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800606c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40010000 	.word	0x40010000

080060b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0210 	bic.w	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <TIM_OC2_SetConfig+0xd4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10d      	bne.n	8006130 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <TIM_OC2_SetConfig+0xd4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d113      	bne.n	8006160 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000

0800618c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1d      	ldr	r2, [pc, #116]	; (800625c <TIM_OC3_SetConfig+0xd0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10d      	bne.n	8006206 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a14      	ldr	r2, [pc, #80]	; (800625c <TIM_OC3_SetConfig+0xd0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d113      	bne.n	8006236 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	621a      	str	r2, [r3, #32]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	40010000 	.word	0x40010000

08006260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	031b      	lsls	r3, r3, #12
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <TIM_OC4_SetConfig+0x9c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d109      	bne.n	80062d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000

08006300 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0201 	bic.w	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <TIM_TI1_SetConfig+0xbc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <TIM_TI1_SetConfig+0x56>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006334:	d00f      	beq.n	8006356 <TIM_TI1_SetConfig+0x56>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_TI1_SetConfig+0xc0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00b      	beq.n	8006356 <TIM_TI1_SetConfig+0x56>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <TIM_TI1_SetConfig+0xc4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d007      	beq.n	8006356 <TIM_TI1_SetConfig+0x56>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <TIM_TI1_SetConfig+0xc8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_TI1_SetConfig+0x56>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_TI1_SetConfig+0xcc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <TIM_TI1_SetConfig+0x5a>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <TIM_TI1_SetConfig+0x5c>
 800635a:	2300      	movs	r3, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e003      	b.n	800637a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	b2db      	uxtb	r3, r3
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f023 030a 	bic.w	r3, r3, #10
 8006394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 030a 	and.w	r3, r3, #10
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40000c00 	.word	0x40000c00
 80063cc:	40014000 	.word	0x40014000

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f023 0210 	bic.w	r2, r3, #16
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	031b      	lsls	r3, r3, #12
 8006472:	b29b      	uxth	r3, r3
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006480:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	031b      	lsls	r3, r3, #12
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	b2db      	uxtb	r3, r3
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006558:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	031b      	lsls	r3, r3, #12
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	031b      	lsls	r3, r3, #12
 80065d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	f043 0307 	orr.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800664a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	431a      	orrs	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2201      	movs	r2, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e050      	b.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d018      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006720:	d013      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00e      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10c      	bne.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4313      	orrs	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40014000 	.word	0x40014000

08006798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e03d      	b.n	8006830 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e03f      	b.n	80068f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fd fa5a 	bl	8003d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	; 0x24
 8006894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb97 	bl	8006fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b088      	sub	sp, #32
 8006902:	af02      	add	r7, sp, #8
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b20      	cmp	r3, #32
 800691c:	f040 8083 	bne.w	8006a26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_UART_Transmit+0x2e>
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e07b      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_UART_Transmit+0x40>
 800693a:	2302      	movs	r3, #2
 800693c:	e074      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2221      	movs	r2, #33	; 0x21
 8006950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006954:	f7fd fc96 	bl	8004284 <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800696e:	e042      	b.n	80069f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d122      	bne.n	80069ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2200      	movs	r2, #0
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f9b6 	bl	8006d04 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e042      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	3302      	adds	r3, #2
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	e017      	b.n	80069f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	e013      	b.n	80069f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f993 	bl	8006d04 <UART_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e01f      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	60ba      	str	r2, [r7, #8]
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1b7      	bne.n	8006970 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2200      	movs	r2, #0
 8006a08:	2140      	movs	r1, #64	; 0x40
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f97a 	bl	8006d04 <UART_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e006      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d140      	bne.n	8006acc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_UART_Receive_IT+0x26>
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e039      	b.n	8006ace <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_UART_Receive_IT+0x38>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e032      	b.n	8006ace <HAL_UART_Receive_IT+0x9e>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	88fa      	ldrh	r2, [r7, #6]
 8006a80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2222      	movs	r2, #34	; 0x22
 8006a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0220 	orr.w	r2, r2, #32
 8006ac6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_UART_IRQHandler+0x52>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9d6 	bl	8006ed8 <UART_Receive_IT>
      return;
 8006b2c:	e0d1      	b.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80b0 	beq.w	8006c96 <HAL_UART_IRQHandler+0x1ba>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <HAL_UART_IRQHandler+0x70>
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80a5 	beq.w	8006c96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <HAL_UART_IRQHandler+0x90>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	f043 0201 	orr.w	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <HAL_UART_IRQHandler+0xb0>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	f043 0202 	orr.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HAL_UART_IRQHandler+0xd0>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	f043 0204 	orr.w	r2, r3, #4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00f      	beq.n	8006bd6 <HAL_UART_IRQHandler+0xfa>
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <HAL_UART_IRQHandler+0xee>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	f043 0208 	orr.w	r2, r3, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d078      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x11c>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f970 	bl	8006ed8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <HAL_UART_IRQHandler+0x144>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d031      	beq.n	8006c84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8b9 	bl	8006d98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d123      	bne.n	8006c7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695a      	ldr	r2, [r3, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d013      	beq.n	8006c74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_UART_IRQHandler+0x1fc>)
 8006c52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd fc82 	bl	8004562 <HAL_DMA_Abort_IT>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d016      	beq.n	8006c92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c6e:	4610      	mov	r0, r2
 8006c70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	e00e      	b.n	8006c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f83b 	bl	8006cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7a:	e00a      	b.n	8006c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f837 	bl	8006cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	e006      	b.n	8006c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f833 	bl	8006cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c90:	e01e      	b.n	8006cd0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c92:	bf00      	nop
    return;
 8006c94:	e01c      	b.n	8006cd0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1d6>
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8a6 	bl	8006dfc <UART_Transmit_IT>
    return;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8ee 	bl	8006ea8 <UART_EndTransmit_IT>
    return;
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006cd0:	bf00      	nop
  }
}
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08006dd5 	.word	0x08006dd5

08006cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d14:	e02c      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d028      	beq.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d007      	beq.n	8006d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d24:	f7fd faae 	bl	8004284 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d21d      	bcs.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e00f      	b.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	bf0c      	ite	eq
 8006d80:	2301      	moveq	r3, #1
 8006d82:	2300      	movne	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d0c3      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7ff ff7e 	bl	8006cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b21      	cmp	r3, #33	; 0x21
 8006e0e:	d144      	bne.n	8006e9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d11a      	bne.n	8006e50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]
 8006e42:	e00e      	b.n	8006e62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]
 8006e4e:	e008      	b.n	8006e62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	1c59      	adds	r1, r3, #1
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6211      	str	r1, [r2, #32]
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10f      	bne.n	8006e96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ebe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ff07 	bl	8006cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b22      	cmp	r3, #34	; 0x22
 8006eea:	d171      	bne.n	8006fd0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef4:	d123      	bne.n	8006f3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10e      	bne.n	8006f22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f20:	e029      	b.n	8006f76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f3c:	e01b      	b.n	8006f76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6858      	ldr	r0, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6291      	str	r1, [r2, #40]	; 0x28
 8006f56:	b2c2      	uxtb	r2, r0
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e00c      	b.n	8006f76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	1c58      	adds	r0, r3, #1
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	6288      	str	r0, [r1, #40]	; 0x28
 8006f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4619      	mov	r1, r3
 8006f84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d120      	bne.n	8006fcc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0220 	bic.w	r2, r2, #32
 8006f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fb fc62 	bl	800288c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e002      	b.n	8006fd2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	430b      	orrs	r3, r1
 800702a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800704a:	f040 818b 	bne.w	8007364 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4ac1      	ldr	r2, [pc, #772]	; (8007358 <UART_SetConfig+0x37c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d005      	beq.n	8007064 <UART_SetConfig+0x88>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4abf      	ldr	r2, [pc, #764]	; (800735c <UART_SetConfig+0x380>)
 800705e:	4293      	cmp	r3, r2
 8007060:	f040 80bd 	bne.w	80071de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007064:	f7fe fa0c 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8007068:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	461d      	mov	r5, r3
 800706e:	f04f 0600 	mov.w	r6, #0
 8007072:	46a8      	mov	r8, r5
 8007074:	46b1      	mov	r9, r6
 8007076:	eb18 0308 	adds.w	r3, r8, r8
 800707a:	eb49 0409 	adc.w	r4, r9, r9
 800707e:	4698      	mov	r8, r3
 8007080:	46a1      	mov	r9, r4
 8007082:	eb18 0805 	adds.w	r8, r8, r5
 8007086:	eb49 0906 	adc.w	r9, r9, r6
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007096:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800709a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800709e:	4688      	mov	r8, r1
 80070a0:	4691      	mov	r9, r2
 80070a2:	eb18 0005 	adds.w	r0, r8, r5
 80070a6:	eb49 0106 	adc.w	r1, r9, r6
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	461d      	mov	r5, r3
 80070b0:	f04f 0600 	mov.w	r6, #0
 80070b4:	196b      	adds	r3, r5, r5
 80070b6:	eb46 0406 	adc.w	r4, r6, r6
 80070ba:	461a      	mov	r2, r3
 80070bc:	4623      	mov	r3, r4
 80070be:	f7f9 fd5d 	bl	8000b7c <__aeabi_uldivmod>
 80070c2:	4603      	mov	r3, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	461a      	mov	r2, r3
 80070c8:	4ba5      	ldr	r3, [pc, #660]	; (8007360 <UART_SetConfig+0x384>)
 80070ca:	fba3 2302 	umull	r2, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	461d      	mov	r5, r3
 80070d8:	f04f 0600 	mov.w	r6, #0
 80070dc:	46a9      	mov	r9, r5
 80070de:	46b2      	mov	sl, r6
 80070e0:	eb19 0309 	adds.w	r3, r9, r9
 80070e4:	eb4a 040a 	adc.w	r4, sl, sl
 80070e8:	4699      	mov	r9, r3
 80070ea:	46a2      	mov	sl, r4
 80070ec:	eb19 0905 	adds.w	r9, r9, r5
 80070f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80070f4:	f04f 0100 	mov.w	r1, #0
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007108:	4689      	mov	r9, r1
 800710a:	4692      	mov	sl, r2
 800710c:	eb19 0005 	adds.w	r0, r9, r5
 8007110:	eb4a 0106 	adc.w	r1, sl, r6
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	461d      	mov	r5, r3
 800711a:	f04f 0600 	mov.w	r6, #0
 800711e:	196b      	adds	r3, r5, r5
 8007120:	eb46 0406 	adc.w	r4, r6, r6
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	f7f9 fd28 	bl	8000b7c <__aeabi_uldivmod>
 800712c:	4603      	mov	r3, r0
 800712e:	460c      	mov	r4, r1
 8007130:	461a      	mov	r2, r3
 8007132:	4b8b      	ldr	r3, [pc, #556]	; (8007360 <UART_SetConfig+0x384>)
 8007134:	fba3 1302 	umull	r1, r3, r3, r2
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	2164      	movs	r1, #100	; 0x64
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	3332      	adds	r3, #50	; 0x32
 8007146:	4a86      	ldr	r2, [pc, #536]	; (8007360 <UART_SetConfig+0x384>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007154:	4498      	add	r8, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	461d      	mov	r5, r3
 800715a:	f04f 0600 	mov.w	r6, #0
 800715e:	46a9      	mov	r9, r5
 8007160:	46b2      	mov	sl, r6
 8007162:	eb19 0309 	adds.w	r3, r9, r9
 8007166:	eb4a 040a 	adc.w	r4, sl, sl
 800716a:	4699      	mov	r9, r3
 800716c:	46a2      	mov	sl, r4
 800716e:	eb19 0905 	adds.w	r9, r9, r5
 8007172:	eb4a 0a06 	adc.w	sl, sl, r6
 8007176:	f04f 0100 	mov.w	r1, #0
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007182:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007186:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800718a:	4689      	mov	r9, r1
 800718c:	4692      	mov	sl, r2
 800718e:	eb19 0005 	adds.w	r0, r9, r5
 8007192:	eb4a 0106 	adc.w	r1, sl, r6
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	461d      	mov	r5, r3
 800719c:	f04f 0600 	mov.w	r6, #0
 80071a0:	196b      	adds	r3, r5, r5
 80071a2:	eb46 0406 	adc.w	r4, r6, r6
 80071a6:	461a      	mov	r2, r3
 80071a8:	4623      	mov	r3, r4
 80071aa:	f7f9 fce7 	bl	8000b7c <__aeabi_uldivmod>
 80071ae:	4603      	mov	r3, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	461a      	mov	r2, r3
 80071b4:	4b6a      	ldr	r3, [pc, #424]	; (8007360 <UART_SetConfig+0x384>)
 80071b6:	fba3 1302 	umull	r1, r3, r3, r2
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2164      	movs	r1, #100	; 0x64
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	3332      	adds	r3, #50	; 0x32
 80071c8:	4a65      	ldr	r2, [pc, #404]	; (8007360 <UART_SetConfig+0x384>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f003 0207 	and.w	r2, r3, #7
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4442      	add	r2, r8
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	e26f      	b.n	80076be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071de:	f7fe f93b 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 80071e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	461d      	mov	r5, r3
 80071e8:	f04f 0600 	mov.w	r6, #0
 80071ec:	46a8      	mov	r8, r5
 80071ee:	46b1      	mov	r9, r6
 80071f0:	eb18 0308 	adds.w	r3, r8, r8
 80071f4:	eb49 0409 	adc.w	r4, r9, r9
 80071f8:	4698      	mov	r8, r3
 80071fa:	46a1      	mov	r9, r4
 80071fc:	eb18 0805 	adds.w	r8, r8, r5
 8007200:	eb49 0906 	adc.w	r9, r9, r6
 8007204:	f04f 0100 	mov.w	r1, #0
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007210:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007214:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007218:	4688      	mov	r8, r1
 800721a:	4691      	mov	r9, r2
 800721c:	eb18 0005 	adds.w	r0, r8, r5
 8007220:	eb49 0106 	adc.w	r1, r9, r6
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	461d      	mov	r5, r3
 800722a:	f04f 0600 	mov.w	r6, #0
 800722e:	196b      	adds	r3, r5, r5
 8007230:	eb46 0406 	adc.w	r4, r6, r6
 8007234:	461a      	mov	r2, r3
 8007236:	4623      	mov	r3, r4
 8007238:	f7f9 fca0 	bl	8000b7c <__aeabi_uldivmod>
 800723c:	4603      	mov	r3, r0
 800723e:	460c      	mov	r4, r1
 8007240:	461a      	mov	r2, r3
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <UART_SetConfig+0x384>)
 8007244:	fba3 2302 	umull	r2, r3, r3, r2
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	461d      	mov	r5, r3
 8007252:	f04f 0600 	mov.w	r6, #0
 8007256:	46a9      	mov	r9, r5
 8007258:	46b2      	mov	sl, r6
 800725a:	eb19 0309 	adds.w	r3, r9, r9
 800725e:	eb4a 040a 	adc.w	r4, sl, sl
 8007262:	4699      	mov	r9, r3
 8007264:	46a2      	mov	sl, r4
 8007266:	eb19 0905 	adds.w	r9, r9, r5
 800726a:	eb4a 0a06 	adc.w	sl, sl, r6
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800727a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800727e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007282:	4689      	mov	r9, r1
 8007284:	4692      	mov	sl, r2
 8007286:	eb19 0005 	adds.w	r0, r9, r5
 800728a:	eb4a 0106 	adc.w	r1, sl, r6
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	461d      	mov	r5, r3
 8007294:	f04f 0600 	mov.w	r6, #0
 8007298:	196b      	adds	r3, r5, r5
 800729a:	eb46 0406 	adc.w	r4, r6, r6
 800729e:	461a      	mov	r2, r3
 80072a0:	4623      	mov	r3, r4
 80072a2:	f7f9 fc6b 	bl	8000b7c <__aeabi_uldivmod>
 80072a6:	4603      	mov	r3, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	461a      	mov	r2, r3
 80072ac:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <UART_SetConfig+0x384>)
 80072ae:	fba3 1302 	umull	r1, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2164      	movs	r1, #100	; 0x64
 80072b6:	fb01 f303 	mul.w	r3, r1, r3
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	3332      	adds	r3, #50	; 0x32
 80072c0:	4a27      	ldr	r2, [pc, #156]	; (8007360 <UART_SetConfig+0x384>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072ce:	4498      	add	r8, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	461d      	mov	r5, r3
 80072d4:	f04f 0600 	mov.w	r6, #0
 80072d8:	46a9      	mov	r9, r5
 80072da:	46b2      	mov	sl, r6
 80072dc:	eb19 0309 	adds.w	r3, r9, r9
 80072e0:	eb4a 040a 	adc.w	r4, sl, sl
 80072e4:	4699      	mov	r9, r3
 80072e6:	46a2      	mov	sl, r4
 80072e8:	eb19 0905 	adds.w	r9, r9, r5
 80072ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007304:	4689      	mov	r9, r1
 8007306:	4692      	mov	sl, r2
 8007308:	eb19 0005 	adds.w	r0, r9, r5
 800730c:	eb4a 0106 	adc.w	r1, sl, r6
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	461d      	mov	r5, r3
 8007316:	f04f 0600 	mov.w	r6, #0
 800731a:	196b      	adds	r3, r5, r5
 800731c:	eb46 0406 	adc.w	r4, r6, r6
 8007320:	461a      	mov	r2, r3
 8007322:	4623      	mov	r3, r4
 8007324:	f7f9 fc2a 	bl	8000b7c <__aeabi_uldivmod>
 8007328:	4603      	mov	r3, r0
 800732a:	460c      	mov	r4, r1
 800732c:	461a      	mov	r2, r3
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <UART_SetConfig+0x384>)
 8007330:	fba3 1302 	umull	r1, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	2164      	movs	r1, #100	; 0x64
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	3332      	adds	r3, #50	; 0x32
 8007342:	4a07      	ldr	r2, [pc, #28]	; (8007360 <UART_SetConfig+0x384>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	f003 0207 	and.w	r2, r3, #7
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4442      	add	r2, r8
 8007354:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007356:	e1b2      	b.n	80076be <UART_SetConfig+0x6e2>
 8007358:	40011000 	.word	0x40011000
 800735c:	40011400 	.word	0x40011400
 8007360:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4ad7      	ldr	r2, [pc, #860]	; (80076c8 <UART_SetConfig+0x6ec>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d005      	beq.n	800737a <UART_SetConfig+0x39e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4ad6      	ldr	r2, [pc, #856]	; (80076cc <UART_SetConfig+0x6f0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	f040 80d1 	bne.w	800751c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800737a:	f7fe f881 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 800737e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	469a      	mov	sl, r3
 8007384:	f04f 0b00 	mov.w	fp, #0
 8007388:	46d0      	mov	r8, sl
 800738a:	46d9      	mov	r9, fp
 800738c:	eb18 0308 	adds.w	r3, r8, r8
 8007390:	eb49 0409 	adc.w	r4, r9, r9
 8007394:	4698      	mov	r8, r3
 8007396:	46a1      	mov	r9, r4
 8007398:	eb18 080a 	adds.w	r8, r8, sl
 800739c:	eb49 090b 	adc.w	r9, r9, fp
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073b4:	4688      	mov	r8, r1
 80073b6:	4691      	mov	r9, r2
 80073b8:	eb1a 0508 	adds.w	r5, sl, r8
 80073bc:	eb4b 0609 	adc.w	r6, fp, r9
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	4619      	mov	r1, r3
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	f04f 0400 	mov.w	r4, #0
 80073d2:	0094      	lsls	r4, r2, #2
 80073d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073d8:	008b      	lsls	r3, r1, #2
 80073da:	461a      	mov	r2, r3
 80073dc:	4623      	mov	r3, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	4631      	mov	r1, r6
 80073e2:	f7f9 fbcb 	bl	8000b7c <__aeabi_uldivmod>
 80073e6:	4603      	mov	r3, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	461a      	mov	r2, r3
 80073ec:	4bb8      	ldr	r3, [pc, #736]	; (80076d0 <UART_SetConfig+0x6f4>)
 80073ee:	fba3 2302 	umull	r2, r3, r3, r2
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	469b      	mov	fp, r3
 80073fc:	f04f 0c00 	mov.w	ip, #0
 8007400:	46d9      	mov	r9, fp
 8007402:	46e2      	mov	sl, ip
 8007404:	eb19 0309 	adds.w	r3, r9, r9
 8007408:	eb4a 040a 	adc.w	r4, sl, sl
 800740c:	4699      	mov	r9, r3
 800740e:	46a2      	mov	sl, r4
 8007410:	eb19 090b 	adds.w	r9, r9, fp
 8007414:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007418:	f04f 0100 	mov.w	r1, #0
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800742c:	4689      	mov	r9, r1
 800742e:	4692      	mov	sl, r2
 8007430:	eb1b 0509 	adds.w	r5, fp, r9
 8007434:	eb4c 060a 	adc.w	r6, ip, sl
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4619      	mov	r1, r3
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	f04f 0400 	mov.w	r4, #0
 800744a:	0094      	lsls	r4, r2, #2
 800744c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	461a      	mov	r2, r3
 8007454:	4623      	mov	r3, r4
 8007456:	4628      	mov	r0, r5
 8007458:	4631      	mov	r1, r6
 800745a:	f7f9 fb8f 	bl	8000b7c <__aeabi_uldivmod>
 800745e:	4603      	mov	r3, r0
 8007460:	460c      	mov	r4, r1
 8007462:	461a      	mov	r2, r3
 8007464:	4b9a      	ldr	r3, [pc, #616]	; (80076d0 <UART_SetConfig+0x6f4>)
 8007466:	fba3 1302 	umull	r1, r3, r3, r2
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	2164      	movs	r1, #100	; 0x64
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	3332      	adds	r3, #50	; 0x32
 8007478:	4a95      	ldr	r2, [pc, #596]	; (80076d0 <UART_SetConfig+0x6f4>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007484:	4498      	add	r8, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	469b      	mov	fp, r3
 800748a:	f04f 0c00 	mov.w	ip, #0
 800748e:	46d9      	mov	r9, fp
 8007490:	46e2      	mov	sl, ip
 8007492:	eb19 0309 	adds.w	r3, r9, r9
 8007496:	eb4a 040a 	adc.w	r4, sl, sl
 800749a:	4699      	mov	r9, r3
 800749c:	46a2      	mov	sl, r4
 800749e:	eb19 090b 	adds.w	r9, r9, fp
 80074a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074a6:	f04f 0100 	mov.w	r1, #0
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074ba:	4689      	mov	r9, r1
 80074bc:	4692      	mov	sl, r2
 80074be:	eb1b 0509 	adds.w	r5, fp, r9
 80074c2:	eb4c 060a 	adc.w	r6, ip, sl
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	4619      	mov	r1, r3
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	f04f 0400 	mov.w	r4, #0
 80074d8:	0094      	lsls	r4, r2, #2
 80074da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074de:	008b      	lsls	r3, r1, #2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	4631      	mov	r1, r6
 80074e8:	f7f9 fb48 	bl	8000b7c <__aeabi_uldivmod>
 80074ec:	4603      	mov	r3, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	461a      	mov	r2, r3
 80074f2:	4b77      	ldr	r3, [pc, #476]	; (80076d0 <UART_SetConfig+0x6f4>)
 80074f4:	fba3 1302 	umull	r1, r3, r3, r2
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	2164      	movs	r1, #100	; 0x64
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	3332      	adds	r3, #50	; 0x32
 8007506:	4a72      	ldr	r2, [pc, #456]	; (80076d0 <UART_SetConfig+0x6f4>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	f003 020f 	and.w	r2, r3, #15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4442      	add	r2, r8
 8007518:	609a      	str	r2, [r3, #8]
 800751a:	e0d0      	b.n	80076be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800751c:	f7fd ff9c 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 8007520:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	469a      	mov	sl, r3
 8007526:	f04f 0b00 	mov.w	fp, #0
 800752a:	46d0      	mov	r8, sl
 800752c:	46d9      	mov	r9, fp
 800752e:	eb18 0308 	adds.w	r3, r8, r8
 8007532:	eb49 0409 	adc.w	r4, r9, r9
 8007536:	4698      	mov	r8, r3
 8007538:	46a1      	mov	r9, r4
 800753a:	eb18 080a 	adds.w	r8, r8, sl
 800753e:	eb49 090b 	adc.w	r9, r9, fp
 8007542:	f04f 0100 	mov.w	r1, #0
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800754e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007552:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007556:	4688      	mov	r8, r1
 8007558:	4691      	mov	r9, r2
 800755a:	eb1a 0508 	adds.w	r5, sl, r8
 800755e:	eb4b 0609 	adc.w	r6, fp, r9
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4619      	mov	r1, r3
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	f04f 0400 	mov.w	r4, #0
 8007574:	0094      	lsls	r4, r2, #2
 8007576:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800757a:	008b      	lsls	r3, r1, #2
 800757c:	461a      	mov	r2, r3
 800757e:	4623      	mov	r3, r4
 8007580:	4628      	mov	r0, r5
 8007582:	4631      	mov	r1, r6
 8007584:	f7f9 fafa 	bl	8000b7c <__aeabi_uldivmod>
 8007588:	4603      	mov	r3, r0
 800758a:	460c      	mov	r4, r1
 800758c:	461a      	mov	r2, r3
 800758e:	4b50      	ldr	r3, [pc, #320]	; (80076d0 <UART_SetConfig+0x6f4>)
 8007590:	fba3 2302 	umull	r2, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	469b      	mov	fp, r3
 800759e:	f04f 0c00 	mov.w	ip, #0
 80075a2:	46d9      	mov	r9, fp
 80075a4:	46e2      	mov	sl, ip
 80075a6:	eb19 0309 	adds.w	r3, r9, r9
 80075aa:	eb4a 040a 	adc.w	r4, sl, sl
 80075ae:	4699      	mov	r9, r3
 80075b0:	46a2      	mov	sl, r4
 80075b2:	eb19 090b 	adds.w	r9, r9, fp
 80075b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075ba:	f04f 0100 	mov.w	r1, #0
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075ce:	4689      	mov	r9, r1
 80075d0:	4692      	mov	sl, r2
 80075d2:	eb1b 0509 	adds.w	r5, fp, r9
 80075d6:	eb4c 060a 	adc.w	r6, ip, sl
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4619      	mov	r1, r3
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	f04f 0400 	mov.w	r4, #0
 80075ec:	0094      	lsls	r4, r2, #2
 80075ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075f2:	008b      	lsls	r3, r1, #2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	4631      	mov	r1, r6
 80075fc:	f7f9 fabe 	bl	8000b7c <__aeabi_uldivmod>
 8007600:	4603      	mov	r3, r0
 8007602:	460c      	mov	r4, r1
 8007604:	461a      	mov	r2, r3
 8007606:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <UART_SetConfig+0x6f4>)
 8007608:	fba3 1302 	umull	r1, r3, r3, r2
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	2164      	movs	r1, #100	; 0x64
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	3332      	adds	r3, #50	; 0x32
 800761a:	4a2d      	ldr	r2, [pc, #180]	; (80076d0 <UART_SetConfig+0x6f4>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007626:	4498      	add	r8, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	469b      	mov	fp, r3
 800762c:	f04f 0c00 	mov.w	ip, #0
 8007630:	46d9      	mov	r9, fp
 8007632:	46e2      	mov	sl, ip
 8007634:	eb19 0309 	adds.w	r3, r9, r9
 8007638:	eb4a 040a 	adc.w	r4, sl, sl
 800763c:	4699      	mov	r9, r3
 800763e:	46a2      	mov	sl, r4
 8007640:	eb19 090b 	adds.w	r9, r9, fp
 8007644:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800765c:	4689      	mov	r9, r1
 800765e:	4692      	mov	sl, r2
 8007660:	eb1b 0509 	adds.w	r5, fp, r9
 8007664:	eb4c 060a 	adc.w	r6, ip, sl
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4619      	mov	r1, r3
 800766e:	f04f 0200 	mov.w	r2, #0
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	f04f 0400 	mov.w	r4, #0
 800767a:	0094      	lsls	r4, r2, #2
 800767c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007680:	008b      	lsls	r3, r1, #2
 8007682:	461a      	mov	r2, r3
 8007684:	4623      	mov	r3, r4
 8007686:	4628      	mov	r0, r5
 8007688:	4631      	mov	r1, r6
 800768a:	f7f9 fa77 	bl	8000b7c <__aeabi_uldivmod>
 800768e:	4603      	mov	r3, r0
 8007690:	460c      	mov	r4, r1
 8007692:	461a      	mov	r2, r3
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <UART_SetConfig+0x6f4>)
 8007696:	fba3 1302 	umull	r1, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2164      	movs	r1, #100	; 0x64
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	3332      	adds	r3, #50	; 0x32
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <UART_SetConfig+0x6f4>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4442      	add	r2, r8
 80076ba:	609a      	str	r2, [r3, #8]
}
 80076bc:	e7ff      	b.n	80076be <UART_SetConfig+0x6e2>
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	40011000 	.word	0x40011000
 80076cc:	40011400 	.word	0x40011400
 80076d0:	51eb851f 	.word	0x51eb851f

080076d4 <__errno>:
 80076d4:	4b01      	ldr	r3, [pc, #4]	; (80076dc <__errno+0x8>)
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000060 	.word	0x20000060

080076e0 <__libc_init_array>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	4e0d      	ldr	r6, [pc, #52]	; (8007718 <__libc_init_array+0x38>)
 80076e4:	4c0d      	ldr	r4, [pc, #52]	; (800771c <__libc_init_array+0x3c>)
 80076e6:	1ba4      	subs	r4, r4, r6
 80076e8:	10a4      	asrs	r4, r4, #2
 80076ea:	2500      	movs	r5, #0
 80076ec:	42a5      	cmp	r5, r4
 80076ee:	d109      	bne.n	8007704 <__libc_init_array+0x24>
 80076f0:	4e0b      	ldr	r6, [pc, #44]	; (8007720 <__libc_init_array+0x40>)
 80076f2:	4c0c      	ldr	r4, [pc, #48]	; (8007724 <__libc_init_array+0x44>)
 80076f4:	f001 f942 	bl	800897c <_init>
 80076f8:	1ba4      	subs	r4, r4, r6
 80076fa:	10a4      	asrs	r4, r4, #2
 80076fc:	2500      	movs	r5, #0
 80076fe:	42a5      	cmp	r5, r4
 8007700:	d105      	bne.n	800770e <__libc_init_array+0x2e>
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007708:	4798      	blx	r3
 800770a:	3501      	adds	r5, #1
 800770c:	e7ee      	b.n	80076ec <__libc_init_array+0xc>
 800770e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007712:	4798      	blx	r3
 8007714:	3501      	adds	r5, #1
 8007716:	e7f2      	b.n	80076fe <__libc_init_array+0x1e>
 8007718:	080093d8 	.word	0x080093d8
 800771c:	080093d8 	.word	0x080093d8
 8007720:	080093d8 	.word	0x080093d8
 8007724:	080093dc 	.word	0x080093dc

08007728 <memcpy>:
 8007728:	b510      	push	{r4, lr}
 800772a:	1e43      	subs	r3, r0, #1
 800772c:	440a      	add	r2, r1
 800772e:	4291      	cmp	r1, r2
 8007730:	d100      	bne.n	8007734 <memcpy+0xc>
 8007732:	bd10      	pop	{r4, pc}
 8007734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800773c:	e7f7      	b.n	800772e <memcpy+0x6>

0800773e <memset>:
 800773e:	4402      	add	r2, r0
 8007740:	4603      	mov	r3, r0
 8007742:	4293      	cmp	r3, r2
 8007744:	d100      	bne.n	8007748 <memset+0xa>
 8007746:	4770      	bx	lr
 8007748:	f803 1b01 	strb.w	r1, [r3], #1
 800774c:	e7f9      	b.n	8007742 <memset+0x4>
	...

08007750 <iprintf>:
 8007750:	b40f      	push	{r0, r1, r2, r3}
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <iprintf+0x2c>)
 8007754:	b513      	push	{r0, r1, r4, lr}
 8007756:	681c      	ldr	r4, [r3, #0]
 8007758:	b124      	cbz	r4, 8007764 <iprintf+0x14>
 800775a:	69a3      	ldr	r3, [r4, #24]
 800775c:	b913      	cbnz	r3, 8007764 <iprintf+0x14>
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fa56 	bl	8007c10 <__sinit>
 8007764:	ab05      	add	r3, sp, #20
 8007766:	9a04      	ldr	r2, [sp, #16]
 8007768:	68a1      	ldr	r1, [r4, #8]
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	4620      	mov	r0, r4
 800776e:	f000 fd61 	bl	8008234 <_vfiprintf_r>
 8007772:	b002      	add	sp, #8
 8007774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007778:	b004      	add	sp, #16
 800777a:	4770      	bx	lr
 800777c:	20000060 	.word	0x20000060

08007780 <_puts_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	460e      	mov	r6, r1
 8007784:	4605      	mov	r5, r0
 8007786:	b118      	cbz	r0, 8007790 <_puts_r+0x10>
 8007788:	6983      	ldr	r3, [r0, #24]
 800778a:	b90b      	cbnz	r3, 8007790 <_puts_r+0x10>
 800778c:	f000 fa40 	bl	8007c10 <__sinit>
 8007790:	69ab      	ldr	r3, [r5, #24]
 8007792:	68ac      	ldr	r4, [r5, #8]
 8007794:	b913      	cbnz	r3, 800779c <_puts_r+0x1c>
 8007796:	4628      	mov	r0, r5
 8007798:	f000 fa3a 	bl	8007c10 <__sinit>
 800779c:	4b23      	ldr	r3, [pc, #140]	; (800782c <_puts_r+0xac>)
 800779e:	429c      	cmp	r4, r3
 80077a0:	d117      	bne.n	80077d2 <_puts_r+0x52>
 80077a2:	686c      	ldr	r4, [r5, #4]
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	071b      	lsls	r3, r3, #28
 80077a8:	d51d      	bpl.n	80077e6 <_puts_r+0x66>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	b1db      	cbz	r3, 80077e6 <_puts_r+0x66>
 80077ae:	3e01      	subs	r6, #1
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077b6:	3b01      	subs	r3, #1
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	b9e9      	cbnz	r1, 80077f8 <_puts_r+0x78>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da2e      	bge.n	800781e <_puts_r+0x9e>
 80077c0:	4622      	mov	r2, r4
 80077c2:	210a      	movs	r1, #10
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 f873 	bl	80078b0 <__swbuf_r>
 80077ca:	3001      	adds	r0, #1
 80077cc:	d011      	beq.n	80077f2 <_puts_r+0x72>
 80077ce:	200a      	movs	r0, #10
 80077d0:	e011      	b.n	80077f6 <_puts_r+0x76>
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <_puts_r+0xb0>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d101      	bne.n	80077dc <_puts_r+0x5c>
 80077d8:	68ac      	ldr	r4, [r5, #8]
 80077da:	e7e3      	b.n	80077a4 <_puts_r+0x24>
 80077dc:	4b15      	ldr	r3, [pc, #84]	; (8007834 <_puts_r+0xb4>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	bf08      	it	eq
 80077e2:	68ec      	ldreq	r4, [r5, #12]
 80077e4:	e7de      	b.n	80077a4 <_puts_r+0x24>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f8b3 	bl	8007954 <__swsetup_r>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0dd      	beq.n	80077ae <_puts_r+0x2e>
 80077f2:	f04f 30ff 	mov.w	r0, #4294967295
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da04      	bge.n	8007806 <_puts_r+0x86>
 80077fc:	69a2      	ldr	r2, [r4, #24]
 80077fe:	429a      	cmp	r2, r3
 8007800:	dc06      	bgt.n	8007810 <_puts_r+0x90>
 8007802:	290a      	cmp	r1, #10
 8007804:	d004      	beq.n	8007810 <_puts_r+0x90>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	6022      	str	r2, [r4, #0]
 800780c:	7019      	strb	r1, [r3, #0]
 800780e:	e7cf      	b.n	80077b0 <_puts_r+0x30>
 8007810:	4622      	mov	r2, r4
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f84c 	bl	80078b0 <__swbuf_r>
 8007818:	3001      	adds	r0, #1
 800781a:	d1c9      	bne.n	80077b0 <_puts_r+0x30>
 800781c:	e7e9      	b.n	80077f2 <_puts_r+0x72>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	200a      	movs	r0, #10
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	6022      	str	r2, [r4, #0]
 8007826:	7018      	strb	r0, [r3, #0]
 8007828:	e7e5      	b.n	80077f6 <_puts_r+0x76>
 800782a:	bf00      	nop
 800782c:	0800935c 	.word	0x0800935c
 8007830:	0800937c 	.word	0x0800937c
 8007834:	0800933c 	.word	0x0800933c

08007838 <puts>:
 8007838:	4b02      	ldr	r3, [pc, #8]	; (8007844 <puts+0xc>)
 800783a:	4601      	mov	r1, r0
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	f7ff bf9f 	b.w	8007780 <_puts_r>
 8007842:	bf00      	nop
 8007844:	20000060 	.word	0x20000060

08007848 <sniprintf>:
 8007848:	b40c      	push	{r2, r3}
 800784a:	b530      	push	{r4, r5, lr}
 800784c:	4b17      	ldr	r3, [pc, #92]	; (80078ac <sniprintf+0x64>)
 800784e:	1e0c      	subs	r4, r1, #0
 8007850:	b09d      	sub	sp, #116	; 0x74
 8007852:	681d      	ldr	r5, [r3, #0]
 8007854:	da08      	bge.n	8007868 <sniprintf+0x20>
 8007856:	238b      	movs	r3, #139	; 0x8b
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	b01d      	add	sp, #116	; 0x74
 8007860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007864:	b002      	add	sp, #8
 8007866:	4770      	bx	lr
 8007868:	f44f 7302 	mov.w	r3, #520	; 0x208
 800786c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007870:	bf14      	ite	ne
 8007872:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007876:	4623      	moveq	r3, r4
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	9307      	str	r3, [sp, #28]
 800787c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007880:	9002      	str	r0, [sp, #8]
 8007882:	9006      	str	r0, [sp, #24]
 8007884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007888:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800788a:	ab21      	add	r3, sp, #132	; 0x84
 800788c:	a902      	add	r1, sp, #8
 800788e:	4628      	mov	r0, r5
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	f000 fbad 	bl	8007ff0 <_svfiprintf_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	bfbc      	itt	lt
 800789a:	238b      	movlt	r3, #139	; 0x8b
 800789c:	602b      	strlt	r3, [r5, #0]
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d0dd      	beq.n	800785e <sniprintf+0x16>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e7d9      	b.n	800785e <sniprintf+0x16>
 80078aa:	bf00      	nop
 80078ac:	20000060 	.word	0x20000060

080078b0 <__swbuf_r>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	4614      	mov	r4, r2
 80078b6:	4605      	mov	r5, r0
 80078b8:	b118      	cbz	r0, 80078c2 <__swbuf_r+0x12>
 80078ba:	6983      	ldr	r3, [r0, #24]
 80078bc:	b90b      	cbnz	r3, 80078c2 <__swbuf_r+0x12>
 80078be:	f000 f9a7 	bl	8007c10 <__sinit>
 80078c2:	4b21      	ldr	r3, [pc, #132]	; (8007948 <__swbuf_r+0x98>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d12a      	bne.n	800791e <__swbuf_r+0x6e>
 80078c8:	686c      	ldr	r4, [r5, #4]
 80078ca:	69a3      	ldr	r3, [r4, #24]
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	071a      	lsls	r2, r3, #28
 80078d2:	d52e      	bpl.n	8007932 <__swbuf_r+0x82>
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	b363      	cbz	r3, 8007932 <__swbuf_r+0x82>
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	6820      	ldr	r0, [r4, #0]
 80078dc:	1ac0      	subs	r0, r0, r3
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	b2f6      	uxtb	r6, r6
 80078e2:	4283      	cmp	r3, r0
 80078e4:	4637      	mov	r7, r6
 80078e6:	dc04      	bgt.n	80078f2 <__swbuf_r+0x42>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f926 	bl	8007b3c <_fflush_r>
 80078f0:	bb28      	cbnz	r0, 800793e <__swbuf_r+0x8e>
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	701e      	strb	r6, [r3, #0]
 8007900:	6963      	ldr	r3, [r4, #20]
 8007902:	3001      	adds	r0, #1
 8007904:	4283      	cmp	r3, r0
 8007906:	d004      	beq.n	8007912 <__swbuf_r+0x62>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	07db      	lsls	r3, r3, #31
 800790c:	d519      	bpl.n	8007942 <__swbuf_r+0x92>
 800790e:	2e0a      	cmp	r6, #10
 8007910:	d117      	bne.n	8007942 <__swbuf_r+0x92>
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f000 f911 	bl	8007b3c <_fflush_r>
 800791a:	b190      	cbz	r0, 8007942 <__swbuf_r+0x92>
 800791c:	e00f      	b.n	800793e <__swbuf_r+0x8e>
 800791e:	4b0b      	ldr	r3, [pc, #44]	; (800794c <__swbuf_r+0x9c>)
 8007920:	429c      	cmp	r4, r3
 8007922:	d101      	bne.n	8007928 <__swbuf_r+0x78>
 8007924:	68ac      	ldr	r4, [r5, #8]
 8007926:	e7d0      	b.n	80078ca <__swbuf_r+0x1a>
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <__swbuf_r+0xa0>)
 800792a:	429c      	cmp	r4, r3
 800792c:	bf08      	it	eq
 800792e:	68ec      	ldreq	r4, [r5, #12]
 8007930:	e7cb      	b.n	80078ca <__swbuf_r+0x1a>
 8007932:	4621      	mov	r1, r4
 8007934:	4628      	mov	r0, r5
 8007936:	f000 f80d 	bl	8007954 <__swsetup_r>
 800793a:	2800      	cmp	r0, #0
 800793c:	d0cc      	beq.n	80078d8 <__swbuf_r+0x28>
 800793e:	f04f 37ff 	mov.w	r7, #4294967295
 8007942:	4638      	mov	r0, r7
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007946:	bf00      	nop
 8007948:	0800935c 	.word	0x0800935c
 800794c:	0800937c 	.word	0x0800937c
 8007950:	0800933c 	.word	0x0800933c

08007954 <__swsetup_r>:
 8007954:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <__swsetup_r+0xcc>)
 8007956:	b570      	push	{r4, r5, r6, lr}
 8007958:	681d      	ldr	r5, [r3, #0]
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	b125      	cbz	r5, 800796a <__swsetup_r+0x16>
 8007960:	69ab      	ldr	r3, [r5, #24]
 8007962:	b913      	cbnz	r3, 800796a <__swsetup_r+0x16>
 8007964:	4628      	mov	r0, r5
 8007966:	f000 f953 	bl	8007c10 <__sinit>
 800796a:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <__swsetup_r+0xd0>)
 800796c:	429c      	cmp	r4, r3
 800796e:	d10f      	bne.n	8007990 <__swsetup_r+0x3c>
 8007970:	686c      	ldr	r4, [r5, #4]
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	b29a      	uxth	r2, r3
 8007978:	0715      	lsls	r5, r2, #28
 800797a:	d42c      	bmi.n	80079d6 <__swsetup_r+0x82>
 800797c:	06d0      	lsls	r0, r2, #27
 800797e:	d411      	bmi.n	80079a4 <__swsetup_r+0x50>
 8007980:	2209      	movs	r2, #9
 8007982:	6032      	str	r2, [r6, #0]
 8007984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	f04f 30ff 	mov.w	r0, #4294967295
 800798e:	e03e      	b.n	8007a0e <__swsetup_r+0xba>
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <__swsetup_r+0xd4>)
 8007992:	429c      	cmp	r4, r3
 8007994:	d101      	bne.n	800799a <__swsetup_r+0x46>
 8007996:	68ac      	ldr	r4, [r5, #8]
 8007998:	e7eb      	b.n	8007972 <__swsetup_r+0x1e>
 800799a:	4b24      	ldr	r3, [pc, #144]	; (8007a2c <__swsetup_r+0xd8>)
 800799c:	429c      	cmp	r4, r3
 800799e:	bf08      	it	eq
 80079a0:	68ec      	ldreq	r4, [r5, #12]
 80079a2:	e7e6      	b.n	8007972 <__swsetup_r+0x1e>
 80079a4:	0751      	lsls	r1, r2, #29
 80079a6:	d512      	bpl.n	80079ce <__swsetup_r+0x7a>
 80079a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079aa:	b141      	cbz	r1, 80079be <__swsetup_r+0x6a>
 80079ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <__swsetup_r+0x66>
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 fa19 	bl	8007dec <_free_r>
 80079ba:	2300      	movs	r3, #0
 80079bc:	6363      	str	r3, [r4, #52]	; 0x34
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6063      	str	r3, [r4, #4]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f043 0308 	orr.w	r3, r3, #8
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	b94b      	cbnz	r3, 80079ee <__swsetup_r+0x9a>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e4:	d003      	beq.n	80079ee <__swsetup_r+0x9a>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f9bf 	bl	8007d6c <__smakebuf_r>
 80079ee:	89a2      	ldrh	r2, [r4, #12]
 80079f0:	f012 0301 	ands.w	r3, r2, #1
 80079f4:	d00c      	beq.n	8007a10 <__swsetup_r+0xbc>
 80079f6:	2300      	movs	r3, #0
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	6963      	ldr	r3, [r4, #20]
 80079fc:	425b      	negs	r3, r3
 80079fe:	61a3      	str	r3, [r4, #24]
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	b953      	cbnz	r3, 8007a1a <__swsetup_r+0xc6>
 8007a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a0c:	d1ba      	bne.n	8007984 <__swsetup_r+0x30>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	0792      	lsls	r2, r2, #30
 8007a12:	bf58      	it	pl
 8007a14:	6963      	ldrpl	r3, [r4, #20]
 8007a16:	60a3      	str	r3, [r4, #8]
 8007a18:	e7f2      	b.n	8007a00 <__swsetup_r+0xac>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e7f7      	b.n	8007a0e <__swsetup_r+0xba>
 8007a1e:	bf00      	nop
 8007a20:	20000060 	.word	0x20000060
 8007a24:	0800935c 	.word	0x0800935c
 8007a28:	0800937c 	.word	0x0800937c
 8007a2c:	0800933c 	.word	0x0800933c

08007a30 <__sflush_r>:
 8007a30:	898a      	ldrh	r2, [r1, #12]
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4605      	mov	r5, r0
 8007a38:	0710      	lsls	r0, r2, #28
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	d458      	bmi.n	8007af0 <__sflush_r+0xc0>
 8007a3e:	684b      	ldr	r3, [r1, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dc05      	bgt.n	8007a50 <__sflush_r+0x20>
 8007a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dc02      	bgt.n	8007a50 <__sflush_r+0x20>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d0f9      	beq.n	8007a4a <__sflush_r+0x1a>
 8007a56:	2300      	movs	r3, #0
 8007a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a5c:	682f      	ldr	r7, [r5, #0]
 8007a5e:	6a21      	ldr	r1, [r4, #32]
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	d032      	beq.n	8007aca <__sflush_r+0x9a>
 8007a64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	075a      	lsls	r2, r3, #29
 8007a6a:	d505      	bpl.n	8007a78 <__sflush_r+0x48>
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	1ac0      	subs	r0, r0, r3
 8007a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a72:	b10b      	cbz	r3, 8007a78 <__sflush_r+0x48>
 8007a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a76:	1ac0      	subs	r0, r0, r3
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	6a21      	ldr	r1, [r4, #32]
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b0      	blx	r6
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	d106      	bne.n	8007a98 <__sflush_r+0x68>
 8007a8a:	6829      	ldr	r1, [r5, #0]
 8007a8c:	291d      	cmp	r1, #29
 8007a8e:	d848      	bhi.n	8007b22 <__sflush_r+0xf2>
 8007a90:	4a29      	ldr	r2, [pc, #164]	; (8007b38 <__sflush_r+0x108>)
 8007a92:	40ca      	lsrs	r2, r1
 8007a94:	07d6      	lsls	r6, r2, #31
 8007a96:	d544      	bpl.n	8007b22 <__sflush_r+0xf2>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6062      	str	r2, [r4, #4]
 8007a9c:	04d9      	lsls	r1, r3, #19
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	d504      	bpl.n	8007aae <__sflush_r+0x7e>
 8007aa4:	1c42      	adds	r2, r0, #1
 8007aa6:	d101      	bne.n	8007aac <__sflush_r+0x7c>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b903      	cbnz	r3, 8007aae <__sflush_r+0x7e>
 8007aac:	6560      	str	r0, [r4, #84]	; 0x54
 8007aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab0:	602f      	str	r7, [r5, #0]
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d0c9      	beq.n	8007a4a <__sflush_r+0x1a>
 8007ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aba:	4299      	cmp	r1, r3
 8007abc:	d002      	beq.n	8007ac4 <__sflush_r+0x94>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f994 	bl	8007dec <_free_r>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	6360      	str	r0, [r4, #52]	; 0x34
 8007ac8:	e7c0      	b.n	8007a4c <__sflush_r+0x1c>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b0      	blx	r6
 8007ad0:	1c41      	adds	r1, r0, #1
 8007ad2:	d1c8      	bne.n	8007a66 <__sflush_r+0x36>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0c5      	beq.n	8007a66 <__sflush_r+0x36>
 8007ada:	2b1d      	cmp	r3, #29
 8007adc:	d001      	beq.n	8007ae2 <__sflush_r+0xb2>
 8007ade:	2b16      	cmp	r3, #22
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0xb6>
 8007ae2:	602f      	str	r7, [r5, #0]
 8007ae4:	e7b1      	b.n	8007a4a <__sflush_r+0x1a>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	e7ad      	b.n	8007a4c <__sflush_r+0x1c>
 8007af0:	690f      	ldr	r7, [r1, #16]
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	d0a9      	beq.n	8007a4a <__sflush_r+0x1a>
 8007af6:	0793      	lsls	r3, r2, #30
 8007af8:	680e      	ldr	r6, [r1, #0]
 8007afa:	bf08      	it	eq
 8007afc:	694b      	ldreq	r3, [r1, #20]
 8007afe:	600f      	str	r7, [r1, #0]
 8007b00:	bf18      	it	ne
 8007b02:	2300      	movne	r3, #0
 8007b04:	eba6 0807 	sub.w	r8, r6, r7
 8007b08:	608b      	str	r3, [r1, #8]
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	dd9c      	ble.n	8007a4a <__sflush_r+0x1a>
 8007b10:	4643      	mov	r3, r8
 8007b12:	463a      	mov	r2, r7
 8007b14:	6a21      	ldr	r1, [r4, #32]
 8007b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b0      	blx	r6
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc06      	bgt.n	8007b2e <__sflush_r+0xfe>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e78e      	b.n	8007a4c <__sflush_r+0x1c>
 8007b2e:	4407      	add	r7, r0
 8007b30:	eba8 0800 	sub.w	r8, r8, r0
 8007b34:	e7e9      	b.n	8007b0a <__sflush_r+0xda>
 8007b36:	bf00      	nop
 8007b38:	20400001 	.word	0x20400001

08007b3c <_fflush_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	4605      	mov	r5, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	b1db      	cbz	r3, 8007b7e <_fflush_r+0x42>
 8007b46:	b118      	cbz	r0, 8007b50 <_fflush_r+0x14>
 8007b48:	6983      	ldr	r3, [r0, #24]
 8007b4a:	b90b      	cbnz	r3, 8007b50 <_fflush_r+0x14>
 8007b4c:	f000 f860 	bl	8007c10 <__sinit>
 8007b50:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <_fflush_r+0x48>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d109      	bne.n	8007b6a <_fflush_r+0x2e>
 8007b56:	686c      	ldr	r4, [r5, #4]
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	b17b      	cbz	r3, 8007b7e <_fflush_r+0x42>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4628      	mov	r0, r5
 8007b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b66:	f7ff bf63 	b.w	8007a30 <__sflush_r>
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <_fflush_r+0x4c>)
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	d101      	bne.n	8007b74 <_fflush_r+0x38>
 8007b70:	68ac      	ldr	r4, [r5, #8]
 8007b72:	e7f1      	b.n	8007b58 <_fflush_r+0x1c>
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <_fflush_r+0x50>)
 8007b76:	429c      	cmp	r4, r3
 8007b78:	bf08      	it	eq
 8007b7a:	68ec      	ldreq	r4, [r5, #12]
 8007b7c:	e7ec      	b.n	8007b58 <_fflush_r+0x1c>
 8007b7e:	2000      	movs	r0, #0
 8007b80:	bd38      	pop	{r3, r4, r5, pc}
 8007b82:	bf00      	nop
 8007b84:	0800935c 	.word	0x0800935c
 8007b88:	0800937c 	.word	0x0800937c
 8007b8c:	0800933c 	.word	0x0800933c

08007b90 <std>:
 8007b90:	2300      	movs	r3, #0
 8007b92:	b510      	push	{r4, lr}
 8007b94:	4604      	mov	r4, r0
 8007b96:	e9c0 3300 	strd	r3, r3, [r0]
 8007b9a:	6083      	str	r3, [r0, #8]
 8007b9c:	8181      	strh	r1, [r0, #12]
 8007b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba0:	81c2      	strh	r2, [r0, #14]
 8007ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ba6:	6183      	str	r3, [r0, #24]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2208      	movs	r2, #8
 8007bac:	305c      	adds	r0, #92	; 0x5c
 8007bae:	f7ff fdc6 	bl	800773e <memset>
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <std+0x38>)
 8007bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <std+0x3c>)
 8007bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <std+0x40>)
 8007bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <std+0x44>)
 8007bc0:	6224      	str	r4, [r4, #32]
 8007bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08008791 	.word	0x08008791
 8007bcc:	080087b3 	.word	0x080087b3
 8007bd0:	080087eb 	.word	0x080087eb
 8007bd4:	0800880f 	.word	0x0800880f

08007bd8 <_cleanup_r>:
 8007bd8:	4901      	ldr	r1, [pc, #4]	; (8007be0 <_cleanup_r+0x8>)
 8007bda:	f000 b885 	b.w	8007ce8 <_fwalk_reent>
 8007bde:	bf00      	nop
 8007be0:	08007b3d 	.word	0x08007b3d

08007be4 <__sfmoreglue>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	1e4a      	subs	r2, r1, #1
 8007be8:	2568      	movs	r5, #104	; 0x68
 8007bea:	4355      	muls	r5, r2
 8007bec:	460e      	mov	r6, r1
 8007bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bf2:	f000 f949 	bl	8007e88 <_malloc_r>
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	b140      	cbz	r0, 8007c0c <__sfmoreglue+0x28>
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8007c00:	300c      	adds	r0, #12
 8007c02:	60a0      	str	r0, [r4, #8]
 8007c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c08:	f7ff fd99 	bl	800773e <memset>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}

08007c10 <__sinit>:
 8007c10:	6983      	ldr	r3, [r0, #24]
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	bb33      	cbnz	r3, 8007c66 <__sinit+0x56>
 8007c18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007c1c:	6503      	str	r3, [r0, #80]	; 0x50
 8007c1e:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <__sinit+0x58>)
 8007c20:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <__sinit+0x5c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6282      	str	r2, [r0, #40]	; 0x28
 8007c26:	4298      	cmp	r0, r3
 8007c28:	bf04      	itt	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	6183      	streq	r3, [r0, #24]
 8007c2e:	f000 f81f 	bl	8007c70 <__sfp>
 8007c32:	6060      	str	r0, [r4, #4]
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f81b 	bl	8007c70 <__sfp>
 8007c3a:	60a0      	str	r0, [r4, #8]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 f817 	bl	8007c70 <__sfp>
 8007c42:	2200      	movs	r2, #0
 8007c44:	60e0      	str	r0, [r4, #12]
 8007c46:	2104      	movs	r1, #4
 8007c48:	6860      	ldr	r0, [r4, #4]
 8007c4a:	f7ff ffa1 	bl	8007b90 <std>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	2109      	movs	r1, #9
 8007c52:	68a0      	ldr	r0, [r4, #8]
 8007c54:	f7ff ff9c 	bl	8007b90 <std>
 8007c58:	2202      	movs	r2, #2
 8007c5a:	2112      	movs	r1, #18
 8007c5c:	68e0      	ldr	r0, [r4, #12]
 8007c5e:	f7ff ff97 	bl	8007b90 <std>
 8007c62:	2301      	movs	r3, #1
 8007c64:	61a3      	str	r3, [r4, #24]
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	08009338 	.word	0x08009338
 8007c6c:	08007bd9 	.word	0x08007bd9

08007c70 <__sfp>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	4b1b      	ldr	r3, [pc, #108]	; (8007ce0 <__sfp+0x70>)
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	69b3      	ldr	r3, [r6, #24]
 8007c78:	4607      	mov	r7, r0
 8007c7a:	b913      	cbnz	r3, 8007c82 <__sfp+0x12>
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff ffc7 	bl	8007c10 <__sinit>
 8007c82:	3648      	adds	r6, #72	; 0x48
 8007c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	d503      	bpl.n	8007c94 <__sfp+0x24>
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	b133      	cbz	r3, 8007c9e <__sfp+0x2e>
 8007c90:	6836      	ldr	r6, [r6, #0]
 8007c92:	e7f7      	b.n	8007c84 <__sfp+0x14>
 8007c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c98:	b16d      	cbz	r5, 8007cb6 <__sfp+0x46>
 8007c9a:	3468      	adds	r4, #104	; 0x68
 8007c9c:	e7f4      	b.n	8007c88 <__sfp+0x18>
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff ff9f 	bl	8007be4 <__sfmoreglue>
 8007ca6:	6030      	str	r0, [r6, #0]
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1f1      	bne.n	8007c90 <__sfp+0x20>
 8007cac:	230c      	movs	r3, #12
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <__sfp+0x74>)
 8007cb8:	6665      	str	r5, [r4, #100]	; 0x64
 8007cba:	e9c4 5500 	strd	r5, r5, [r4]
 8007cbe:	60a5      	str	r5, [r4, #8]
 8007cc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007cc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7ff fd35 	bl	800773e <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	e7e9      	b.n	8007cb2 <__sfp+0x42>
 8007cde:	bf00      	nop
 8007ce0:	08009338 	.word	0x08009338
 8007ce4:	ffff0001 	.word	0xffff0001

08007ce8 <_fwalk_reent>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	b914      	cbnz	r4, 8007cfe <_fwalk_reent+0x16>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007d02:	3f01      	subs	r7, #1
 8007d04:	d501      	bpl.n	8007d0a <_fwalk_reent+0x22>
 8007d06:	6824      	ldr	r4, [r4, #0]
 8007d08:	e7f5      	b.n	8007cf6 <_fwalk_reent+0xe>
 8007d0a:	89ab      	ldrh	r3, [r5, #12]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d907      	bls.n	8007d20 <_fwalk_reent+0x38>
 8007d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d14:	3301      	adds	r3, #1
 8007d16:	d003      	beq.n	8007d20 <_fwalk_reent+0x38>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	47c8      	blx	r9
 8007d1e:	4306      	orrs	r6, r0
 8007d20:	3568      	adds	r5, #104	; 0x68
 8007d22:	e7ee      	b.n	8007d02 <_fwalk_reent+0x1a>

08007d24 <__swhatbuf_r>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	460e      	mov	r6, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	b096      	sub	sp, #88	; 0x58
 8007d30:	4614      	mov	r4, r2
 8007d32:	461d      	mov	r5, r3
 8007d34:	da07      	bge.n	8007d46 <__swhatbuf_r+0x22>
 8007d36:	2300      	movs	r3, #0
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	89b3      	ldrh	r3, [r6, #12]
 8007d3c:	061a      	lsls	r2, r3, #24
 8007d3e:	d410      	bmi.n	8007d62 <__swhatbuf_r+0x3e>
 8007d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d44:	e00e      	b.n	8007d64 <__swhatbuf_r+0x40>
 8007d46:	466a      	mov	r2, sp
 8007d48:	f000 fd88 	bl	800885c <_fstat_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	dbf2      	blt.n	8007d36 <__swhatbuf_r+0x12>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d5a:	425a      	negs	r2, r3
 8007d5c:	415a      	adcs	r2, r3
 8007d5e:	602a      	str	r2, [r5, #0]
 8007d60:	e7ee      	b.n	8007d40 <__swhatbuf_r+0x1c>
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	2000      	movs	r0, #0
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	b016      	add	sp, #88	; 0x58
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}

08007d6c <__smakebuf_r>:
 8007d6c:	898b      	ldrh	r3, [r1, #12]
 8007d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d70:	079d      	lsls	r5, r3, #30
 8007d72:	4606      	mov	r6, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	d507      	bpl.n	8007d88 <__smakebuf_r+0x1c>
 8007d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	2301      	movs	r3, #1
 8007d82:	6163      	str	r3, [r4, #20]
 8007d84:	b002      	add	sp, #8
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	ab01      	add	r3, sp, #4
 8007d8a:	466a      	mov	r2, sp
 8007d8c:	f7ff ffca 	bl	8007d24 <__swhatbuf_r>
 8007d90:	9900      	ldr	r1, [sp, #0]
 8007d92:	4605      	mov	r5, r0
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f877 	bl	8007e88 <_malloc_r>
 8007d9a:	b948      	cbnz	r0, 8007db0 <__smakebuf_r+0x44>
 8007d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da0:	059a      	lsls	r2, r3, #22
 8007da2:	d4ef      	bmi.n	8007d84 <__smakebuf_r+0x18>
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e7e3      	b.n	8007d78 <__smakebuf_r+0xc>
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <__smakebuf_r+0x7c>)
 8007db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	6020      	str	r0, [r4, #0]
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	9b00      	ldr	r3, [sp, #0]
 8007dc0:	6163      	str	r3, [r4, #20]
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6120      	str	r0, [r4, #16]
 8007dc6:	b15b      	cbz	r3, 8007de0 <__smakebuf_r+0x74>
 8007dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 fd57 	bl	8008880 <_isatty_r>
 8007dd2:	b128      	cbz	r0, 8007de0 <__smakebuf_r+0x74>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	f043 0301 	orr.w	r3, r3, #1
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	431d      	orrs	r5, r3
 8007de4:	81a5      	strh	r5, [r4, #12]
 8007de6:	e7cd      	b.n	8007d84 <__smakebuf_r+0x18>
 8007de8:	08007bd9 	.word	0x08007bd9

08007dec <_free_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4605      	mov	r5, r0
 8007df0:	2900      	cmp	r1, #0
 8007df2:	d045      	beq.n	8007e80 <_free_r+0x94>
 8007df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df8:	1f0c      	subs	r4, r1, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfb8      	it	lt
 8007dfe:	18e4      	addlt	r4, r4, r3
 8007e00:	f000 fd79 	bl	80088f6 <__malloc_lock>
 8007e04:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <_free_r+0x98>)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	4610      	mov	r0, r2
 8007e0a:	b933      	cbnz	r3, 8007e1a <_free_r+0x2e>
 8007e0c:	6063      	str	r3, [r4, #4]
 8007e0e:	6014      	str	r4, [r2, #0]
 8007e10:	4628      	mov	r0, r5
 8007e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e16:	f000 bd6f 	b.w	80088f8 <__malloc_unlock>
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	d90c      	bls.n	8007e38 <_free_r+0x4c>
 8007e1e:	6821      	ldr	r1, [r4, #0]
 8007e20:	1862      	adds	r2, r4, r1
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bf04      	itt	eq
 8007e26:	681a      	ldreq	r2, [r3, #0]
 8007e28:	685b      	ldreq	r3, [r3, #4]
 8007e2a:	6063      	str	r3, [r4, #4]
 8007e2c:	bf04      	itt	eq
 8007e2e:	1852      	addeq	r2, r2, r1
 8007e30:	6022      	streq	r2, [r4, #0]
 8007e32:	6004      	str	r4, [r0, #0]
 8007e34:	e7ec      	b.n	8007e10 <_free_r+0x24>
 8007e36:	4613      	mov	r3, r2
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	b10a      	cbz	r2, 8007e40 <_free_r+0x54>
 8007e3c:	42a2      	cmp	r2, r4
 8007e3e:	d9fa      	bls.n	8007e36 <_free_r+0x4a>
 8007e40:	6819      	ldr	r1, [r3, #0]
 8007e42:	1858      	adds	r0, r3, r1
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d10b      	bne.n	8007e60 <_free_r+0x74>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	1858      	adds	r0, r3, r1
 8007e4e:	4282      	cmp	r2, r0
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	d1dd      	bne.n	8007e10 <_free_r+0x24>
 8007e54:	6810      	ldr	r0, [r2, #0]
 8007e56:	6852      	ldr	r2, [r2, #4]
 8007e58:	605a      	str	r2, [r3, #4]
 8007e5a:	4401      	add	r1, r0
 8007e5c:	6019      	str	r1, [r3, #0]
 8007e5e:	e7d7      	b.n	8007e10 <_free_r+0x24>
 8007e60:	d902      	bls.n	8007e68 <_free_r+0x7c>
 8007e62:	230c      	movs	r3, #12
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	e7d3      	b.n	8007e10 <_free_r+0x24>
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	1821      	adds	r1, r4, r0
 8007e6c:	428a      	cmp	r2, r1
 8007e6e:	bf04      	itt	eq
 8007e70:	6811      	ldreq	r1, [r2, #0]
 8007e72:	6852      	ldreq	r2, [r2, #4]
 8007e74:	6062      	str	r2, [r4, #4]
 8007e76:	bf04      	itt	eq
 8007e78:	1809      	addeq	r1, r1, r0
 8007e7a:	6021      	streq	r1, [r4, #0]
 8007e7c:	605c      	str	r4, [r3, #4]
 8007e7e:	e7c7      	b.n	8007e10 <_free_r+0x24>
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000180 	.word	0x20000180

08007e88 <_malloc_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	1ccd      	adds	r5, r1, #3
 8007e8c:	f025 0503 	bic.w	r5, r5, #3
 8007e90:	3508      	adds	r5, #8
 8007e92:	2d0c      	cmp	r5, #12
 8007e94:	bf38      	it	cc
 8007e96:	250c      	movcc	r5, #12
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	db01      	blt.n	8007ea2 <_malloc_r+0x1a>
 8007e9e:	42a9      	cmp	r1, r5
 8007ea0:	d903      	bls.n	8007eaa <_malloc_r+0x22>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	f000 fd24 	bl	80088f6 <__malloc_lock>
 8007eae:	4a21      	ldr	r2, [pc, #132]	; (8007f34 <_malloc_r+0xac>)
 8007eb0:	6814      	ldr	r4, [r2, #0]
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	b991      	cbnz	r1, 8007edc <_malloc_r+0x54>
 8007eb6:	4c20      	ldr	r4, [pc, #128]	; (8007f38 <_malloc_r+0xb0>)
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	b91b      	cbnz	r3, 8007ec4 <_malloc_r+0x3c>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f000 fc57 	bl	8008770 <_sbrk_r>
 8007ec2:	6020      	str	r0, [r4, #0]
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f000 fc52 	bl	8008770 <_sbrk_r>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d124      	bne.n	8007f1a <_malloc_r+0x92>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 fd0f 	bl	80088f8 <__malloc_unlock>
 8007eda:	e7e4      	b.n	8007ea6 <_malloc_r+0x1e>
 8007edc:	680b      	ldr	r3, [r1, #0]
 8007ede:	1b5b      	subs	r3, r3, r5
 8007ee0:	d418      	bmi.n	8007f14 <_malloc_r+0x8c>
 8007ee2:	2b0b      	cmp	r3, #11
 8007ee4:	d90f      	bls.n	8007f06 <_malloc_r+0x7e>
 8007ee6:	600b      	str	r3, [r1, #0]
 8007ee8:	50cd      	str	r5, [r1, r3]
 8007eea:	18cc      	adds	r4, r1, r3
 8007eec:	4630      	mov	r0, r6
 8007eee:	f000 fd03 	bl	80088f8 <__malloc_unlock>
 8007ef2:	f104 000b 	add.w	r0, r4, #11
 8007ef6:	1d23      	adds	r3, r4, #4
 8007ef8:	f020 0007 	bic.w	r0, r0, #7
 8007efc:	1ac3      	subs	r3, r0, r3
 8007efe:	d0d3      	beq.n	8007ea8 <_malloc_r+0x20>
 8007f00:	425a      	negs	r2, r3
 8007f02:	50e2      	str	r2, [r4, r3]
 8007f04:	e7d0      	b.n	8007ea8 <_malloc_r+0x20>
 8007f06:	428c      	cmp	r4, r1
 8007f08:	684b      	ldr	r3, [r1, #4]
 8007f0a:	bf16      	itet	ne
 8007f0c:	6063      	strne	r3, [r4, #4]
 8007f0e:	6013      	streq	r3, [r2, #0]
 8007f10:	460c      	movne	r4, r1
 8007f12:	e7eb      	b.n	8007eec <_malloc_r+0x64>
 8007f14:	460c      	mov	r4, r1
 8007f16:	6849      	ldr	r1, [r1, #4]
 8007f18:	e7cc      	b.n	8007eb4 <_malloc_r+0x2c>
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d005      	beq.n	8007f30 <_malloc_r+0xa8>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 fc22 	bl	8008770 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0cf      	beq.n	8007ed0 <_malloc_r+0x48>
 8007f30:	6025      	str	r5, [r4, #0]
 8007f32:	e7db      	b.n	8007eec <_malloc_r+0x64>
 8007f34:	20000180 	.word	0x20000180
 8007f38:	20000184 	.word	0x20000184

08007f3c <__ssputs_r>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	688e      	ldr	r6, [r1, #8]
 8007f42:	429e      	cmp	r6, r3
 8007f44:	4682      	mov	sl, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4690      	mov	r8, r2
 8007f4a:	4699      	mov	r9, r3
 8007f4c:	d837      	bhi.n	8007fbe <__ssputs_r+0x82>
 8007f4e:	898a      	ldrh	r2, [r1, #12]
 8007f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f54:	d031      	beq.n	8007fba <__ssputs_r+0x7e>
 8007f56:	6825      	ldr	r5, [r4, #0]
 8007f58:	6909      	ldr	r1, [r1, #16]
 8007f5a:	1a6f      	subs	r7, r5, r1
 8007f5c:	6965      	ldr	r5, [r4, #20]
 8007f5e:	2302      	movs	r3, #2
 8007f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f64:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f68:	f109 0301 	add.w	r3, r9, #1
 8007f6c:	443b      	add	r3, r7
 8007f6e:	429d      	cmp	r5, r3
 8007f70:	bf38      	it	cc
 8007f72:	461d      	movcc	r5, r3
 8007f74:	0553      	lsls	r3, r2, #21
 8007f76:	d530      	bpl.n	8007fda <__ssputs_r+0x9e>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7ff ff85 	bl	8007e88 <_malloc_r>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	b950      	cbnz	r0, 8007f98 <__ssputs_r+0x5c>
 8007f82:	230c      	movs	r3, #12
 8007f84:	f8ca 3000 	str.w	r3, [sl]
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f98:	463a      	mov	r2, r7
 8007f9a:	6921      	ldr	r1, [r4, #16]
 8007f9c:	f7ff fbc4 	bl	8007728 <memcpy>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	6126      	str	r6, [r4, #16]
 8007fae:	6165      	str	r5, [r4, #20]
 8007fb0:	443e      	add	r6, r7
 8007fb2:	1bed      	subs	r5, r5, r7
 8007fb4:	6026      	str	r6, [r4, #0]
 8007fb6:	60a5      	str	r5, [r4, #8]
 8007fb8:	464e      	mov	r6, r9
 8007fba:	454e      	cmp	r6, r9
 8007fbc:	d900      	bls.n	8007fc0 <__ssputs_r+0x84>
 8007fbe:	464e      	mov	r6, r9
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4641      	mov	r1, r8
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	f000 fc7d 	bl	80088c4 <memmove>
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	1b9b      	subs	r3, r3, r6
 8007fce:	60a3      	str	r3, [r4, #8]
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	441e      	add	r6, r3
 8007fd4:	6026      	str	r6, [r4, #0]
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e7dc      	b.n	8007f94 <__ssputs_r+0x58>
 8007fda:	462a      	mov	r2, r5
 8007fdc:	f000 fc8d 	bl	80088fa <_realloc_r>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d1e2      	bne.n	8007fac <__ssputs_r+0x70>
 8007fe6:	6921      	ldr	r1, [r4, #16]
 8007fe8:	4650      	mov	r0, sl
 8007fea:	f7ff feff 	bl	8007dec <_free_r>
 8007fee:	e7c8      	b.n	8007f82 <__ssputs_r+0x46>

08007ff0 <_svfiprintf_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	898b      	ldrh	r3, [r1, #12]
 8007ff8:	061f      	lsls	r7, r3, #24
 8007ffa:	b09d      	sub	sp, #116	; 0x74
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	4616      	mov	r6, r2
 8008002:	d50f      	bpl.n	8008024 <_svfiprintf_r+0x34>
 8008004:	690b      	ldr	r3, [r1, #16]
 8008006:	b96b      	cbnz	r3, 8008024 <_svfiprintf_r+0x34>
 8008008:	2140      	movs	r1, #64	; 0x40
 800800a:	f7ff ff3d 	bl	8007e88 <_malloc_r>
 800800e:	6020      	str	r0, [r4, #0]
 8008010:	6120      	str	r0, [r4, #16]
 8008012:	b928      	cbnz	r0, 8008020 <_svfiprintf_r+0x30>
 8008014:	230c      	movs	r3, #12
 8008016:	f8c8 3000 	str.w	r3, [r8]
 800801a:	f04f 30ff 	mov.w	r0, #4294967295
 800801e:	e0c8      	b.n	80081b2 <_svfiprintf_r+0x1c2>
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	6163      	str	r3, [r4, #20]
 8008024:	2300      	movs	r3, #0
 8008026:	9309      	str	r3, [sp, #36]	; 0x24
 8008028:	2320      	movs	r3, #32
 800802a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800802e:	2330      	movs	r3, #48	; 0x30
 8008030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008034:	9503      	str	r5, [sp, #12]
 8008036:	f04f 0b01 	mov.w	fp, #1
 800803a:	4637      	mov	r7, r6
 800803c:	463d      	mov	r5, r7
 800803e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008042:	b10b      	cbz	r3, 8008048 <_svfiprintf_r+0x58>
 8008044:	2b25      	cmp	r3, #37	; 0x25
 8008046:	d13e      	bne.n	80080c6 <_svfiprintf_r+0xd6>
 8008048:	ebb7 0a06 	subs.w	sl, r7, r6
 800804c:	d00b      	beq.n	8008066 <_svfiprintf_r+0x76>
 800804e:	4653      	mov	r3, sl
 8008050:	4632      	mov	r2, r6
 8008052:	4621      	mov	r1, r4
 8008054:	4640      	mov	r0, r8
 8008056:	f7ff ff71 	bl	8007f3c <__ssputs_r>
 800805a:	3001      	adds	r0, #1
 800805c:	f000 80a4 	beq.w	80081a8 <_svfiprintf_r+0x1b8>
 8008060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008062:	4453      	add	r3, sl
 8008064:	9309      	str	r3, [sp, #36]	; 0x24
 8008066:	783b      	ldrb	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 809d 	beq.w	80081a8 <_svfiprintf_r+0x1b8>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008080:	931a      	str	r3, [sp, #104]	; 0x68
 8008082:	462f      	mov	r7, r5
 8008084:	2205      	movs	r2, #5
 8008086:	f817 1b01 	ldrb.w	r1, [r7], #1
 800808a:	4850      	ldr	r0, [pc, #320]	; (80081cc <_svfiprintf_r+0x1dc>)
 800808c:	f7f8 f8a8 	bl	80001e0 <memchr>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	b9d0      	cbnz	r0, 80080ca <_svfiprintf_r+0xda>
 8008094:	06d9      	lsls	r1, r3, #27
 8008096:	bf44      	itt	mi
 8008098:	2220      	movmi	r2, #32
 800809a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800809e:	071a      	lsls	r2, r3, #28
 80080a0:	bf44      	itt	mi
 80080a2:	222b      	movmi	r2, #43	; 0x2b
 80080a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080a8:	782a      	ldrb	r2, [r5, #0]
 80080aa:	2a2a      	cmp	r2, #42	; 0x2a
 80080ac:	d015      	beq.n	80080da <_svfiprintf_r+0xea>
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	462f      	mov	r7, r5
 80080b2:	2000      	movs	r0, #0
 80080b4:	250a      	movs	r5, #10
 80080b6:	4639      	mov	r1, r7
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	; 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94d      	bls.n	800815e <_svfiprintf_r+0x16e>
 80080c2:	b1b8      	cbz	r0, 80080f4 <_svfiprintf_r+0x104>
 80080c4:	e00f      	b.n	80080e6 <_svfiprintf_r+0xf6>
 80080c6:	462f      	mov	r7, r5
 80080c8:	e7b8      	b.n	800803c <_svfiprintf_r+0x4c>
 80080ca:	4a40      	ldr	r2, [pc, #256]	; (80081cc <_svfiprintf_r+0x1dc>)
 80080cc:	1a80      	subs	r0, r0, r2
 80080ce:	fa0b f000 	lsl.w	r0, fp, r0
 80080d2:	4318      	orrs	r0, r3
 80080d4:	9004      	str	r0, [sp, #16]
 80080d6:	463d      	mov	r5, r7
 80080d8:	e7d3      	b.n	8008082 <_svfiprintf_r+0x92>
 80080da:	9a03      	ldr	r2, [sp, #12]
 80080dc:	1d11      	adds	r1, r2, #4
 80080de:	6812      	ldr	r2, [r2, #0]
 80080e0:	9103      	str	r1, [sp, #12]
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	db01      	blt.n	80080ea <_svfiprintf_r+0xfa>
 80080e6:	9207      	str	r2, [sp, #28]
 80080e8:	e004      	b.n	80080f4 <_svfiprintf_r+0x104>
 80080ea:	4252      	negs	r2, r2
 80080ec:	f043 0302 	orr.w	r3, r3, #2
 80080f0:	9207      	str	r2, [sp, #28]
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	783b      	ldrb	r3, [r7, #0]
 80080f6:	2b2e      	cmp	r3, #46	; 0x2e
 80080f8:	d10c      	bne.n	8008114 <_svfiprintf_r+0x124>
 80080fa:	787b      	ldrb	r3, [r7, #1]
 80080fc:	2b2a      	cmp	r3, #42	; 0x2a
 80080fe:	d133      	bne.n	8008168 <_svfiprintf_r+0x178>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	9203      	str	r2, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfb8      	it	lt
 800810c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008110:	3702      	adds	r7, #2
 8008112:	9305      	str	r3, [sp, #20]
 8008114:	4d2e      	ldr	r5, [pc, #184]	; (80081d0 <_svfiprintf_r+0x1e0>)
 8008116:	7839      	ldrb	r1, [r7, #0]
 8008118:	2203      	movs	r2, #3
 800811a:	4628      	mov	r0, r5
 800811c:	f7f8 f860 	bl	80001e0 <memchr>
 8008120:	b138      	cbz	r0, 8008132 <_svfiprintf_r+0x142>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	1b40      	subs	r0, r0, r5
 8008126:	fa03 f000 	lsl.w	r0, r3, r0
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	4303      	orrs	r3, r0
 800812e:	3701      	adds	r7, #1
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	7839      	ldrb	r1, [r7, #0]
 8008134:	4827      	ldr	r0, [pc, #156]	; (80081d4 <_svfiprintf_r+0x1e4>)
 8008136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813a:	2206      	movs	r2, #6
 800813c:	1c7e      	adds	r6, r7, #1
 800813e:	f7f8 f84f 	bl	80001e0 <memchr>
 8008142:	2800      	cmp	r0, #0
 8008144:	d038      	beq.n	80081b8 <_svfiprintf_r+0x1c8>
 8008146:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <_svfiprintf_r+0x1e8>)
 8008148:	bb13      	cbnz	r3, 8008190 <_svfiprintf_r+0x1a0>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	3307      	adds	r3, #7
 800814e:	f023 0307 	bic.w	r3, r3, #7
 8008152:	3308      	adds	r3, #8
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	444b      	add	r3, r9
 800815a:	9309      	str	r3, [sp, #36]	; 0x24
 800815c:	e76d      	b.n	800803a <_svfiprintf_r+0x4a>
 800815e:	fb05 3202 	mla	r2, r5, r2, r3
 8008162:	2001      	movs	r0, #1
 8008164:	460f      	mov	r7, r1
 8008166:	e7a6      	b.n	80080b6 <_svfiprintf_r+0xc6>
 8008168:	2300      	movs	r3, #0
 800816a:	3701      	adds	r7, #1
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	4619      	mov	r1, r3
 8008170:	250a      	movs	r5, #10
 8008172:	4638      	mov	r0, r7
 8008174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008178:	3a30      	subs	r2, #48	; 0x30
 800817a:	2a09      	cmp	r2, #9
 800817c:	d903      	bls.n	8008186 <_svfiprintf_r+0x196>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0c8      	beq.n	8008114 <_svfiprintf_r+0x124>
 8008182:	9105      	str	r1, [sp, #20]
 8008184:	e7c6      	b.n	8008114 <_svfiprintf_r+0x124>
 8008186:	fb05 2101 	mla	r1, r5, r1, r2
 800818a:	2301      	movs	r3, #1
 800818c:	4607      	mov	r7, r0
 800818e:	e7f0      	b.n	8008172 <_svfiprintf_r+0x182>
 8008190:	ab03      	add	r3, sp, #12
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	4622      	mov	r2, r4
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <_svfiprintf_r+0x1ec>)
 8008198:	a904      	add	r1, sp, #16
 800819a:	4640      	mov	r0, r8
 800819c:	f3af 8000 	nop.w
 80081a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081a4:	4681      	mov	r9, r0
 80081a6:	d1d6      	bne.n	8008156 <_svfiprintf_r+0x166>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	065b      	lsls	r3, r3, #25
 80081ac:	f53f af35 	bmi.w	800801a <_svfiprintf_r+0x2a>
 80081b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b2:	b01d      	add	sp, #116	; 0x74
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4622      	mov	r2, r4
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <_svfiprintf_r+0x1ec>)
 80081c0:	a904      	add	r1, sp, #16
 80081c2:	4640      	mov	r0, r8
 80081c4:	f000 f9c2 	bl	800854c <_printf_i>
 80081c8:	e7ea      	b.n	80081a0 <_svfiprintf_r+0x1b0>
 80081ca:	bf00      	nop
 80081cc:	0800939c 	.word	0x0800939c
 80081d0:	080093a2 	.word	0x080093a2
 80081d4:	080093a6 	.word	0x080093a6
 80081d8:	00000000 	.word	0x00000000
 80081dc:	08007f3d 	.word	0x08007f3d

080081e0 <__sfputc_r>:
 80081e0:	6893      	ldr	r3, [r2, #8]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	b410      	push	{r4}
 80081e8:	6093      	str	r3, [r2, #8]
 80081ea:	da08      	bge.n	80081fe <__sfputc_r+0x1e>
 80081ec:	6994      	ldr	r4, [r2, #24]
 80081ee:	42a3      	cmp	r3, r4
 80081f0:	db01      	blt.n	80081f6 <__sfputc_r+0x16>
 80081f2:	290a      	cmp	r1, #10
 80081f4:	d103      	bne.n	80081fe <__sfputc_r+0x1e>
 80081f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fa:	f7ff bb59 	b.w	80078b0 <__swbuf_r>
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	1c58      	adds	r0, r3, #1
 8008202:	6010      	str	r0, [r2, #0]
 8008204:	7019      	strb	r1, [r3, #0]
 8008206:	4608      	mov	r0, r1
 8008208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800820c:	4770      	bx	lr

0800820e <__sfputs_r>:
 800820e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008210:	4606      	mov	r6, r0
 8008212:	460f      	mov	r7, r1
 8008214:	4614      	mov	r4, r2
 8008216:	18d5      	adds	r5, r2, r3
 8008218:	42ac      	cmp	r4, r5
 800821a:	d101      	bne.n	8008220 <__sfputs_r+0x12>
 800821c:	2000      	movs	r0, #0
 800821e:	e007      	b.n	8008230 <__sfputs_r+0x22>
 8008220:	463a      	mov	r2, r7
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ffda 	bl	80081e0 <__sfputc_r>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d1f3      	bne.n	8008218 <__sfputs_r+0xa>
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008234 <_vfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	b09d      	sub	sp, #116	; 0x74
 800823c:	4617      	mov	r7, r2
 800823e:	461d      	mov	r5, r3
 8008240:	4606      	mov	r6, r0
 8008242:	b118      	cbz	r0, 800824c <_vfiprintf_r+0x18>
 8008244:	6983      	ldr	r3, [r0, #24]
 8008246:	b90b      	cbnz	r3, 800824c <_vfiprintf_r+0x18>
 8008248:	f7ff fce2 	bl	8007c10 <__sinit>
 800824c:	4b7c      	ldr	r3, [pc, #496]	; (8008440 <_vfiprintf_r+0x20c>)
 800824e:	429c      	cmp	r4, r3
 8008250:	d158      	bne.n	8008304 <_vfiprintf_r+0xd0>
 8008252:	6874      	ldr	r4, [r6, #4]
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	0718      	lsls	r0, r3, #28
 8008258:	d55e      	bpl.n	8008318 <_vfiprintf_r+0xe4>
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d05b      	beq.n	8008318 <_vfiprintf_r+0xe4>
 8008260:	2300      	movs	r3, #0
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
 8008264:	2320      	movs	r3, #32
 8008266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800826a:	2330      	movs	r3, #48	; 0x30
 800826c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008270:	9503      	str	r5, [sp, #12]
 8008272:	f04f 0b01 	mov.w	fp, #1
 8008276:	46b8      	mov	r8, r7
 8008278:	4645      	mov	r5, r8
 800827a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800827e:	b10b      	cbz	r3, 8008284 <_vfiprintf_r+0x50>
 8008280:	2b25      	cmp	r3, #37	; 0x25
 8008282:	d154      	bne.n	800832e <_vfiprintf_r+0xfa>
 8008284:	ebb8 0a07 	subs.w	sl, r8, r7
 8008288:	d00b      	beq.n	80082a2 <_vfiprintf_r+0x6e>
 800828a:	4653      	mov	r3, sl
 800828c:	463a      	mov	r2, r7
 800828e:	4621      	mov	r1, r4
 8008290:	4630      	mov	r0, r6
 8008292:	f7ff ffbc 	bl	800820e <__sfputs_r>
 8008296:	3001      	adds	r0, #1
 8008298:	f000 80c2 	beq.w	8008420 <_vfiprintf_r+0x1ec>
 800829c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829e:	4453      	add	r3, sl
 80082a0:	9309      	str	r3, [sp, #36]	; 0x24
 80082a2:	f898 3000 	ldrb.w	r3, [r8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80ba 	beq.w	8008420 <_vfiprintf_r+0x1ec>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082be:	931a      	str	r3, [sp, #104]	; 0x68
 80082c0:	46a8      	mov	r8, r5
 80082c2:	2205      	movs	r2, #5
 80082c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80082c8:	485e      	ldr	r0, [pc, #376]	; (8008444 <_vfiprintf_r+0x210>)
 80082ca:	f7f7 ff89 	bl	80001e0 <memchr>
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	bb78      	cbnz	r0, 8008332 <_vfiprintf_r+0xfe>
 80082d2:	06d9      	lsls	r1, r3, #27
 80082d4:	bf44      	itt	mi
 80082d6:	2220      	movmi	r2, #32
 80082d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082dc:	071a      	lsls	r2, r3, #28
 80082de:	bf44      	itt	mi
 80082e0:	222b      	movmi	r2, #43	; 0x2b
 80082e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082e6:	782a      	ldrb	r2, [r5, #0]
 80082e8:	2a2a      	cmp	r2, #42	; 0x2a
 80082ea:	d02a      	beq.n	8008342 <_vfiprintf_r+0x10e>
 80082ec:	9a07      	ldr	r2, [sp, #28]
 80082ee:	46a8      	mov	r8, r5
 80082f0:	2000      	movs	r0, #0
 80082f2:	250a      	movs	r5, #10
 80082f4:	4641      	mov	r1, r8
 80082f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fa:	3b30      	subs	r3, #48	; 0x30
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d969      	bls.n	80083d4 <_vfiprintf_r+0x1a0>
 8008300:	b360      	cbz	r0, 800835c <_vfiprintf_r+0x128>
 8008302:	e024      	b.n	800834e <_vfiprintf_r+0x11a>
 8008304:	4b50      	ldr	r3, [pc, #320]	; (8008448 <_vfiprintf_r+0x214>)
 8008306:	429c      	cmp	r4, r3
 8008308:	d101      	bne.n	800830e <_vfiprintf_r+0xda>
 800830a:	68b4      	ldr	r4, [r6, #8]
 800830c:	e7a2      	b.n	8008254 <_vfiprintf_r+0x20>
 800830e:	4b4f      	ldr	r3, [pc, #316]	; (800844c <_vfiprintf_r+0x218>)
 8008310:	429c      	cmp	r4, r3
 8008312:	bf08      	it	eq
 8008314:	68f4      	ldreq	r4, [r6, #12]
 8008316:	e79d      	b.n	8008254 <_vfiprintf_r+0x20>
 8008318:	4621      	mov	r1, r4
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff fb1a 	bl	8007954 <__swsetup_r>
 8008320:	2800      	cmp	r0, #0
 8008322:	d09d      	beq.n	8008260 <_vfiprintf_r+0x2c>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	b01d      	add	sp, #116	; 0x74
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	46a8      	mov	r8, r5
 8008330:	e7a2      	b.n	8008278 <_vfiprintf_r+0x44>
 8008332:	4a44      	ldr	r2, [pc, #272]	; (8008444 <_vfiprintf_r+0x210>)
 8008334:	1a80      	subs	r0, r0, r2
 8008336:	fa0b f000 	lsl.w	r0, fp, r0
 800833a:	4318      	orrs	r0, r3
 800833c:	9004      	str	r0, [sp, #16]
 800833e:	4645      	mov	r5, r8
 8008340:	e7be      	b.n	80082c0 <_vfiprintf_r+0x8c>
 8008342:	9a03      	ldr	r2, [sp, #12]
 8008344:	1d11      	adds	r1, r2, #4
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	9103      	str	r1, [sp, #12]
 800834a:	2a00      	cmp	r2, #0
 800834c:	db01      	blt.n	8008352 <_vfiprintf_r+0x11e>
 800834e:	9207      	str	r2, [sp, #28]
 8008350:	e004      	b.n	800835c <_vfiprintf_r+0x128>
 8008352:	4252      	negs	r2, r2
 8008354:	f043 0302 	orr.w	r3, r3, #2
 8008358:	9207      	str	r2, [sp, #28]
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	f898 3000 	ldrb.w	r3, [r8]
 8008360:	2b2e      	cmp	r3, #46	; 0x2e
 8008362:	d10e      	bne.n	8008382 <_vfiprintf_r+0x14e>
 8008364:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008368:	2b2a      	cmp	r3, #42	; 0x2a
 800836a:	d138      	bne.n	80083de <_vfiprintf_r+0x1aa>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	9203      	str	r2, [sp, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfb8      	it	lt
 8008378:	f04f 33ff 	movlt.w	r3, #4294967295
 800837c:	f108 0802 	add.w	r8, r8, #2
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	4d33      	ldr	r5, [pc, #204]	; (8008450 <_vfiprintf_r+0x21c>)
 8008384:	f898 1000 	ldrb.w	r1, [r8]
 8008388:	2203      	movs	r2, #3
 800838a:	4628      	mov	r0, r5
 800838c:	f7f7 ff28 	bl	80001e0 <memchr>
 8008390:	b140      	cbz	r0, 80083a4 <_vfiprintf_r+0x170>
 8008392:	2340      	movs	r3, #64	; 0x40
 8008394:	1b40      	subs	r0, r0, r5
 8008396:	fa03 f000 	lsl.w	r0, r3, r0
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	4303      	orrs	r3, r0
 800839e:	f108 0801 	add.w	r8, r8, #1
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	f898 1000 	ldrb.w	r1, [r8]
 80083a8:	482a      	ldr	r0, [pc, #168]	; (8008454 <_vfiprintf_r+0x220>)
 80083aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ae:	2206      	movs	r2, #6
 80083b0:	f108 0701 	add.w	r7, r8, #1
 80083b4:	f7f7 ff14 	bl	80001e0 <memchr>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d037      	beq.n	800842c <_vfiprintf_r+0x1f8>
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <_vfiprintf_r+0x224>)
 80083be:	bb1b      	cbnz	r3, 8008408 <_vfiprintf_r+0x1d4>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	3307      	adds	r3, #7
 80083c4:	f023 0307 	bic.w	r3, r3, #7
 80083c8:	3308      	adds	r3, #8
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	444b      	add	r3, r9
 80083d0:	9309      	str	r3, [sp, #36]	; 0x24
 80083d2:	e750      	b.n	8008276 <_vfiprintf_r+0x42>
 80083d4:	fb05 3202 	mla	r2, r5, r2, r3
 80083d8:	2001      	movs	r0, #1
 80083da:	4688      	mov	r8, r1
 80083dc:	e78a      	b.n	80082f4 <_vfiprintf_r+0xc0>
 80083de:	2300      	movs	r3, #0
 80083e0:	f108 0801 	add.w	r8, r8, #1
 80083e4:	9305      	str	r3, [sp, #20]
 80083e6:	4619      	mov	r1, r3
 80083e8:	250a      	movs	r5, #10
 80083ea:	4640      	mov	r0, r8
 80083ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f0:	3a30      	subs	r2, #48	; 0x30
 80083f2:	2a09      	cmp	r2, #9
 80083f4:	d903      	bls.n	80083fe <_vfiprintf_r+0x1ca>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0c3      	beq.n	8008382 <_vfiprintf_r+0x14e>
 80083fa:	9105      	str	r1, [sp, #20]
 80083fc:	e7c1      	b.n	8008382 <_vfiprintf_r+0x14e>
 80083fe:	fb05 2101 	mla	r1, r5, r1, r2
 8008402:	2301      	movs	r3, #1
 8008404:	4680      	mov	r8, r0
 8008406:	e7f0      	b.n	80083ea <_vfiprintf_r+0x1b6>
 8008408:	ab03      	add	r3, sp, #12
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4622      	mov	r2, r4
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <_vfiprintf_r+0x228>)
 8008410:	a904      	add	r1, sp, #16
 8008412:	4630      	mov	r0, r6
 8008414:	f3af 8000 	nop.w
 8008418:	f1b0 3fff 	cmp.w	r0, #4294967295
 800841c:	4681      	mov	r9, r0
 800841e:	d1d5      	bne.n	80083cc <_vfiprintf_r+0x198>
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	065b      	lsls	r3, r3, #25
 8008424:	f53f af7e 	bmi.w	8008324 <_vfiprintf_r+0xf0>
 8008428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842a:	e77d      	b.n	8008328 <_vfiprintf_r+0xf4>
 800842c:	ab03      	add	r3, sp, #12
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	4622      	mov	r2, r4
 8008432:	4b0a      	ldr	r3, [pc, #40]	; (800845c <_vfiprintf_r+0x228>)
 8008434:	a904      	add	r1, sp, #16
 8008436:	4630      	mov	r0, r6
 8008438:	f000 f888 	bl	800854c <_printf_i>
 800843c:	e7ec      	b.n	8008418 <_vfiprintf_r+0x1e4>
 800843e:	bf00      	nop
 8008440:	0800935c 	.word	0x0800935c
 8008444:	0800939c 	.word	0x0800939c
 8008448:	0800937c 	.word	0x0800937c
 800844c:	0800933c 	.word	0x0800933c
 8008450:	080093a2 	.word	0x080093a2
 8008454:	080093a6 	.word	0x080093a6
 8008458:	00000000 	.word	0x00000000
 800845c:	0800820f 	.word	0x0800820f

08008460 <_printf_common>:
 8008460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	4691      	mov	r9, r2
 8008466:	461f      	mov	r7, r3
 8008468:	688a      	ldr	r2, [r1, #8]
 800846a:	690b      	ldr	r3, [r1, #16]
 800846c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008470:	4293      	cmp	r3, r2
 8008472:	bfb8      	it	lt
 8008474:	4613      	movlt	r3, r2
 8008476:	f8c9 3000 	str.w	r3, [r9]
 800847a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800847e:	4606      	mov	r6, r0
 8008480:	460c      	mov	r4, r1
 8008482:	b112      	cbz	r2, 800848a <_printf_common+0x2a>
 8008484:	3301      	adds	r3, #1
 8008486:	f8c9 3000 	str.w	r3, [r9]
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	0699      	lsls	r1, r3, #26
 800848e:	bf42      	ittt	mi
 8008490:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008494:	3302      	addmi	r3, #2
 8008496:	f8c9 3000 	strmi.w	r3, [r9]
 800849a:	6825      	ldr	r5, [r4, #0]
 800849c:	f015 0506 	ands.w	r5, r5, #6
 80084a0:	d107      	bne.n	80084b2 <_printf_common+0x52>
 80084a2:	f104 0a19 	add.w	sl, r4, #25
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	f8d9 2000 	ldr.w	r2, [r9]
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	42ab      	cmp	r3, r5
 80084b0:	dc28      	bgt.n	8008504 <_printf_common+0xa4>
 80084b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	3300      	adds	r3, #0
 80084ba:	bf18      	it	ne
 80084bc:	2301      	movne	r3, #1
 80084be:	0692      	lsls	r2, r2, #26
 80084c0:	d42d      	bmi.n	800851e <_printf_common+0xbe>
 80084c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084c6:	4639      	mov	r1, r7
 80084c8:	4630      	mov	r0, r6
 80084ca:	47c0      	blx	r8
 80084cc:	3001      	adds	r0, #1
 80084ce:	d020      	beq.n	8008512 <_printf_common+0xb2>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	68e5      	ldr	r5, [r4, #12]
 80084d4:	f8d9 2000 	ldr.w	r2, [r9]
 80084d8:	f003 0306 	and.w	r3, r3, #6
 80084dc:	2b04      	cmp	r3, #4
 80084de:	bf08      	it	eq
 80084e0:	1aad      	subeq	r5, r5, r2
 80084e2:	68a3      	ldr	r3, [r4, #8]
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	bf0c      	ite	eq
 80084e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084ec:	2500      	movne	r5, #0
 80084ee:	4293      	cmp	r3, r2
 80084f0:	bfc4      	itt	gt
 80084f2:	1a9b      	subgt	r3, r3, r2
 80084f4:	18ed      	addgt	r5, r5, r3
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	341a      	adds	r4, #26
 80084fc:	454d      	cmp	r5, r9
 80084fe:	d11a      	bne.n	8008536 <_printf_common+0xd6>
 8008500:	2000      	movs	r0, #0
 8008502:	e008      	b.n	8008516 <_printf_common+0xb6>
 8008504:	2301      	movs	r3, #1
 8008506:	4652      	mov	r2, sl
 8008508:	4639      	mov	r1, r7
 800850a:	4630      	mov	r0, r6
 800850c:	47c0      	blx	r8
 800850e:	3001      	adds	r0, #1
 8008510:	d103      	bne.n	800851a <_printf_common+0xba>
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851a:	3501      	adds	r5, #1
 800851c:	e7c3      	b.n	80084a6 <_printf_common+0x46>
 800851e:	18e1      	adds	r1, r4, r3
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	2030      	movs	r0, #48	; 0x30
 8008524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008528:	4422      	add	r2, r4
 800852a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800852e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008532:	3302      	adds	r3, #2
 8008534:	e7c5      	b.n	80084c2 <_printf_common+0x62>
 8008536:	2301      	movs	r3, #1
 8008538:	4622      	mov	r2, r4
 800853a:	4639      	mov	r1, r7
 800853c:	4630      	mov	r0, r6
 800853e:	47c0      	blx	r8
 8008540:	3001      	adds	r0, #1
 8008542:	d0e6      	beq.n	8008512 <_printf_common+0xb2>
 8008544:	f109 0901 	add.w	r9, r9, #1
 8008548:	e7d8      	b.n	80084fc <_printf_common+0x9c>
	...

0800854c <_printf_i>:
 800854c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008550:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008554:	460c      	mov	r4, r1
 8008556:	7e09      	ldrb	r1, [r1, #24]
 8008558:	b085      	sub	sp, #20
 800855a:	296e      	cmp	r1, #110	; 0x6e
 800855c:	4617      	mov	r7, r2
 800855e:	4606      	mov	r6, r0
 8008560:	4698      	mov	r8, r3
 8008562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008564:	f000 80b3 	beq.w	80086ce <_printf_i+0x182>
 8008568:	d822      	bhi.n	80085b0 <_printf_i+0x64>
 800856a:	2963      	cmp	r1, #99	; 0x63
 800856c:	d036      	beq.n	80085dc <_printf_i+0x90>
 800856e:	d80a      	bhi.n	8008586 <_printf_i+0x3a>
 8008570:	2900      	cmp	r1, #0
 8008572:	f000 80b9 	beq.w	80086e8 <_printf_i+0x19c>
 8008576:	2958      	cmp	r1, #88	; 0x58
 8008578:	f000 8083 	beq.w	8008682 <_printf_i+0x136>
 800857c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008580:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008584:	e032      	b.n	80085ec <_printf_i+0xa0>
 8008586:	2964      	cmp	r1, #100	; 0x64
 8008588:	d001      	beq.n	800858e <_printf_i+0x42>
 800858a:	2969      	cmp	r1, #105	; 0x69
 800858c:	d1f6      	bne.n	800857c <_printf_i+0x30>
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	6813      	ldr	r3, [r2, #0]
 8008592:	0605      	lsls	r5, r0, #24
 8008594:	f103 0104 	add.w	r1, r3, #4
 8008598:	d52a      	bpl.n	80085f0 <_printf_i+0xa4>
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	da03      	bge.n	80085aa <_printf_i+0x5e>
 80085a2:	222d      	movs	r2, #45	; 0x2d
 80085a4:	425b      	negs	r3, r3
 80085a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80085aa:	486f      	ldr	r0, [pc, #444]	; (8008768 <_printf_i+0x21c>)
 80085ac:	220a      	movs	r2, #10
 80085ae:	e039      	b.n	8008624 <_printf_i+0xd8>
 80085b0:	2973      	cmp	r1, #115	; 0x73
 80085b2:	f000 809d 	beq.w	80086f0 <_printf_i+0x1a4>
 80085b6:	d808      	bhi.n	80085ca <_printf_i+0x7e>
 80085b8:	296f      	cmp	r1, #111	; 0x6f
 80085ba:	d020      	beq.n	80085fe <_printf_i+0xb2>
 80085bc:	2970      	cmp	r1, #112	; 0x70
 80085be:	d1dd      	bne.n	800857c <_printf_i+0x30>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	f043 0320 	orr.w	r3, r3, #32
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	e003      	b.n	80085d2 <_printf_i+0x86>
 80085ca:	2975      	cmp	r1, #117	; 0x75
 80085cc:	d017      	beq.n	80085fe <_printf_i+0xb2>
 80085ce:	2978      	cmp	r1, #120	; 0x78
 80085d0:	d1d4      	bne.n	800857c <_printf_i+0x30>
 80085d2:	2378      	movs	r3, #120	; 0x78
 80085d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085d8:	4864      	ldr	r0, [pc, #400]	; (800876c <_printf_i+0x220>)
 80085da:	e055      	b.n	8008688 <_printf_i+0x13c>
 80085dc:	6813      	ldr	r3, [r2, #0]
 80085de:	1d19      	adds	r1, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6011      	str	r1, [r2, #0]
 80085e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085ec:	2301      	movs	r3, #1
 80085ee:	e08c      	b.n	800870a <_printf_i+0x1be>
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6011      	str	r1, [r2, #0]
 80085f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085f8:	bf18      	it	ne
 80085fa:	b21b      	sxthne	r3, r3
 80085fc:	e7cf      	b.n	800859e <_printf_i+0x52>
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	6825      	ldr	r5, [r4, #0]
 8008602:	1d18      	adds	r0, r3, #4
 8008604:	6010      	str	r0, [r2, #0]
 8008606:	0628      	lsls	r0, r5, #24
 8008608:	d501      	bpl.n	800860e <_printf_i+0xc2>
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	e002      	b.n	8008614 <_printf_i+0xc8>
 800860e:	0668      	lsls	r0, r5, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0xbe>
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	4854      	ldr	r0, [pc, #336]	; (8008768 <_printf_i+0x21c>)
 8008616:	296f      	cmp	r1, #111	; 0x6f
 8008618:	bf14      	ite	ne
 800861a:	220a      	movne	r2, #10
 800861c:	2208      	moveq	r2, #8
 800861e:	2100      	movs	r1, #0
 8008620:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008624:	6865      	ldr	r5, [r4, #4]
 8008626:	60a5      	str	r5, [r4, #8]
 8008628:	2d00      	cmp	r5, #0
 800862a:	f2c0 8095 	blt.w	8008758 <_printf_i+0x20c>
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	f021 0104 	bic.w	r1, r1, #4
 8008634:	6021      	str	r1, [r4, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d13d      	bne.n	80086b6 <_printf_i+0x16a>
 800863a:	2d00      	cmp	r5, #0
 800863c:	f040 808e 	bne.w	800875c <_printf_i+0x210>
 8008640:	4665      	mov	r5, ip
 8008642:	2a08      	cmp	r2, #8
 8008644:	d10b      	bne.n	800865e <_printf_i+0x112>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	07db      	lsls	r3, r3, #31
 800864a:	d508      	bpl.n	800865e <_printf_i+0x112>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	6862      	ldr	r2, [r4, #4]
 8008650:	429a      	cmp	r2, r3
 8008652:	bfde      	ittt	le
 8008654:	2330      	movle	r3, #48	; 0x30
 8008656:	f805 3c01 	strble.w	r3, [r5, #-1]
 800865a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800865e:	ebac 0305 	sub.w	r3, ip, r5
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	f8cd 8000 	str.w	r8, [sp]
 8008668:	463b      	mov	r3, r7
 800866a:	aa03      	add	r2, sp, #12
 800866c:	4621      	mov	r1, r4
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff fef6 	bl	8008460 <_printf_common>
 8008674:	3001      	adds	r0, #1
 8008676:	d14d      	bne.n	8008714 <_printf_i+0x1c8>
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	b005      	add	sp, #20
 800867e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008682:	4839      	ldr	r0, [pc, #228]	; (8008768 <_printf_i+0x21c>)
 8008684:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008688:	6813      	ldr	r3, [r2, #0]
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	1d1d      	adds	r5, r3, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6015      	str	r5, [r2, #0]
 8008692:	060a      	lsls	r2, r1, #24
 8008694:	d50b      	bpl.n	80086ae <_printf_i+0x162>
 8008696:	07ca      	lsls	r2, r1, #31
 8008698:	bf44      	itt	mi
 800869a:	f041 0120 	orrmi.w	r1, r1, #32
 800869e:	6021      	strmi	r1, [r4, #0]
 80086a0:	b91b      	cbnz	r3, 80086aa <_printf_i+0x15e>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	f022 0220 	bic.w	r2, r2, #32
 80086a8:	6022      	str	r2, [r4, #0]
 80086aa:	2210      	movs	r2, #16
 80086ac:	e7b7      	b.n	800861e <_printf_i+0xd2>
 80086ae:	064d      	lsls	r5, r1, #25
 80086b0:	bf48      	it	mi
 80086b2:	b29b      	uxthmi	r3, r3
 80086b4:	e7ef      	b.n	8008696 <_printf_i+0x14a>
 80086b6:	4665      	mov	r5, ip
 80086b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086bc:	fb02 3311 	mls	r3, r2, r1, r3
 80086c0:	5cc3      	ldrb	r3, [r0, r3]
 80086c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086c6:	460b      	mov	r3, r1
 80086c8:	2900      	cmp	r1, #0
 80086ca:	d1f5      	bne.n	80086b8 <_printf_i+0x16c>
 80086cc:	e7b9      	b.n	8008642 <_printf_i+0xf6>
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	6961      	ldr	r1, [r4, #20]
 80086d4:	1d18      	adds	r0, r3, #4
 80086d6:	6010      	str	r0, [r2, #0]
 80086d8:	0628      	lsls	r0, r5, #24
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	d501      	bpl.n	80086e2 <_printf_i+0x196>
 80086de:	6019      	str	r1, [r3, #0]
 80086e0:	e002      	b.n	80086e8 <_printf_i+0x19c>
 80086e2:	066a      	lsls	r2, r5, #25
 80086e4:	d5fb      	bpl.n	80086de <_printf_i+0x192>
 80086e6:	8019      	strh	r1, [r3, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	6123      	str	r3, [r4, #16]
 80086ec:	4665      	mov	r5, ip
 80086ee:	e7b9      	b.n	8008664 <_printf_i+0x118>
 80086f0:	6813      	ldr	r3, [r2, #0]
 80086f2:	1d19      	adds	r1, r3, #4
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	681d      	ldr	r5, [r3, #0]
 80086f8:	6862      	ldr	r2, [r4, #4]
 80086fa:	2100      	movs	r1, #0
 80086fc:	4628      	mov	r0, r5
 80086fe:	f7f7 fd6f 	bl	80001e0 <memchr>
 8008702:	b108      	cbz	r0, 8008708 <_printf_i+0x1bc>
 8008704:	1b40      	subs	r0, r0, r5
 8008706:	6060      	str	r0, [r4, #4]
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	2300      	movs	r3, #0
 800870e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008712:	e7a7      	b.n	8008664 <_printf_i+0x118>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	462a      	mov	r2, r5
 8008718:	4639      	mov	r1, r7
 800871a:	4630      	mov	r0, r6
 800871c:	47c0      	blx	r8
 800871e:	3001      	adds	r0, #1
 8008720:	d0aa      	beq.n	8008678 <_printf_i+0x12c>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	079b      	lsls	r3, r3, #30
 8008726:	d413      	bmi.n	8008750 <_printf_i+0x204>
 8008728:	68e0      	ldr	r0, [r4, #12]
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	4298      	cmp	r0, r3
 800872e:	bfb8      	it	lt
 8008730:	4618      	movlt	r0, r3
 8008732:	e7a3      	b.n	800867c <_printf_i+0x130>
 8008734:	2301      	movs	r3, #1
 8008736:	464a      	mov	r2, r9
 8008738:	4639      	mov	r1, r7
 800873a:	4630      	mov	r0, r6
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d09a      	beq.n	8008678 <_printf_i+0x12c>
 8008742:	3501      	adds	r5, #1
 8008744:	68e3      	ldr	r3, [r4, #12]
 8008746:	9a03      	ldr	r2, [sp, #12]
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	42ab      	cmp	r3, r5
 800874c:	dcf2      	bgt.n	8008734 <_printf_i+0x1e8>
 800874e:	e7eb      	b.n	8008728 <_printf_i+0x1dc>
 8008750:	2500      	movs	r5, #0
 8008752:	f104 0919 	add.w	r9, r4, #25
 8008756:	e7f5      	b.n	8008744 <_printf_i+0x1f8>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1ac      	bne.n	80086b6 <_printf_i+0x16a>
 800875c:	7803      	ldrb	r3, [r0, #0]
 800875e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008762:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008766:	e76c      	b.n	8008642 <_printf_i+0xf6>
 8008768:	080093ad 	.word	0x080093ad
 800876c:	080093be 	.word	0x080093be

08008770 <_sbrk_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4c06      	ldr	r4, [pc, #24]	; (800878c <_sbrk_r+0x1c>)
 8008774:	2300      	movs	r3, #0
 8008776:	4605      	mov	r5, r0
 8008778:	4608      	mov	r0, r1
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	f7fb fcb0 	bl	80040e0 <_sbrk>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_sbrk_r+0x1a>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	b103      	cbz	r3, 800878a <_sbrk_r+0x1a>
 8008788:	602b      	str	r3, [r5, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	2000123c 	.word	0x2000123c

08008790 <__sread>:
 8008790:	b510      	push	{r4, lr}
 8008792:	460c      	mov	r4, r1
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	f000 f8d6 	bl	8008948 <_read_r>
 800879c:	2800      	cmp	r0, #0
 800879e:	bfab      	itete	ge
 80087a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087a2:	89a3      	ldrhlt	r3, [r4, #12]
 80087a4:	181b      	addge	r3, r3, r0
 80087a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087aa:	bfac      	ite	ge
 80087ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ae:	81a3      	strhlt	r3, [r4, #12]
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <__swrite>:
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	461f      	mov	r7, r3
 80087b8:	898b      	ldrh	r3, [r1, #12]
 80087ba:	05db      	lsls	r3, r3, #23
 80087bc:	4605      	mov	r5, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	4616      	mov	r6, r2
 80087c2:	d505      	bpl.n	80087d0 <__swrite+0x1e>
 80087c4:	2302      	movs	r3, #2
 80087c6:	2200      	movs	r2, #0
 80087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087cc:	f000 f868 	bl	80088a0 <_lseek_r>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	4632      	mov	r2, r6
 80087de:	463b      	mov	r3, r7
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e6:	f000 b817 	b.w	8008818 <_write_r>

080087ea <__sseek>:
 80087ea:	b510      	push	{r4, lr}
 80087ec:	460c      	mov	r4, r1
 80087ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f2:	f000 f855 	bl	80088a0 <_lseek_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	bf15      	itete	ne
 80087fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008806:	81a3      	strheq	r3, [r4, #12]
 8008808:	bf18      	it	ne
 800880a:	81a3      	strhne	r3, [r4, #12]
 800880c:	bd10      	pop	{r4, pc}

0800880e <__sclose>:
 800880e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008812:	f000 b813 	b.w	800883c <_close_r>
	...

08008818 <_write_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4c07      	ldr	r4, [pc, #28]	; (8008838 <_write_r+0x20>)
 800881c:	4605      	mov	r5, r0
 800881e:	4608      	mov	r0, r1
 8008820:	4611      	mov	r1, r2
 8008822:	2200      	movs	r2, #0
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7fb fc09 	bl	800403e <_write>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_write_r+0x1e>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	b103      	cbz	r3, 8008836 <_write_r+0x1e>
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	2000123c 	.word	0x2000123c

0800883c <_close_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4c06      	ldr	r4, [pc, #24]	; (8008858 <_close_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4605      	mov	r5, r0
 8008844:	4608      	mov	r0, r1
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	f7fb fc15 	bl	8004076 <_close>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_close_r+0x1a>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	b103      	cbz	r3, 8008856 <_close_r+0x1a>
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	2000123c 	.word	0x2000123c

0800885c <_fstat_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4c07      	ldr	r4, [pc, #28]	; (800887c <_fstat_r+0x20>)
 8008860:	2300      	movs	r3, #0
 8008862:	4605      	mov	r5, r0
 8008864:	4608      	mov	r0, r1
 8008866:	4611      	mov	r1, r2
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	f7fb fc10 	bl	800408e <_fstat>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d102      	bne.n	8008878 <_fstat_r+0x1c>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	b103      	cbz	r3, 8008878 <_fstat_r+0x1c>
 8008876:	602b      	str	r3, [r5, #0]
 8008878:	bd38      	pop	{r3, r4, r5, pc}
 800887a:	bf00      	nop
 800887c:	2000123c 	.word	0x2000123c

08008880 <_isatty_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4c06      	ldr	r4, [pc, #24]	; (800889c <_isatty_r+0x1c>)
 8008884:	2300      	movs	r3, #0
 8008886:	4605      	mov	r5, r0
 8008888:	4608      	mov	r0, r1
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	f7fb fc0f 	bl	80040ae <_isatty>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_isatty_r+0x1a>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	b103      	cbz	r3, 800889a <_isatty_r+0x1a>
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	2000123c 	.word	0x2000123c

080088a0 <_lseek_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4c07      	ldr	r4, [pc, #28]	; (80088c0 <_lseek_r+0x20>)
 80088a4:	4605      	mov	r5, r0
 80088a6:	4608      	mov	r0, r1
 80088a8:	4611      	mov	r1, r2
 80088aa:	2200      	movs	r2, #0
 80088ac:	6022      	str	r2, [r4, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7fb fc08 	bl	80040c4 <_lseek>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_lseek_r+0x1e>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	b103      	cbz	r3, 80088be <_lseek_r+0x1e>
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2000123c 	.word	0x2000123c

080088c4 <memmove>:
 80088c4:	4288      	cmp	r0, r1
 80088c6:	b510      	push	{r4, lr}
 80088c8:	eb01 0302 	add.w	r3, r1, r2
 80088cc:	d807      	bhi.n	80088de <memmove+0x1a>
 80088ce:	1e42      	subs	r2, r0, #1
 80088d0:	4299      	cmp	r1, r3
 80088d2:	d00a      	beq.n	80088ea <memmove+0x26>
 80088d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088dc:	e7f8      	b.n	80088d0 <memmove+0xc>
 80088de:	4283      	cmp	r3, r0
 80088e0:	d9f5      	bls.n	80088ce <memmove+0xa>
 80088e2:	1881      	adds	r1, r0, r2
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	42d3      	cmn	r3, r2
 80088e8:	d100      	bne.n	80088ec <memmove+0x28>
 80088ea:	bd10      	pop	{r4, pc}
 80088ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088f4:	e7f7      	b.n	80088e6 <memmove+0x22>

080088f6 <__malloc_lock>:
 80088f6:	4770      	bx	lr

080088f8 <__malloc_unlock>:
 80088f8:	4770      	bx	lr

080088fa <_realloc_r>:
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	4607      	mov	r7, r0
 80088fe:	4614      	mov	r4, r2
 8008900:	460e      	mov	r6, r1
 8008902:	b921      	cbnz	r1, 800890e <_realloc_r+0x14>
 8008904:	4611      	mov	r1, r2
 8008906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800890a:	f7ff babd 	b.w	8007e88 <_malloc_r>
 800890e:	b922      	cbnz	r2, 800891a <_realloc_r+0x20>
 8008910:	f7ff fa6c 	bl	8007dec <_free_r>
 8008914:	4625      	mov	r5, r4
 8008916:	4628      	mov	r0, r5
 8008918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891a:	f000 f827 	bl	800896c <_malloc_usable_size_r>
 800891e:	42a0      	cmp	r0, r4
 8008920:	d20f      	bcs.n	8008942 <_realloc_r+0x48>
 8008922:	4621      	mov	r1, r4
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff faaf 	bl	8007e88 <_malloc_r>
 800892a:	4605      	mov	r5, r0
 800892c:	2800      	cmp	r0, #0
 800892e:	d0f2      	beq.n	8008916 <_realloc_r+0x1c>
 8008930:	4631      	mov	r1, r6
 8008932:	4622      	mov	r2, r4
 8008934:	f7fe fef8 	bl	8007728 <memcpy>
 8008938:	4631      	mov	r1, r6
 800893a:	4638      	mov	r0, r7
 800893c:	f7ff fa56 	bl	8007dec <_free_r>
 8008940:	e7e9      	b.n	8008916 <_realloc_r+0x1c>
 8008942:	4635      	mov	r5, r6
 8008944:	e7e7      	b.n	8008916 <_realloc_r+0x1c>
	...

08008948 <_read_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4c07      	ldr	r4, [pc, #28]	; (8008968 <_read_r+0x20>)
 800894c:	4605      	mov	r5, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7fb fb54 	bl	8004004 <_read>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_read_r+0x1e>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	b103      	cbz	r3, 8008966 <_read_r+0x1e>
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	2000123c 	.word	0x2000123c

0800896c <_malloc_usable_size_r>:
 800896c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008970:	1f18      	subs	r0, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfbc      	itt	lt
 8008976:	580b      	ldrlt	r3, [r1, r0]
 8008978:	18c0      	addlt	r0, r0, r3
 800897a:	4770      	bx	lr

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
